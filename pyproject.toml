[project]
name = "centralcli"
version = "8.2.6"
description = "A CLI for interacting with Aruba Central (Cloud Management Platform).  Facilitates bulk imports, exports, reporting.  A handy tool if you have devices managed by Aruba Central."
license = "MIT"
authors = [{"name" = "Wade Wells (Pack3tL0ss)","email" = "cencli@consolepi.com"}]
maintainers = [{"name" = "Wade Wells (Pack3tL0ss)","email" = "cencli@consolepi.com"}]
readme = "README.md"
requires-python = ">=3.8,<4.0"

dependencies = [
    "tabulate>=0.8",
    "typer>=0.6,<0.11.0",
    "pylibyaml>=0.1.0",
    "PyYAML>=6",
    "tinydb>=4",
    "shellingham>=1",
    "pendulum>=2",
    "pycentral>=0.0.3",
    "aiohttp>=3",
    "asyncio>=3",
    "rich>=10",
    "tablib>=3",
    "jinja2",
    "pydantic>=2.0.0",
    "ipaddress",
    "fuzzywuzzy",
    "levenshtein",
    "click<=7.1.2",
    "uniplot>=0.13.0",
    "eval_type_backport;python_version<'3.10'",
]

keywords = [
    "cli",
    "Aruba",
    "Aruba Networks",
    "Aruba Central",
    "HPE",
    "API",
    "RESTFUL",
    "REST"
]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License"
]

[project.optional-dependencies]
hook-proxy = [ "fastapi", "uvicorn", "psutil"]
speedups = [ "aiodns>=3.2.0;platform_system != 'Windows'", "Brotli;platform_python_implementation == \"CPython\"", "brotlicffi;platform_python_implementation != 'CPython'"]

[project.urls]
documentation = "https://central-api-cli.readthedocs.org"
repository = "https://github.com/Pack3tL0ss/central-api-cli"
issues = "https://github.com/Pack3tL0ss/central-api-cli/issues"

[project.scripts]
cencli = "centralcli.cli:app"

[tool.poetry.group.dev.dependencies]
ruff = ">=0.8.0"
pytest = ">=6"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning"
]

[tool.ruff]
line-length = 181
# Enable the pycodestyle (`E`) and Pyflakes (`F`) rules by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.

[tool.ruff.lint]
select = ["E", "F", "W605"]
ignore = ["E501"]  # ignore line too long

# Allow autofix for all enabled rules (when `--fix`) is provided.
# fixable = ["ALL"]
# unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
