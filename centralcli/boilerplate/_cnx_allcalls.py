import sys
from pathlib import Path
from typing import Dict, List, Any


# Detect if called from pypi installed package or via cloned github repo (development)
try:
    from centralcli import Response
except (ImportError, ModuleNotFoundError) as e:
    pkg_dir = Path(__file__).absolute().parent
    if pkg_dir.name == "centralcli":
        sys.path.insert(0, str(pkg_dir.parent))
        from centralcli import Response
    else:
        print(pkg_dir.parts)
        raise e

from centralcli.central import CentralApi


class AllCalls(CentralApi):
    def __init__(self, account_name: str = "central_info"):
        super().__init__(account_name=account_name)

    async def dot11k_bcn_rpt_req_create_bcn_rpt_req_profiles_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        bssid: str = None,
        channel: str = None,
        include_ssid: bool = None,
        last_beacon_rpt_indication: bool = None,
        measure_duration: int = None,
        measure_mode: str = None,
        random_interval: int = None,
        reg_class: str = None,
        request_info: str = None,
        report_detail: bool = None,
        ssid: str = None,
    ) -> Response:
        """Create bcn-rpt-req-profiles by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of beacon report request profiles
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Beacon report request profile name
            bssid (str): BSSID included in the beacon request. Default: wildcard
            channel (str): This option is used to set the Channel field in the Beacon Report Request
                frame. The Channel value can be set to one of the following:
                The channel of the AP (when Measurement Mode is set to either 'Passive' or 'Active-
                All channels') 0 (when Measurement Mode is set to 'Beacon Table')
                255 (when Measurement Mode is set to 'Active-Channel Report')
            include_ssid (bool): Enable including SSID IE in Beacon Report Request
            last_beacon_rpt_indication (bool): Enable Last Beacon Request Indication sub-element in
                Beacon Report Request.
            measure_duration (int): Measurement Duration field in the Beacon Report Request frame.
                The Measurement Duration is set to the duration of the requested measurement. It is
                expressed in units of TUs.
            measure_mode (str): Measurement Mode for Beacon Reports. The mode should be one of
                active-all-ch|active-ch-rpt|beacon-table|passive. Default: beacon-table  Valid
                Values: BEACON_TABLE, PASSIVE, ACTIVE-ALL-CH, ACTIVE-CH-RPT
            random_interval (int): Randomization Interval field in the Beacon Report Request frame.
                The Randomization Interval is used to specify the desired maximum random delay in
                the measurement start time.                                    It is expressed in
                units of TUs (Time Units). A Randomization Interval of 0 in a measurement request
                indicates that                                    no random delay is to be used.
            reg_class (str): Regulatory Class for Beacon Report Request. Value: auto, 1, 12, 81,
                115, or 131. Default auto to use value based on country code  Valid Values: AUTO,
                CLASS_1, CLASS_12, CLASS_81, CLASS_115, CLASS_131
            request_info (str): Contents of the Request Information IE that could be present in the
                Beacon Report Request frame.                                 The Request Information
                IE is present for all Measurement Modes except the Beacon Table mode. It consists of
                a list of Element IDs that                                 should be included by the
                client in the response frame.                                 Any valid element ID
                in the x/y/z format. For example, 0/21/22.
            report_detail (bool): Value for the Detail field in the Reporting Detail sub-element
                present in the Beacon Report Request frame.
            ssid (str): SSID (network name).

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/bcn-rpt-req-profiles"

        json_data = {
            'name': name,
            'bssid': bssid,
            'channel': channel,
            'include_ssid': include_ssid,
            'last_beacon_rpt_indication': last_beacon_rpt_indication,
            'measure_duration': measure_duration,
            'measure_mode': measure_mode,
            'random_interval': random_interval,
            'reg_class': reg_class,
            'request_info': request_info,
            'report_detail': report_detail,
            'ssid': ssid
        }

        return await self.post(url, json_data=json_data)

    async def dot11k_bcn_rpt_req_read_bcn_rpt_req_profiles_v1(
        self,
    ) -> Response:
        """Get bcn-rpt-req-profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/bcn-rpt-req-profiles"

        return await self.get(url)

    async def dot11k_bcn_rpt_req_create_bcn_rpt_req_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bcn-rpt-req-profiles/{name}"

        return await self.post(url)

    async def dot11k_bcn_rpt_req_read_bcn_rpt_req_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bcn-rpt-req-profiles/{name}"

        return await self.get(url)

    async def dot11k_bcn_rpt_req_delete_bcn_rpt_req_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bcn-rpt-req-profiles/{name}"

        return await self.delete(url)

    async def dot11k_rrm_ie_create_rrm_ie_profiles_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        country_ie: bool = None,
        enable_capabilities_ie: bool = None,
    ) -> Response:
        """Create rrm-ie-profiles by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of RRM IE profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): RRM IE profile name
            country_ie (bool): Enable advertising in beacon and probe responses the device's
                regulatory domain
            enable_capabilities_ie (bool): Enable advertising in beacon and probe responses support
                for radio measurements in a device.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/rrm-ie-profiles"

        json_data = {
            'name': name,
            'country_ie': country_ie,
            'enable_capabilities_ie': enable_capabilities_ie
        }

        return await self.post(url, json_data=json_data)

    async def dot11k_rrm_ie_read_rrm_ie_profiles_v1(
        self,
    ) -> Response:
        """Get rrm-ie-profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/rrm-ie-profiles"

        return await self.get(url)

    async def dot11k_rrm_ie_create_rrm_ie_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rrm-ie-profiles/{name}"

        return await self.post(url)

    async def dot11k_rrm_ie_read_rrm_ie_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rrm-ie-profiles/{name}"

        return await self.get(url)

    async def dot11k_rrm_ie_delete_rrm_ie_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rrm-ie-profiles/{name}"

        return await self.delete(url)

    async def dot11k_create_dot11k_profiles_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        channel_report_11a: str = None,
        channel_report_11bg: str = None,
        channel_report_6ghz: str = None,
        beacon_req_time: int = None,
        bcn_rpt_req_profile_name: str = None,
        nb_resp_wide_band_ie: bool = None,
        enable: bool = None,
        rrm_ie_profile_name: str = None,
    ) -> Response:
        """Create dot11k-profiles by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of 802.11k profiles
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): 802.11k profile name
            channel_report_11a (str): Set channel for AP Channel Reports in 5GHz band. Range:
                [34-173], Default: 36  Valid Values: CHAN_36, CHAN_40, CHAN_44, CHAN_48, CHAN_52,
                CHAN_56, CHAN_60, CHAN_64, CHAN_100, CHAN_104, CHAN_108, CHAN_112, CHAN_116,
                CHAN_120, CHAN_124, CHAN_128, CHAN_132, CHAN_136, CHAN_140, CHAN_144, CHAN_149,
                CHAN_153, CHAN_157, CHAN_161, CHAN_165, CHAN_169, CHAN_173, CHAN_177
            channel_report_11bg (str): Set channel for AP Channel Reports in 2.4GHz band. Range:
                [1-14], Default: 1  Valid Values: CHAN_1, CHAN_2, CHAN_3, CHAN_4, CHAN_5, CHAN_6,
                CHAN_7, CHAN_8, CHAN_9, CHAN_10, CHAN_11, CHAN_12, CHAN_13, CHAN_14
            channel_report_6ghz (str): Set channel for AP Channel Reports in 6GHz band. Range:
                [1-233], Default: 1  Valid Values: CHAN_1_6GHZ, CHAN_5_6GHZ, CHAN_9_6GHZ,
                CHAN_13_6GHZ, CHAN_17_6GHZ, CHAN_21_6GHZ, CHAN_25_6GHZ, CHAN_29_6GHZ, CHAN_33_6GHZ,
                CHAN_37_6GHZ, CHAN_41_6GHZ, CHAN_45_6GHZ, CHAN_49_6GHZ, CHAN_53_6GHZ, CHAN_57_6GHZ,
                CHAN_61_6GHZ, CHAN_65_6GHZ, CHAN_69_6GHZ, CHAN_73_6GHZ, CHAN_77_6GHZ, CHAN_81_6GHZ,
                CHAN_85_6GHZ, CHAN_89_6GHZ, CHAN_93_6GHZ, CHAN_97_6GHZ, CHAN_101_6GHZ,
                CHAN_105_6GHZ, CHAN_109_6GHZ, CHAN_113_6GHZ, CHAN_117_6GHZ, CHAN_121_6GHZ,
                CHAN_125_6GHZ, CHAN_129_6GHZ, CHAN_133_6GHZ, CHAN_137_6GHZ, CHAN_141_6GHZ,
                CHAN_145_6GHZ, CHAN_149_6GHZ, CHAN_153_6GHZ, CHAN_157_6GHZ, CHAN_161_6GHZ,
                CHAN_165_6GHZ, CHAN_169_6GHZ, CHAN_173_6GHZ, CHAN_177_6GHZ, CHAN_181_6GHZ,
                CHAN_185_6GHZ, CHAN_189_6GHZ, CHAN_193_6GHZ, CHAN_197_6GHZ, CHAN_201_6GHZ,
                CHAN_205_6GHZ, CHAN_209_6GHZ, CHAN_213_6GHZ, CHAN_217_6GHZ, CHAN_221_6GHZ,
                CHAN_225_6GHZ, CHAN_229_6GHZ, CHAN_233_6GHZ
            beacon_req_time (int): Set time duration between consecutive Beacon Requests. Range:
                10-200 sec, Default: 60 sec, Turn-Off: 0
            bcn_rpt_req_profile_name (str): Beacon Report Request Settings for the selected profile.
            nb_resp_wide_band_ie (bool): Include the wide channel bandwidth information element in
                the neighbor report responses, when the dot11k setting is enabled on the managed
                device.
            enable (bool): Enables the 802.11K feature. This feature is disabled by default.
            rrm_ie_profile_name (str): RRM IE Settings Profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dot11k-profiles"

        json_data = {
            'name': name,
            'channel_report_11a': channel_report_11a,
            'channel_report_11bg': channel_report_11bg,
            'channel_report_6ghz': channel_report_6ghz,
            'beacon_req_time': beacon_req_time,
            'bcn_rpt_req_profile_name': bcn_rpt_req_profile_name,
            'nb_resp_wide_band_ie': nb_resp_wide_band_ie,
            'enable': enable,
            'rrm_ie_profile_name': rrm_ie_profile_name
        }

        return await self.post(url, json_data=json_data)

    async def dot11k_read_dot11k_profiles_v1(
        self,
    ) -> Response:
        """Get dot11k-profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dot11k-profiles"

        return await self.get(url)

    async def dot11k_create_dot11k_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot11k-profiles/{name}"

        return await self.post(url)

    async def dot11k_read_dot11k_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot11k-profiles/{name}"

        return await self.get(url)

    async def dot11k_delete_dot11k_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot11k-profiles/{name}"

        return await self.delete(url)

    async def aaa_bandwidth_contract_create_aaa_bandwidth_contract_by_id_v1(
        self,
        name: str,
        description: str,
        bwc_units: str,
        kbit_rate: int,
        percentage: int,
    ) -> Response:
        """Create aaa-bandwidth-contract by ID.

        Args:
            name (str): AAA Bandwidth contract name.
            description (str): AAA Bandwidth Contract profile description.
            bwc_units (str): Bandwidth Units.  Valid Values: KBITS_PER_SEC, MBITS_PER_SEC,
                LINK_PERCENT
            kbit_rate (int): Bandwidth in kilobits per second.
            percentage (int): Percentage of link bandwidth.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-bandwidth-contract"

        json_data = {
            'name': name,
            'description': description,
            'bwc_units': bwc_units,
            'kbit_rate': kbit_rate,
            'percentage': percentage
        }

        return await self.post(url, json_data=json_data)

    async def aaa_bandwidth_contract_read_aaa_bandwidth_contract_v1(
        self,
    ) -> Response:
        """Get aaa-bandwidth-contract.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-bandwidth-contract"

        return await self.get(url)

    async def aaa_bandwidth_contract_create_aaa_bandwidth_contract_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-bandwidth-contract/{name}"

        return await self.post(url)

    async def aaa_bandwidth_contract_read_aaa_bandwidth_contract_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-bandwidth-contract/{name}"

        return await self.get(url)

    async def aaa_bandwidth_contract_delete_aaa_bandwidth_contract_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-bandwidth-contract/{name}"

        return await self.delete(url)

    async def aaa_captive_portal_create_captive_portal_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        external_cp_server_url: str = None,
        use_https: bool = None,
        redirect_url: str = None,
        server_failthrough: bool = None,
        server_offload: bool = None,
        switch_ip: bool = None,
        prevent_frame_overlay: bool = None,
        out_of_service_page: str = None,
        default_role: str = None,
        default_guest_role: str = None,
        server_group: str = None,
        redirect_pause: int = None,
        user_logon: bool = None,
        guest_logon: bool = None,
        logout_popup_window: bool = None,
        logon_wait_min_delay: int = None,
        logon_wait_max_delay: int = None,
        logon_wait_cpu_threshold: int = None,
        max_authentication_failures: int = None,
        show_fqdn: bool = None,
        auth_protocol: str = None,
        login_page: str = None,
        welcome_page: str = None,
        enable_welcome_page: bool = None,
        user_vlan_in_redirection_url: bool = None,
        ap_mac_in_redirection_url: bool = None,
        single_session: bool = None,
        ip_addr_in_redirection_url: str = None,
        allow_list: list = None,
        deny_list: list = None,
        show_acceptable_use_policy: bool = None,
        user_idle_timeout: int = None,
        apple_cna_bypass: bool = None,
        url_hash_key_value: str = None,
        url_hash_key_format: str = None,
        enable: bool = None,
    ) -> Response:
        """Create captive-portal by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Captive portal profile configuration.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Profile name.
            description (str): Description, or comment, for the Captive Portal profile.
            external_cp_server_url (str): The URL for the external captive portal server, URL
                format:http(s)://<server>:<port>/path.
            use_https (bool): Enforce clients to use HTTPS to communicate with the authentication
                server
            redirect_url (str): Specify a redirect URL to redirect users to another URL.
            server_failthrough (bool): Allow the guest clients to access Internet when the external
                captive portal server is not available.
            server_offload (bool): Enables the server-offload feature to reduce the load on the
                external captive portal server by allowing the Instant AP to use a Meta tag to
                redirect HTTP and HTTPS requests from the client.
            switch_ip (bool): Sends the IP address of the virtual controller in the redirection URL
                when external captive portal servers are used.
            prevent_frame_overlay (bool): When the Prevent frame overlay option is enabled, a frame
                can display a page only if it is in the same domain as the main page.
            out_of_service_page (str): Configures a URL to redirect the users when the internet
                uplink is down.
            default_role (str): Default user role.
            default_guest_role (str): Default guest user role.
            server_group (str): Associate to a server group.
            redirect_pause (int): Pause time for automatic redirect.Range: 1-60, 0 to disable.
                Default: 10.
            user_logon (bool): Allow registered user login.
            guest_logon (bool): Allow guest user login.
            logout_popup_window (bool): Open popup window for logout after authentication.
            logon_wait_min_delay (int): Logon wait when CPU is overloaded, minimum wait (secs).
            logon_wait_max_delay (int): Logon wait when CPU is overloaded,Maximum wait (secs).
            logon_wait_cpu_threshold (int): Logon wait when CPU is overloaded, CPU utilization
                threshold (%). Range: 1-100. Default: 60.
            max_authentication_failures (int): Maximum auth failures before user is added to
                denylist.Range: 0-10. Default: 0.
            show_fqdn (bool): Allow user to see and select FQDN.
            auth_protocol (str): Authentication Protocol to be used.  Valid Values: PAP, MSCHAPv2,
                CHAP
            login_page (str): Alternate welcome page to show after authentication.
            welcome_page (str): Alternate welcome page to show after authentication.
            enable_welcome_page (bool): Enable the welcome page before redirection to original
                destination.
            user_vlan_in_redirection_url (bool): Add user VLAN in redirection URL.
            ap_mac_in_redirection_url (bool): Add AP's MAC address in redirection URL.
            single_session (bool): Allow only one active user session at a time.
            ip_addr_in_redirection_url (str): Add one of the controller interfaces in the
                redirection URL.
            allow_list (list): Allow List of Netdestinations.
            deny_list (list): Deny List of Netdestinations.
            show_acceptable_use_policy (bool): Show the acceptable use policy page before the logon
                page.
            user_idle_timeout (int): User idle timeout value. Valid range is 30-1296000 seconds in
                multiples of 30 seconds
            apple_cna_bypass (bool): To bypass Apple CNA on iOS devices like iPad, iPhone, iPod.
            url_hash_key_value (str): Hash the redirection URL using this key.
            url_hash_key_format (str): Hash Key format.  Valid Values: PLAIN_TEXT, CIPHER_TEXT
            enable (bool): Enable Captive Portal profile

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/captive-portal"

        json_data = {
            'name': name,
            'description': description,
            'external_cp_server_url': external_cp_server_url,
            'use_https': use_https,
            'redirect_url': redirect_url,
            'server_failthrough': server_failthrough,
            'server_offload': server_offload,
            'switch_ip': switch_ip,
            'prevent_frame_overlay': prevent_frame_overlay,
            'out_of_service_page': out_of_service_page,
            'default_role': default_role,
            'default_guest_role': default_guest_role,
            'server_group': server_group,
            'redirect_pause': redirect_pause,
            'user_logon': user_logon,
            'guest_logon': guest_logon,
            'logout_popup_window': logout_popup_window,
            'logon_wait_min_delay': logon_wait_min_delay,
            'logon_wait_max_delay': logon_wait_max_delay,
            'logon_wait_cpu_threshold': logon_wait_cpu_threshold,
            'max_authentication_failures': max_authentication_failures,
            'show_fqdn': show_fqdn,
            'auth_protocol': auth_protocol,
            'login_page': login_page,
            'welcome_page': welcome_page,
            'enable_welcome_page': enable_welcome_page,
            'user_vlan_in_redirection_url': user_vlan_in_redirection_url,
            'ap_mac_in_redirection_url': ap_mac_in_redirection_url,
            'single_session': single_session,
            'ip_addr_in_redirection_url': ip_addr_in_redirection_url,
            'allow_list': allow_list,
            'deny_list': deny_list,
            'show_acceptable_use_policy': show_acceptable_use_policy,
            'user_idle_timeout': user_idle_timeout,
            'apple_cna_bypass': apple_cna_bypass,
            'url_hash_key_value': url_hash_key_value,
            'url_hash_key_format': url_hash_key_format,
            'enable': enable
        }

        return await self.post(url, json_data=json_data)

    async def aaa_captive_portal_read_captive_portal_v1(
        self,
    ) -> Response:
        """Get captive-portal.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/captive-portal"

        return await self.get(url)

    async def aaa_captive_portal_create_captive_portal_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/captive-portal/{name}"

        return await self.post(url)

    async def aaa_captive_portal_read_captive_portal_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/captive-portal/{name}"

        return await self.get(url)

    async def aaa_captive_portal_delete_captive_portal_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/captive-portal/{name}"

        return await self.delete(url)

    async def aaa_captive_portal_create_captive_portal_profile_allow_list_by_id_v1(
        self,
        name: str = None,
        domain: str = None,
    ) -> Response:
        """Create allow-list by ID.

        Args:
            name (str, optional): name
            domain (str, optional): domain

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/captive-portal/{name}/allow-list/{domain}"

        return await self.post(url)

    async def aaa_captive_portal_read_captive_portal_profile_allow_list_by_id_v1(
        self,
        name: str = None,
        domain: str = None,
    ) -> Response:
        """Get allow-list by ID.

        Args:
            name (str, optional): name
            domain (str, optional): domain

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/captive-portal/{name}/allow-list/{domain}"

        return await self.get(url)

    async def aaa_captive_portal_delete_captive_portal_profile_allow_list_by_id_v1(
        self,
        name: str = None,
        domain: str = None,
    ) -> Response:
        """Delete allow-list by ID.

        Args:
            name (str, optional): name
            domain (str, optional): domain

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/captive-portal/{name}/allow-list/{domain}"

        return await self.delete(url)

    async def aaa_captive_portal_create_captive_portal_profile_deny_list_by_id_v1(
        self,
        name: str = None,
        domain: str = None,
    ) -> Response:
        """Create deny-list by ID.

        Args:
            name (str, optional): name
            domain (str, optional): domain

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/captive-portal/{name}/deny-list/{domain}"

        return await self.post(url)

    async def aaa_captive_portal_read_captive_portal_profile_deny_list_by_id_v1(
        self,
        name: str = None,
        domain: str = None,
    ) -> Response:
        """Get deny-list by ID.

        Args:
            name (str, optional): name
            domain (str, optional): domain

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/captive-portal/{name}/deny-list/{domain}"

        return await self.get(url)

    async def aaa_captive_portal_delete_captive_portal_profile_deny_list_by_id_v1(
        self,
        name: str = None,
        domain: str = None,
    ) -> Response:
        """Delete deny-list by ID.

        Args:
            name (str, optional): name
            domain (str, optional): domain

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/captive-portal/{name}/deny-list/{domain}"

        return await self.delete(url)

    async def aaa_dot1xauth_create_dot1xauth_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create dot1xauth by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of 802.1X authentication profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of 802.1X authentication profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dot1xauth"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def aaa_dot1xauth_read_dot1xauth_v1(
        self,
    ) -> Response:
        """Get dot1xauth.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dot1xauth"

        return await self.get(url)

    async def aaa_dot1xauth_create_dot1xauth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xauth/{name}"

        return await self.post(url)

    async def aaa_dot1xauth_read_dot1xauth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xauth/{name}"

        return await self.get(url)

    async def aaa_dot1xauth_delete_dot1xauth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xauth/{name}"

        return await self.delete(url)

    async def aaa_dot1xauth_create_dot1xauth_profile_macsec_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create macsec by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xauth/{name}/macsec"

        return await self.post(url)

    async def aaa_dot1xauth_read_dot1xauth_profile_macsec_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get macsec by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xauth/{name}/macsec"

        return await self.get(url)

    async def aaa_dot1xauth_create_dot1xauth_profile_machine_auth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create machine-auth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xauth/{name}/machine-auth"

        return await self.post(url)

    async def aaa_dot1xauth_read_dot1xauth_profile_machine_auth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get machine-auth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xauth/{name}/machine-auth"

        return await self.get(url)

    async def aaa_dot1xauth_create_dot1xauth_profile_server_parameters_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create server-parameters by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xauth/{name}/server-parameters"

        return await self.post(url)

    async def aaa_dot1xauth_read_dot1xauth_profile_server_parameters_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get server-parameters by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xauth/{name}/server-parameters"

        return await self.get(url)

    async def aaa_dot1xauth_create_dot1xauth_profile_dot1x_termination_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create dot1x-termination by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xauth/{name}/dot1x-termination"

        return await self.post(url)

    async def aaa_dot1xauth_read_dot1xauth_profile_dot1x_termination_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get dot1x-termination by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xauth/{name}/dot1x-termination"

        return await self.get(url)

    async def aaa_dot1xsupp_create_dot1xsupp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create dot1xsupp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of 802.1X supplicant profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of 802.1X supplicant profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dot1xsupp"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def aaa_dot1xsupp_read_dot1xsupp_v1(
        self,
    ) -> Response:
        """Get dot1xsupp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dot1xsupp"

        return await self.get(url)

    async def aaa_dot1xsupp_create_dot1xsupp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xsupp/{name}"

        return await self.post(url)

    async def aaa_dot1xsupp_read_dot1xsupp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xsupp/{name}"

        return await self.get(url)

    async def aaa_dot1xsupp_delete_dot1xsupp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xsupp/{name}"

        return await self.delete(url)

    async def aaa_dot1xsupp_create_dot1xsupp_profile_macsec_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create macsec by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xsupp/{name}/macsec"

        return await self.post(url)

    async def aaa_dot1xsupp_read_dot1xsupp_profile_macsec_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get macsec by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dot1xsupp/{name}/macsec"

        return await self.get(url)

    async def aaa_lma_create_localmacauth_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create localmacauth by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of LMA profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of LMA profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/localmacauth"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def aaa_lma_read_localmacauth_v1(
        self,
    ) -> Response:
        """Get localmacauth.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/localmacauth"

        return await self.get(url)

    async def aaa_lma_create_localmacauth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/localmacauth/{name}"

        return await self.post(url)

    async def aaa_lma_read_localmacauth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/localmacauth/{name}"

        return await self.get(url)

    async def aaa_lma_delete_localmacauth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/localmacauth/{name}"

        return await self.delete(url)

    async def aaa_macauth_create_macauth_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create macauth by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of MAC Auth profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of MAC Auth profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/macauth"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def aaa_macauth_read_macauth_v1(
        self,
    ) -> Response:
        """Get macauth.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/macauth"

        return await self.get(url)

    async def aaa_macauth_create_macauth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/macauth/{name}"

        return await self.post(url)

    async def aaa_macauth_read_macauth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/macauth/{name}"

        return await self.get(url)

    async def aaa_macauth_delete_macauth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/macauth/{name}"

        return await self.delete(url)

    async def aaa_profile_create_aaa_profile_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create aaa-profile by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of AAA profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of AAA profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-profile"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def aaa_profile_read_aaa_profile_v1(
        self,
    ) -> Response:
        """Get aaa-profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-profile"

        return await self.get(url)

    async def aaa_profile_create_aaa_profile_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}"

        return await self.post(url)

    async def aaa_profile_read_aaa_profile_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}"

        return await self.get(url)

    async def aaa_profile_delete_aaa_profile_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}"

        return await self.delete(url)

    async def aaa_profile_create_aaa_profile_profile_authentication_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create authentication by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication"

        return await self.post(url)

    async def aaa_profile_read_aaa_profile_profile_authentication_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get authentication by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication"

        return await self.get(url)

    async def aaa_profile_create_aaa_profile_profile_authentication_auth_precedence_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create auth-precedence by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/auth-precedence"

        return await self.post(url)

    async def aaa_profile_read_aaa_profile_profile_authentication_auth_precedence_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get auth-precedence by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/auth-precedence"

        return await self.get(url)

    async def aaa_profile_delete_aaa_profile_profile_authentication_auth_precedence_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete auth-precedence by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/auth-precedence"

        return await self.delete(url)

    async def aaa_profile_create_aaa_profile_profile_authentication_auth_priority_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create auth-priority by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/auth-priority"

        return await self.post(url)

    async def aaa_profile_read_aaa_profile_profile_authentication_auth_priority_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get auth-priority by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/auth-priority"

        return await self.get(url)

    async def aaa_profile_delete_aaa_profile_profile_authentication_auth_priority_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete auth-priority by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/auth-priority"

        return await self.delete(url)

    async def aaa_profile_create_aaa_profile_profile_authentication_onboarding_precedence_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create onboarding-precedence by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/onboarding-precedence"

        return await self.post(url)

    async def aaa_profile_read_aaa_profile_profile_authentication_onboarding_precedence_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get onboarding-precedence by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/onboarding-precedence"

        return await self.get(url)

    async def aaa_profile_delete_aaa_profile_profile_authentication_onboarding_precedence_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete onboarding-precedence by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/onboarding-precedence"

        return await self.delete(url)

    async def aaa_profile_create_aaa_profile_profile_authentication_client_auto_logoff_enable_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create client-auto-logoff-enable by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/client-auto-logoff-enable"

        return await self.post(url)

    async def aaa_profile_read_aaa_profile_profile_authentication_client_auto_logoff_enable_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get client-auto-logoff-enable by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/client-auto-logoff-enable"

        return await self.get(url)

    async def aaa_profile_delete_aaa_profile_profile_authentication_client_auto_logoff_enable_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete client-auto-logoff-enable by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/client-auto-logoff-enable"

        return await self.delete(url)

    async def aaa_profile_create_aaa_profile_profile_authentication_bpdu_auth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create bpdu-auth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/bpdu-auth"

        return await self.post(url)

    async def aaa_profile_read_aaa_profile_profile_authentication_bpdu_auth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get bpdu-auth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/bpdu-auth"

        return await self.get(url)

    async def aaa_profile_create_aaa_profile_profile_authentication_bpdu_bypass_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create bpdu-bypass by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/bpdu-bypass"

        return await self.post(url)

    async def aaa_profile_read_aaa_profile_profile_authentication_bpdu_bypass_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get bpdu-bypass by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/bpdu-bypass"

        return await self.get(url)

    async def aaa_profile_create_aaa_profile_profile_authentication_bpdu_proxy_logoff_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create bpdu-proxy-logoff by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/bpdu-proxy-logoff"

        return await self.post(url)

    async def aaa_profile_read_aaa_profile_profile_authentication_bpdu_proxy_logoff_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get bpdu-proxy-logoff by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authentication/bpdu-proxy-logoff"

        return await self.get(url)

    async def aaa_profile_create_aaa_profile_profile_authorization_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create authorization by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authorization"

        return await self.post(url)

    async def aaa_profile_read_aaa_profile_profile_authorization_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get authorization by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authorization"

        return await self.get(url)

    async def aaa_profile_create_aaa_profile_profile_authorization_default_vlan_id_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create default-vlan-id by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authorization/default-vlan-id"

        return await self.post(url)

    async def aaa_profile_read_aaa_profile_profile_authorization_default_vlan_id_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get default-vlan-id by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authorization/default-vlan-id"

        return await self.get(url)

    async def aaa_profile_delete_aaa_profile_profile_authorization_default_vlan_id_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete default-vlan-id by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authorization/default-vlan-id"

        return await self.delete(url)

    async def aaa_profile_create_aaa_profile_profile_authorization_default_vlan_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create default-vlan-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authorization/default-vlan-list"

        return await self.post(url)

    async def aaa_profile_read_aaa_profile_profile_authorization_default_vlan_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get default-vlan-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authorization/default-vlan-list"

        return await self.get(url)

    async def aaa_profile_delete_aaa_profile_profile_authorization_default_vlan_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete default-vlan-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/authorization/default-vlan-list"

        return await self.delete(url)

    async def aaa_profile_create_aaa_profile_profile_security_violation_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create security-violation by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/security-violation"

        return await self.post(url)

    async def aaa_profile_read_aaa_profile_profile_security_violation_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get security-violation by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-profile/{name}/security-violation"

        return await self.get(url)

    async def aaa_user_derivation_rules_create_user_derivation_rules_by_id_v1(
        self,
        name: str,
        condition: str,
        operator: str,
        mac_address: str,
        dhcp_option_string: str,
        essid_name: str,
        mpsk_key_name: str,
        encryption: str,
        location: str,
        assign_action: str,
        vlan: str,
        role: str,
        description: str,
        position: int,
    ) -> Response:
        """Create user-derivation-rules by ID.

        Args:
            name (str): Name of the rule set.
            condition (str): Condition that should be checked to derive role/VLAN  Valid Values:
                BSSID, DHCP_OPTION, DHCP_OPTION_77, ENCRYPTION_TYPE, ESSID, LOCATION, MACADDR,
                MPSK_KEY_NAME
            operator (str): Match Operator.  Valid Values: MATCH_EQUAL, CONTAINS, ENDS_WITH,
                MATCHES_REGULAR_EXPRESSION, NOT_EQUALS, STARTS_WITH, VALUE_OF
            mac_address (str): Mac Address
            dhcp_option_string (str): DHCP option string
            essid_name (str): ESSID name
            mpsk_key_name (str): MPSK key name
            encryption (str): Encryption type  Valid Values: DYNAMIC-WEP, DYNAMIC-WPA-AES, DYNAMIC-
                WPA-TKIP, DYNAMIC-WPA2-AES, DYNAMIC-WPA2-TKIP, OPEN, STATIC-WEP, STATIC-WPA-AES,
                STATIC-WPA-TKIP, STATIC-WPA2-AES, STATIC-WPA2-TKIP, XSEC
            location (str): user location(ap name).
            assign_action (str): Assignmant action.  Valid Values: ASSIGN_ROLE, ASSIGN_VLAN
            vlan (str): This is the assigned VLAN when there is a rule match.
            role (str): This is the assigned Role when there is a rule match.
            description (str): description of user-derivation rule.
            position (int): position of the rule.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/user-derivation-rules"

        json_data = {
            'name': name,
            'condition': condition,
            'operator': operator,
            'mac_address': mac_address,
            'dhcp_option_string': dhcp_option_string,
            'essid_name': essid_name,
            'mpsk_key_name': mpsk_key_name,
            'encryption': encryption,
            'location': location,
            'assign_action': assign_action,
            'vlan': vlan,
            'role': role,
            'description': description,
            'position': position
        }

        return await self.post(url, json_data=json_data)

    async def aaa_user_derivation_rules_read_user_derivation_rules_v1(
        self,
    ) -> Response:
        """Get user-derivation-rules.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/user-derivation-rules"

        return await self.get(url)

    async def aaa_user_derivation_rules_create_user_derivation_rules_user_rule_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create user-rule by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/user-derivation-rules/{name}"

        return await self.post(url)

    async def aaa_user_derivation_rules_read_user_derivation_rules_user_rule_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get user-rule by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/user-derivation-rules/{name}"

        return await self.get(url)

    async def aaa_user_derivation_rules_delete_user_derivation_rules_user_rule_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete user-rule by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/user-derivation-rules/{name}"

        return await self.delete(url)

    async def aaa_via_auth_create_aaa_via_auth_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create aaa-via-auth by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of via-auth profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of via-auth profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-via-auth"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def aaa_via_auth_read_aaa_via_auth_v1(
        self,
    ) -> Response:
        """Get aaa-via-auth.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-via-auth"

        return await self.get(url)

    async def aaa_via_auth_create_aaa_via_auth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-auth/{name}"

        return await self.post(url)

    async def aaa_via_auth_read_aaa_via_auth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-auth/{name}"

        return await self.get(url)

    async def aaa_via_auth_delete_aaa_via_auth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-auth/{name}"

        return await self.delete(url)

    async def aaa_via_connection_create_aaa_via_connection_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        common_name: str = None,
        organization: str = None,
        organization_unit: str = None,
        country: str = None,
    ) -> Response:
        """Create aaa-via-connection by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of VIA connection profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            common_name (str, optional): CommonName.
            organization (str, optional): Organization.
            organization_unit (str, optional): Organization Unit.
            country (str, optional): Country.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-via-connection"

        json_data = {
            'common_name': common_name,
            'organization': organization,
            'organization_unit': organization_unit,
            'country': country
        }

        return await self.post(url, json_data=json_data)

    async def aaa_via_connection_read_aaa_via_connection_v1(
        self,
    ) -> Response:
        """Get aaa-via-connection.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-via-connection"

        return await self.get(url)

    async def aaa_via_connection_create_aaa_via_connection_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}"

        return await self.post(url)

    async def aaa_via_connection_read_aaa_via_connection_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}"

        return await self.get(url)

    async def aaa_via_connection_delete_aaa_via_connection_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}"

        return await self.delete(url)

    async def aaa_via_connection_create_aaa_via_connection_profile_auth_profile_by_id_v1(
        self,
        name: str = None,
        auth_profil_ename: str = None,
    ) -> Response:
        """Create auth-profile by ID.

        Args:
            name (str, optional): name
            auth_profil_ename (str, optional): authProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/auth-profile/{auth_profil_ename}"

        return await self.post(url)

    async def aaa_via_connection_read_aaa_via_connection_profile_auth_profile_by_id_v1(
        self,
        name: str = None,
        auth_profil_ename: str = None,
    ) -> Response:
        """Get auth-profile by ID.

        Args:
            name (str, optional): name
            auth_profil_ename (str, optional): authProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/auth-profile/{auth_profil_ename}"

        return await self.get(url)

    async def aaa_via_connection_delete_aaa_via_connection_profile_auth_profile_by_id_v1(
        self,
        name: str = None,
        auth_profil_ename: str = None,
    ) -> Response:
        """Delete auth-profile by ID.

        Args:
            name (str, optional): name
            auth_profil_ename (str, optional): authProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/auth-profile/{auth_profil_ename}"

        return await self.delete(url)

    async def aaa_via_connection_create_aaa_via_connection_profile_blocked_destination_by_id_v1(
        self,
        name: str = None,
        destination: str = None,
    ) -> Response:
        """Create blocked-destination by ID.

        Args:
            name (str, optional): name
            destination (str, optional): destination

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/blocked-destination/{destination}"

        return await self.post(url)

    async def aaa_via_connection_read_aaa_via_connection_profile_blocked_destination_by_id_v1(
        self,
        name: str = None,
        destination: str = None,
    ) -> Response:
        """Get blocked-destination by ID.

        Args:
            name (str, optional): name
            destination (str, optional): destination

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/blocked-destination/{destination}"

        return await self.get(url)

    async def aaa_via_connection_delete_aaa_via_connection_profile_blocked_destination_by_id_v1(
        self,
        name: str = None,
        destination: str = None,
    ) -> Response:
        """Delete blocked-destination by ID.

        Args:
            name (str, optional): name
            destination (str, optional): destination

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/blocked-destination/{destination}"

        return await self.delete(url)

    async def aaa_via_connection_create_aaa_via_connection_profile_certificate_criteria_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create certificate-criteria by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/certificate-criteria"

        return await self.post(url)

    async def aaa_via_connection_read_aaa_via_connection_profile_certificate_criteria_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get certificate-criteria by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/certificate-criteria"

        return await self.get(url)

    async def aaa_via_connection_delete_aaa_via_connection_profile_certificate_criteria_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete certificate-criteria by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/certificate-criteria"

        return await self.delete(url)

    async def aaa_via_connection_create_aaa_via_connection_profile_csec_http_ports_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create csec-http-ports by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/csec-http-ports"

        return await self.post(url)

    async def aaa_via_connection_read_aaa_via_connection_profile_csec_http_ports_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get csec-http-ports by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/csec-http-ports"

        return await self.get(url)

    async def aaa_via_connection_delete_aaa_via_connection_profile_csec_http_ports_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete csec-http-ports by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/csec-http-ports"

        return await self.delete(url)

    async def aaa_via_connection_create_aaa_via_connection_profile_distinguished_name_settings_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create distinguished-name-settings by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/distinguished-name-settings"

        return await self.post(url)

    async def aaa_via_connection_read_aaa_via_connection_profile_distinguished_name_settings_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get distinguished-name-settings by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/distinguished-name-settings"

        return await self.get(url)

    async def aaa_via_connection_create_aaa_via_connection_profile_dns_suffix_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create dns-suffix-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/dns-suffix-list"

        return await self.post(url)

    async def aaa_via_connection_read_aaa_via_connection_profile_dns_suffix_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get dns-suffix-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/dns-suffix-list"

        return await self.get(url)

    async def aaa_via_connection_delete_aaa_via_connection_profile_dns_suffix_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete dns-suffix-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/dns-suffix-list"

        return await self.delete(url)

    async def aaa_via_connection_create_aaa_via_connection_profile_ipsec_cryptomap_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ipsec-cryptomap by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/ipsec-cryptomap"

        return await self.post(url)

    async def aaa_via_connection_read_aaa_via_connection_profile_ipsec_cryptomap_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ipsec-cryptomap by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/ipsec-cryptomap"

        return await self.get(url)

    async def aaa_via_connection_create_aaa_via_connection_profile_ipsecv2_cryptomap_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ipsecv2-cryptomap by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/ipsecv2-cryptomap"

        return await self.post(url)

    async def aaa_via_connection_read_aaa_via_connection_profile_ipsecv2_cryptomap_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ipsecv2-cryptomap by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/ipsecv2-cryptomap"

        return await self.get(url)

    async def aaa_via_connection_create_aaa_via_connection_profile_tunneled_networks_by_id_v1(
        self,
        name: str = None,
        network: str = None,
    ) -> Response:
        """Create tunneled-networks by ID.

        Args:
            name (str, optional): name
            network (str, optional): network

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/tunneled-networks/{network}"

        return await self.post(url)

    async def aaa_via_connection_read_aaa_via_connection_profile_tunneled_networks_by_id_v1(
        self,
        name: str = None,
        network: str = None,
    ) -> Response:
        """Get tunneled-networks by ID.

        Args:
            name (str, optional): name
            network (str, optional): network

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/tunneled-networks/{network}"

        return await self.get(url)

    async def aaa_via_connection_delete_aaa_via_connection_profile_tunneled_networks_by_id_v1(
        self,
        name: str = None,
        network: str = None,
    ) -> Response:
        """Delete tunneled-networks by ID.

        Args:
            name (str, optional): name
            network (str, optional): network

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/tunneled-networks/{network}"

        return await self.delete(url)

    async def aaa_via_connection_create_aaa_via_connection_profile_server_by_id_v1(
        self,
        name: str = None,
        address: str = None,
    ) -> Response:
        """Create server by ID.

        Args:
            name (str, optional): name
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/server/{address}"

        return await self.post(url)

    async def aaa_via_connection_read_aaa_via_connection_profile_server_by_id_v1(
        self,
        name: str = None,
        address: str = None,
    ) -> Response:
        """Get server by ID.

        Args:
            name (str, optional): name
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/server/{address}"

        return await self.get(url)

    async def aaa_via_connection_delete_aaa_via_connection_profile_server_by_id_v1(
        self,
        name: str = None,
        address: str = None,
    ) -> Response:
        """Delete server by ID.

        Args:
            name (str, optional): name
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/server/{address}"

        return await self.delete(url)

    async def aaa_via_connection_create_aaa_via_connection_profile_allowlist_by_id_v1(
        self,
        name: str = None,
        subnet: str = None,
    ) -> Response:
        """Create allowlist by ID.

        Args:
            name (str, optional): name
            subnet (str, optional): subnet

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/allowlist/{subnet}"

        return await self.post(url)

    async def aaa_via_connection_read_aaa_via_connection_profile_allowlist_by_id_v1(
        self,
        name: str = None,
        subnet: str = None,
    ) -> Response:
        """Get allowlist by ID.

        Args:
            name (str, optional): name
            subnet (str, optional): subnet

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/allowlist/{subnet}"

        return await self.get(url)

    async def aaa_via_connection_delete_aaa_via_connection_profile_allowlist_by_id_v1(
        self,
        name: str = None,
        subnet: str = None,
    ) -> Response:
        """Delete allowlist by ID.

        Args:
            name (str, optional): name
            subnet (str, optional): subnet

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-connection/{name}/allowlist/{subnet}"

        return await self.delete(url)

    async def aaa_via_web_create_aaa_via_web_auth_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create aaa-via-web-auth by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of VIA web auth profiles. Max elements: 16
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of VIA web auth profiles. Max elements: 16

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-via-web-auth"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def aaa_via_web_read_aaa_via_web_auth_v1(
        self,
    ) -> Response:
        """Get aaa-via-web-auth.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-via-web-auth"

        return await self.get(url)

    async def aaa_via_web_create_aaa_via_web_auth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-web-auth/{name}"

        return await self.post(url)

    async def aaa_via_web_read_aaa_via_web_auth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-web-auth/{name}"

        return await self.get(url)

    async def aaa_via_web_delete_aaa_via_web_auth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via-web-auth/{name}"

        return await self.delete(url)

    async def aaa_via_create_aaa_via_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        message: str = None,
        delimiter: str = None,
    ) -> Response:
        """Create aaa-via by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): VIA Global profiles
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            message (str, optional): Banner message.
            delimiter (str, optional): Banner message delimiter.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-via"

        json_data = {
            'message': message,
            'delimiter': delimiter
        }

        return await self.post(url, json_data=json_data)

    async def aaa_via_read_aaa_via_v1(
        self,
    ) -> Response:
        """Get aaa-via.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-via"

        return await self.get(url)

    async def aaa_via_create_aaa_via_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via/{name}"

        return await self.post(url)

    async def aaa_via_read_aaa_via_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via/{name}"

        return await self.get(url)

    async def aaa_via_delete_aaa_via_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via/{name}"

        return await self.delete(url)

    async def aaa_via_create_aaa_via_profile_banner_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create banner by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via/{name}/banner"

        return await self.post(url)

    async def aaa_via_read_aaa_via_profile_banner_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get banner by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-via/{name}/banner"

        return await self.get(url)

    async def aaa_vpn_create_aaa_vpn_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create aaa-vpn by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of VPN auth profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of VPN auth profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-vpn"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def aaa_vpn_read_aaa_vpn_v1(
        self,
    ) -> Response:
        """Get aaa-vpn.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aaa-vpn"

        return await self.get(url)

    async def aaa_vpn_create_aaa_vpn_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-vpn/{name}"

        return await self.post(url)

    async def aaa_vpn_read_aaa_vpn_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-vpn/{name}"

        return await self.get(url)

    async def aaa_vpn_delete_aaa_vpn_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aaa-vpn/{name}"

        return await self.delete(url)

    async def airgroup_create_airgroup_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        service: list = None,
    ) -> Response:
        """Create airgroup by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for Airgroup Configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            service (list, optional): Airgroup service profile configurations.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/airgroup"

        json_data = {
            'service': service
        }

        return await self.post(url, json_data=json_data)

    async def airgroup_read_airgroup_v1(
        self,
    ) -> Response:
        """Get airgroup.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/airgroup"

        return await self.get(url)

    async def airgroup_create_airgroup_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/airgroup/{name}"

        return await self.post(url)

    async def airgroup_read_airgroup_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/airgroup/{name}"

        return await self.get(url)

    async def airgroup_delete_airgroup_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/airgroup/{name}"

        return await self.delete(url)

    async def airgroup_create_airgroup_profile_services_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create services by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/airgroup/{name}/services"

        return await self.post(url)

    async def airgroup_read_airgroup_profile_services_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get services by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/airgroup/{name}/services"

        return await self.get(url)

    async def airgroup_create_airgroup_profile_services_service_by_id_v1(
        self,
        name: str = None,
        service_name: str = None,
    ) -> Response:
        """Create service by ID.

        Args:
            name (str, optional): name
            service_name (str, optional): service_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/airgroup/{name}/services/service/{service_name}"

        return await self.post(url)

    async def airgroup_read_airgroup_profile_services_service_by_id_v1(
        self,
        name: str = None,
        service_name: str = None,
    ) -> Response:
        """Get service by ID.

        Args:
            name (str, optional): name
            service_name (str, optional): service_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/airgroup/{name}/services/service/{service_name}"

        return await self.get(url)

    async def airgroup_delete_airgroup_profile_services_service_by_id_v1(
        self,
        name: str = None,
        service_name: str = None,
    ) -> Response:
        """Delete service by ID.

        Args:
            name (str, optional): name
            service_name (str, optional): service_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/airgroup/{name}/services/service/{service_name}"

        return await self.delete(url)

    async def airmatch_create_airmatch_config_by_id_v1(
        self,
        enable: bool,
        deploy_hour: int,
        deploy_window: int,
        quality_threshold_2__ghz: int,
        quality_threshold_5__ghz: int,
        quality_threshold_6__ghz: int,
    ) -> Response:
        """Create airmatch-config by ID.

        Args:
            enable (bool): Enables Airmatch feature
            deploy_hour (int): Specifies the deployment hour for Airmatch solution.
            deploy_window (int): Specifies the allowed deployment window after the deployment hour
                for Airmatch solution.
            quality_threshold_2__ghz (int): Specifies the quality threshold in percentage for 2.4GHz
                network
            quality_threshold_5__ghz (int): Specifies the quality threshold in percentage for 5GHz
                network
            quality_threshold_6__ghz (int): Specifies the quality threshold in percentage for 6GHz
                network

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/airmatch-config"

        json_data = {
            'enable': enable,
            'deploy_hour': deploy_hour,
            'deploy_window': deploy_window,
            'quality_threshold_2__ghz': quality_threshold_2__ghz,
            'quality_threshold_5__ghz': quality_threshold_5__ghz,
            'quality_threshold_6__ghz': quality_threshold_6__ghz
        }

        return await self.post(url, json_data=json_data)

    async def airmatch_read_airmatch_config_v1(
        self,
    ) -> Response:
        """Get airmatch-config.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/airmatch-config"

        return await self.get(url)

    async def airmatch_create_airmatch_config_deploy_time_by_id_v1(
        self,
        deploy_hour: int,
        deploy_window: int,
    ) -> Response:
        """Create deploy-time by ID.

        Args:
            deploy_hour (int): Specifies the deployment hour for Airmatch solution.
            deploy_window (int): Specifies the allowed deployment window after the deployment hour
                for Airmatch solution.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/airmatch-config/deploy-time"

        json_data = {
            'deploy_hour': deploy_hour,
            'deploy_window': deploy_window
        }

        return await self.post(url, json_data=json_data)

    async def airmatch_read_airmatch_config_deploy_time_v1(
        self,
    ) -> Response:
        """Get deploy-time.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/airmatch-config/deploy-time"

        return await self.get(url)

    async def airmatch_create_airmatch_config_quality_threshold_by_id_v1(
        self,
        quality_threshold_2__ghz: int,
        quality_threshold_5__ghz: int,
        quality_threshold_6__ghz: int,
    ) -> Response:
        """Create quality-threshold by ID.

        Args:
            quality_threshold_2__ghz (int): Specifies the quality threshold in percentage for 2.4GHz
                network
            quality_threshold_5__ghz (int): Specifies the quality threshold in percentage for 5GHz
                network
            quality_threshold_6__ghz (int): Specifies the quality threshold in percentage for 6GHz
                network

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/airmatch-config/quality-threshold"

        json_data = {
            'quality_threshold_2__ghz': quality_threshold_2__ghz,
            'quality_threshold_5__ghz': quality_threshold_5__ghz,
            'quality_threshold_6__ghz': quality_threshold_6__ghz
        }

        return await self.post(url, json_data=json_data)

    async def airmatch_read_airmatch_config_quality_threshold_v1(
        self,
    ) -> Response:
        """Get quality-threshold.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/airmatch-config/quality-threshold"

        return await self.get(url)

    async def alert_configuration_create_alert_configs_by_id_v1(
        self,
        type_id: str,
        label: List[str],
        rule_source: str,
        name: str,
        summary: str,
        description: str,
        enabled: bool,
        rules: list,
    ) -> Response:
        """Create alert-configs by ID.

        Args:
            type_id (str): Alert template identifier Eg: '1250', '4', '17'
            label (List[str]): label
            rule_source (str): Where does the rules come from ? System or User  Valid Values:
                SYSTEM, USER
            name (str): Derived from alert type name for canned alerts.                         For
                custom alert, user can provide a name.
            summary (str): For custom alert, user can provide a summary.
            description (str): For custom alert, user can provide a description.
            enabled (bool): Enable/Disable alert configuration. Required field.
            rules (list): rules defined by user for ths alert. Used by detection logic

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/alert-configs"

        json_data = {
            'type_id': type_id,
            'label': label,
            'rule_source': rule_source,
            'name': name,
            'summary': summary,
            'description': description,
            'enabled': enabled,
            'rules': rules
        }

        return await self.post(url, json_data=json_data)

    async def alert_configuration_read_alert_configs_v1(
        self,
    ) -> Response:
        """Get alert-configs.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/alert-configs"

        return await self.get(url)

    async def alert_configuration_create_alert_configs_alert_config_by_id_v1(
        self,
        type_id: str = None,
    ) -> Response:
        """Create alert-config by ID.

        Args:
            type_id (str, optional): typeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-configs/{type_id}"

        return await self.post(url)

    async def alert_configuration_read_alert_configs_alert_config_by_id_v1(
        self,
        type_id: str = None,
    ) -> Response:
        """Get alert-config by ID.

        Args:
            type_id (str, optional): typeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-configs/{type_id}"

        return await self.get(url)

    async def alert_configuration_delete_alert_configs_alert_config_by_id_v1(
        self,
        type_id: str = None,
    ) -> Response:
        """Delete alert-config by ID.

        Args:
            type_id (str, optional): typeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-configs/{type_id}"

        return await self.delete(url)

    async def alert_configuration_create_alert_configs_alert_config_label_by_id_v1(
        self,
        type_id: str = None,
    ) -> Response:
        """Create label by ID.

        Args:
            type_id (str, optional): typeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-configs/{type_id}/label"

        return await self.post(url)

    async def alert_configuration_read_alert_configs_alert_config_label_by_id_v1(
        self,
        type_id: str = None,
    ) -> Response:
        """Get label by ID.

        Args:
            type_id (str, optional): typeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-configs/{type_id}/label"

        return await self.get(url)

    async def alert_configuration_delete_alert_configs_alert_config_label_by_id_v1(
        self,
        type_id: str = None,
    ) -> Response:
        """Delete label by ID.

        Args:
            type_id (str, optional): typeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-configs/{type_id}/label"

        return await self.delete(url)

    async def alert_configuration_create_alert_configs_alert_config_rules_by_id_v1(
        self,
        type_id: str = None,
        rule_number: str = None,
    ) -> Response:
        """Create rules by ID.

        Args:
            type_id (str, optional): typeId
            rule_number (str, optional): ruleNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-configs/{type_id}/rules/{rule_number}"

        return await self.post(url)

    async def alert_configuration_read_alert_configs_alert_config_rules_by_id_v1(
        self,
        type_id: str = None,
        rule_number: str = None,
    ) -> Response:
        """Get rules by ID.

        Args:
            type_id (str, optional): typeId
            rule_number (str, optional): ruleNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-configs/{type_id}/rules/{rule_number}"

        return await self.get(url)

    async def alert_configuration_delete_alert_configs_alert_config_rules_by_id_v1(
        self,
        type_id: str = None,
        rule_number: str = None,
    ) -> Response:
        """Delete rules by ID.

        Args:
            type_id (str, optional): typeId
            rule_number (str, optional): ruleNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-configs/{type_id}/rules/{rule_number}"

        return await self.delete(url)

    async def alert_configuration_create_alert_configs_alert_config_rules_rule_by_id_v1(
        self,
        type_id: str = None,
        rule_number: str = None,
    ) -> Response:
        """Create rule by ID.

        Args:
            type_id (str, optional): typeId
            rule_number (str, optional): ruleNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-configs/{type_id}/rules/{rule_number}/rule"

        return await self.post(url)

    async def alert_configuration_read_alert_configs_alert_config_rules_rule_by_id_v1(
        self,
        type_id: str = None,
        rule_number: str = None,
    ) -> Response:
        """Get rule by ID.

        Args:
            type_id (str, optional): typeId
            rule_number (str, optional): ruleNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-configs/{type_id}/rules/{rule_number}/rule"

        return await self.get(url)

    async def alert_kpi_create_alert_kpis_by_id_v1(
        self,
        min: int = None,
        max: int = None,
        step: int = 1,
    ) -> Response:
        """Create alert-kpis by ID.

        Args:
            min (int, optional): min value
            max (int, optional): max value
            step (int, optional): how much to increase in each step

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/alert-kpis"

        json_data = {
            'min': min,
            'max': max,
            'step': step
        }

        return await self.post(url, json_data=json_data)

    async def alert_kpi_read_alert_kpis_v1(
        self,
    ) -> Response:
        """Get alert-kpis.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/alert-kpis"

        return await self.get(url)

    async def alert_kpi_create_alert_kpis_alert_kpi_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create alert-kpi by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-kpis/{name}"

        return await self.post(url)

    async def alert_kpi_read_alert_kpis_alert_kpi_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get alert-kpi by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-kpis/{name}"

        return await self.get(url)

    async def alert_kpi_delete_alert_kpis_alert_kpi_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete alert-kpi by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-kpis/{name}"

        return await self.delete(url)

    async def alert_kpi_create_alert_kpis_alert_kpi_possible_operators_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create possible-operators by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-kpis/{name}/possible-operators"

        return await self.post(url)

    async def alert_kpi_read_alert_kpis_alert_kpi_possible_operators_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get possible-operators by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-kpis/{name}/possible-operators"

        return await self.get(url)

    async def alert_kpi_delete_alert_kpis_alert_kpi_possible_operators_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete possible-operators by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-kpis/{name}/possible-operators"

        return await self.delete(url)

    async def alert_kpi_create_alert_kpis_alert_kpi_num_value_validation_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create num-value-validation by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-kpis/{name}/num-value-validation"

        return await self.post(url)

    async def alert_kpi_read_alert_kpis_alert_kpi_num_value_validation_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get num-value-validation by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-kpis/{name}/num-value-validation"

        return await self.get(url)

    async def alert_kpi_create_alert_kpis_alert_kpi_duration_validation_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create duration-validation by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-kpis/{name}/duration-validation"

        return await self.post(url)

    async def alert_kpi_read_alert_kpis_alert_kpi_duration_validation_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get duration-validation by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-kpis/{name}/duration-validation"

        return await self.get(url)

    async def alert_label_create_alert_labels_by_id_v1(
        self,
        name: str,
    ) -> Response:
        """Create alert-labels by ID.

        Args:
            name (str): Name of label

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/alert-labels"

        json_data = {
            'name': name
        }

        return await self.post(url, json_data=json_data)

    async def alert_label_read_alert_labels_v1(
        self,
    ) -> Response:
        """Get alert-labels.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/alert-labels"

        return await self.get(url)

    async def alert_label_create_alert_labels_alert_label_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create alert-label by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-labels/{name}"

        return await self.post(url)

    async def alert_label_read_alert_labels_alert_label_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get alert-label by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-labels/{name}"

        return await self.get(url)

    async def alert_label_delete_alert_labels_alert_label_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete alert-label by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-labels/{name}"

        return await self.delete(url)

    async def alert_template_create_alert_templates_by_id_v1(
        self,
        type_id: str,
        name: str,
        display_name: str,
        category: str,
        summary: str,
        description: str,
        metric: str,
        allow_multiple_severity: bool,
        multiple_rules_allowed: bool,
        enabled_for_msp: bool,
        meta: str,
    ) -> Response:
        """Create alert-templates by ID.

        Args:
            type_id (str): alert type id
            name (str): alert name
            display_name (str): alert display name
            category (str): alert category
            summary (str): alert summary
            description (str): description of the alert
            metric (str): metric name
            allow_multiple_severity (bool): Is multiple severity allowed for a alert?
            multiple_rules_allowed (bool): Is multiple rules allowed for a alert?
            enabled_for_msp (bool): Is the alert enabled for MSP?
            meta (str): Additional meta data that may be stored                         as json/yaml
                dump until we find proper element to fit it in

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/alert-templates"

        json_data = {
            'type_id': type_id,
            'name': name,
            'display_name': display_name,
            'category': category,
            'summary': summary,
            'description': description,
            'metric': metric,
            'allow_multiple_severity': allow_multiple_severity,
            'multiple_rules_allowed': multiple_rules_allowed,
            'enabled_for_msp': enabled_for_msp,
            'meta': meta
        }

        return await self.post(url, json_data=json_data)

    async def alert_template_read_alert_templates_v1(
        self,
    ) -> Response:
        """Get alert-templates.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/alert-templates"

        return await self.get(url)

    async def alert_template_create_alert_templates_alert_template_by_id_v1(
        self,
        type_id: str = None,
    ) -> Response:
        """Create alert-template by ID.

        Args:
            type_id (str, optional): typeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-templates/{type_id}"

        return await self.post(url)

    async def alert_template_read_alert_templates_alert_template_by_id_v1(
        self,
        type_id: str = None,
    ) -> Response:
        """Get alert-template by ID.

        Args:
            type_id (str, optional): typeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-templates/{type_id}"

        return await self.get(url)

    async def alert_template_delete_alert_templates_alert_template_by_id_v1(
        self,
        type_id: str = None,
    ) -> Response:
        """Delete alert-template by ID.

        Args:
            type_id (str, optional): typeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alert-templates/{type_id}"

        return await self.delete(url)

    async def alg_create_alg_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        sccp: bool = None,
        sip: bool = None,
        ua: bool = None,
        vocera: bool = None,
    ) -> Response:
        """Create alg by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for ALG parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): ALG profile name.
            description (str): ALG profile description.
            sccp (bool): Click the toggle switch to SCCP protocol on AP.
                This option is disabled by default. This means SCCP is enabled on AP by default
            sip (bool): Click the toggle switch to SIP protocol on AP.                         This
                option is disabled by default. This means SIP is enabled on AP by default
            ua (bool): Click the toggle switch to UA protocol on AP.                        This
                option is disabled by default. This means UA is enabled on AP by default
            vocera (bool): Click the toggle switch to Vocera protocol on AP.
                This option is disabled by default. This means Vocera is enabled on AP by default

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/alg"

        json_data = {
            'name': name,
            'description': description,
            'sccp': sccp,
            'sip': sip,
            'ua': ua,
            'vocera': vocera
        }

        return await self.post(url, json_data=json_data)

    async def alg_read_alg_v1(
        self,
    ) -> Response:
        """Get alg.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/alg"

        return await self.get(url)

    async def alg_create_alg_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alg/{name}"

        return await self.post(url)

    async def alg_read_alg_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alg/{name}"

        return await self.get(url)

    async def alg_delete_alg_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alg/{name}"

        return await self.delete(url)

    async def alias_override_scope_hier_info_read_override_hier_by_id_v1(
        self,
        alias_name: str = None,
    ) -> Response:
        """Get override-hier by ID.

        Args:
            alias_name (str, optional): aliasName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/{alias_name}"

        return await self.get(url)

    async def alias_override_scope_hier_info_read_override_hier_scope_hier_summary_by_id_v1(
        self,
        alias_name: str = None,
    ) -> Response:
        """Get scope-hier-summary by ID.

        Args:
            alias_name (str, optional): aliasName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/{alias_name}/scope-hier-summary"

        return await self.get(url)

    async def alias_override_scope_hier_info_read_override_hier_scope_hier_summary_scope_hier_by_id_v1(
        self,
        alias_name: str = None,
        scopeid: str = None,
    ) -> Response:
        """Get scope-hier by ID.

        Args:
            alias_name (str, optional): aliasName
            scopeid (str, optional): scopeid

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/{alias_name}/scope-hier-summary/scope-hier/{scopeid}"

        return await self.get(url)

    async def alias_override_scope_hier_info_read_override_hier_scope_hier_summary_scope_hier_child_overrides_by_id_v1(
        self,
        alias_name: str = None,
        scopeid: str = None,
        child_scop_etype: str = None,
    ) -> Response:
        """Get child-overrides by ID.

        Args:
            alias_name (str, optional): aliasName
            scopeid (str, optional): scopeid
            child_scop_etype (str, optional): childScopeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/{alias_name}/scope-hier-summary/scope-hier/{scopeid}/child-overrides/{child_scop_etype}"

        return await self.get(url)

    async def alias_override_summary_read_alias_override_summary_v1(
        self,
    ) -> Response:
        """Get alias-override-summary.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/alias-override-summary"

        return await self.get(url)

    async def alias_override_summary_read_alias_override_summary_override_summary_by_id_v1(
        self,
        override_alia_sname: str = None,
    ) -> Response:
        """Get override-summary by ID.

        Args:
            override_alia_sname (str, optional): overrideAliasName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alias-override-summary/{override_alia_sname}"

        return await self.get(url)

    async def alias_override_summary_read_alias_override_summary_override_summary_override_scopes_by_id_v1(
        self,
        override_alia_sname: str = None,
    ) -> Response:
        """Get override-scopes by ID.

        Args:
            override_alia_sname (str, optional): overrideAliasName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alias-override-summary/{override_alia_sname}/override-scopes"

        return await self.get(url)

    async def alias_override_summary_read_alias_override_summary_override_summary_override_scopes_overrides_by_id_v1(
        self,
        override_alia_sname: str = None,
        override_scop_etype: str = None,
    ) -> Response:
        """Get overrides by ID.

        Args:
            override_alia_sname (str, optional): overrideAliasName
            override_scop_etype (str, optional): overrideScopeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/alias-override-summary/{override_alia_sname}/override-scopes/overrides/{override_scop_etype}"

        return await self.get(url)

    async def alias_create_aliases_by_id_v1(
        self,
        host_ipv4_address: str = None,
        host_ipv6_address: str = None,
    ) -> Response:
        """Create aliases by ID.

        Args:
            host_ipv4_address (str, optional): Host IPv4 address.
            host_ipv6_address (str, optional): Host IPv6 address.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aliases"

        json_data = {
            'host_ipv4_address': host_ipv4_address,
            'host_ipv6_address': host_ipv6_address
        }

        return await self.post(url, json_data=json_data)

    async def alias_read_aliases_v1(
        self,
    ) -> Response:
        """Get aliases.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aliases"

        return await self.get(url)

    async def alias_create_aliases_alias_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create alias by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}"

        return await self.post(url)

    async def alias_read_aliases_alias_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get alias by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}"

        return await self.get(url)

    async def alias_delete_aliases_alias_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete alias by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}"

        return await self.delete(url)

    async def alias_create_aliases_alias_default_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create default-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value"

        return await self.post(url)

    async def alias_read_aliases_alias_default_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get default-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value"

        return await self.get(url)

    async def alias_create_aliases_alias_default_value_host_address_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create host-address-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/host-address-value"

        return await self.post(url)

    async def alias_read_aliases_alias_default_value_host_address_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get host-address-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/host-address-value"

        return await self.get(url)

    async def alias_create_aliases_alias_default_value_network_address_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create network-address-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/network-address-value"

        return await self.post(url)

    async def alias_read_aliases_alias_default_value_network_address_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get network-address-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/network-address-value"

        return await self.get(url)

    async def alias_create_aliases_alias_default_value_vlan_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create vlan-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/vlan-value"

        return await self.post(url)

    async def alias_read_aliases_alias_default_value_vlan_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get vlan-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/vlan-value"

        return await self.get(url)

    async def alias_create_aliases_alias_default_value_essid_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create essid-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/essid-value"

        return await self.post(url)

    async def alias_read_aliases_alias_default_value_essid_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get essid-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/essid-value"

        return await self.get(url)

    async def ap_port_profile_create_aliases_by_id_v1(
        self,
        host_ipv4_address: str = None,
        host_ipv6_address: str = None,
    ) -> Response:
        """Create aliases by ID.

        Args:
            host_ipv4_address (str, optional): Host IPv4 address.
            host_ipv6_address (str, optional): Host IPv6 address.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aliases"

        json_data = {
            'host_ipv4_address': host_ipv4_address,
            'host_ipv6_address': host_ipv6_address
        }

        return await self.post(url, json_data=json_data)

    async def ap_port_profile_read_aliases_v1(
        self,
    ) -> Response:
        """Get aliases.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aliases"

        return await self.get(url)

    async def ap_port_profile_create_aliases_alias_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create alias by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}"

        return await self.post(url)

    async def ap_port_profile_read_aliases_alias_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get alias by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}"

        return await self.get(url)

    async def ap_port_profile_delete_aliases_alias_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete alias by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}"

        return await self.delete(url)

    async def ap_port_profile_create_aliases_alias_default_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create default-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value"

        return await self.post(url)

    async def ap_port_profile_read_aliases_alias_default_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get default-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value"

        return await self.get(url)

    async def ap_port_profile_create_aliases_alias_default_value_host_address_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create host-address-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/host-address-value"

        return await self.post(url)

    async def ap_port_profile_read_aliases_alias_default_value_host_address_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get host-address-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/host-address-value"

        return await self.get(url)

    async def ap_port_profile_create_aliases_alias_default_value_network_address_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create network-address-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/network-address-value"

        return await self.post(url)

    async def ap_port_profile_read_aliases_alias_default_value_network_address_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get network-address-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/network-address-value"

        return await self.get(url)

    async def ap_port_profile_create_aliases_alias_default_value_vlan_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create vlan-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/vlan-value"

        return await self.post(url)

    async def ap_port_profile_read_aliases_alias_default_value_vlan_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get vlan-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/vlan-value"

        return await self.get(url)

    async def ap_port_profile_create_aliases_alias_default_value_essid_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create essid-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/essid-value"

        return await self.post(url)

    async def ap_port_profile_read_aliases_alias_default_value_essid_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get essid-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/essid-value"

        return await self.get(url)

    async def app_bandwidth_contract_create_aliases_by_id_v1(
        self,
        host_ipv4_address: str = None,
        host_ipv6_address: str = None,
    ) -> Response:
        """Create aliases by ID.

        Args:
            host_ipv4_address (str, optional): Host IPv4 address.
            host_ipv6_address (str, optional): Host IPv6 address.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aliases"

        json_data = {
            'host_ipv4_address': host_ipv4_address,
            'host_ipv6_address': host_ipv6_address
        }

        return await self.post(url, json_data=json_data)

    async def app_bandwidth_contract_read_aliases_v1(
        self,
    ) -> Response:
        """Get aliases.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aliases"

        return await self.get(url)

    async def app_bandwidth_contract_create_aliases_alias_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create alias by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}"

        return await self.post(url)

    async def app_bandwidth_contract_read_aliases_alias_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get alias by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}"

        return await self.get(url)

    async def app_bandwidth_contract_delete_aliases_alias_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete alias by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}"

        return await self.delete(url)

    async def app_bandwidth_contract_create_aliases_alias_default_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create default-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value"

        return await self.post(url)

    async def app_bandwidth_contract_read_aliases_alias_default_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get default-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value"

        return await self.get(url)

    async def app_bandwidth_contract_create_aliases_alias_default_value_host_address_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create host-address-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/host-address-value"

        return await self.post(url)

    async def app_bandwidth_contract_read_aliases_alias_default_value_host_address_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get host-address-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/host-address-value"

        return await self.get(url)

    async def app_bandwidth_contract_create_aliases_alias_default_value_network_address_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create network-address-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/network-address-value"

        return await self.post(url)

    async def app_bandwidth_contract_read_aliases_alias_default_value_network_address_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get network-address-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/network-address-value"

        return await self.get(url)

    async def app_bandwidth_contract_create_aliases_alias_default_value_vlan_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create vlan-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/vlan-value"

        return await self.post(url)

    async def app_bandwidth_contract_read_aliases_alias_default_value_vlan_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get vlan-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/vlan-value"

        return await self.get(url)

    async def app_bandwidth_contract_create_aliases_alias_default_value_essid_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create essid-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/essid-value"

        return await self.post(url)

    async def app_bandwidth_contract_read_aliases_alias_default_value_essid_value_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get essid-value by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aliases/{name}/default-value/essid-value"

        return await self.get(url)

    async def arp_create_arp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        aging_time: int = 300,
        enable: bool = False,
        exclude_mac: List[str] = None,
        remediation_mode: str = 'MONITOR',
        threshold: int = 30,
    ) -> Response:
        """Create arp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): ARP profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            aging_time (int, optional): Deny-listed client age time in seconds.
            enable (bool, optional): Enable source MAC based ARP attack detection.
            exclude_mac (List[str], optional): exclude-mac
            remediation_mode (str, optional): Remediation mode.  Valid Values: MONITOR, FILTER
            threshold (int, optional): Number of ARP packets allowed per client within 5 mins.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/arp"

        json_data = {
            'aging_time': aging_time,
            'enable': enable,
            'exclude_mac': exclude_mac,
            'remediation_mode': remediation_mode,
            'threshold': threshold
        }

        return await self.post(url, json_data=json_data)

    async def arp_read_arp_v1(
        self,
    ) -> Response:
        """Get arp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/arp"

        return await self.get(url)

    async def arp_create_arp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/arp/{name}"

        return await self.post(url)

    async def arp_read_arp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/arp/{name}"

        return await self.get(url)

    async def arp_delete_arp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/arp/{name}"

        return await self.delete(url)

    async def arp_create_arp_profile_addresses_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create addresses by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/arp/{name}/addresses"

        return await self.post(url)

    async def arp_read_arp_profile_addresses_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get addresses by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/arp/{name}/addresses"

        return await self.get(url)

    async def arp_delete_arp_profile_addresses_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete addresses by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/arp/{name}/addresses"

        return await self.delete(url)

    async def arp_create_arp_profile_throttle_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create throttle by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/arp/{name}/throttle"

        return await self.post(url)

    async def arp_read_arp_profile_throttle_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get throttle by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/arp/{name}/throttle"

        return await self.get(url)

    async def arp_create_arp_profile_throttle_exclude_mac_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create exclude-mac by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/arp/{name}/throttle/exclude-mac"

        return await self.post(url)

    async def arp_read_arp_profile_throttle_exclude_mac_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get exclude-mac by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/arp/{name}/throttle/exclude-mac"

        return await self.get(url)

    async def arp_delete_arp_profile_throttle_exclude_mac_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete exclude-mac by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/arp/{name}/throttle/exclude-mac"

        return await self.delete(url)

    async def auth_server_global_create_auth_server_global_config_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        framed_ip_address: bool = False,
        tunnel_private_group_id: str = None,
    ) -> Response:
        """Create auth-server-global-config by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Authentication Server Global Profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            framed_ip_address (bool, optional): Include framed-ip-address in RADIUS access-request
            tunnel_private_group_id (str, optional): Include VLAN identifier in radius access-
                request  Valid Values: STATIC, DYNAMIC

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/auth-server-global-config"

        json_data = {
            'framed_ip_address': framed_ip_address,
            'tunnel_private_group_id': tunnel_private_group_id
        }

        return await self.post(url, json_data=json_data)

    async def auth_server_global_read_auth_server_global_config_v1(
        self,
    ) -> Response:
        """Get auth-server-global-config.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/auth-server-global-config"

        return await self.get(url)

    async def auth_server_global_create_auth_server_global_config_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-server-global-config/{name}"

        return await self.post(url)

    async def auth_server_global_read_auth_server_global_config_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-server-global-config/{name}"

        return await self.get(url)

    async def auth_server_global_delete_auth_server_global_config_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-server-global-config/{name}"

        return await self.delete(url)

    async def auth_server_global_create_auth_server_global_config_profile_access_request_include_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create access-request-include by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-server-global-config/{name}/access-request-include"

        return await self.post(url)

    async def auth_server_global_read_auth_server_global_config_profile_access_request_include_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get access-request-include by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-server-global-config/{name}/access-request-include"

        return await self.get(url)

    async def auth_server_group_create_server_groups_by_id_v1(
        self,
        server_group: list,
    ) -> Response:
        """Create server-groups by ID.

        Args:
            server_group (list): List of Server Groups.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/server_groups"

        json_data = {
            'server_group': server_group
        }

        return await self.post(url, json_data=json_data)

    async def auth_server_group_read_server_groups_v1(
        self,
    ) -> Response:
        """Get server-groups.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/server-groups"

        return await self.get(url)

    async def auth_server_group_create_server_groups_server_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create server-group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}"

        return await self.post(url)

    async def auth_server_group_read_server_groups_server_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get server-group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}"

        return await self.get(url)

    async def auth_server_group_delete_server_groups_server_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete server-group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}"

        return await self.delete(url)

    async def auth_server_group_create_server_groups_server_group_assignment_rules_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create assignment-rules by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/assignment-rules"

        return await self.post(url)

    async def auth_server_group_read_server_groups_server_group_assignment_rules_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get assignment-rules by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/assignment-rules"

        return await self.get(url)

    async def auth_server_group_create_server_groups_server_group_assignment_rules_assignment_rule_by_id_v1(
        self,
        name: str = None,
        sequence_id: str = None,
    ) -> Response:
        """Create assignment-rule by ID.

        Args:
            name (str, optional): name
            sequence_id (str, optional): sequenceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/assignment-rules/assignment-rule/{sequence_id}"

        return await self.post(url)

    async def auth_server_group_read_server_groups_server_group_assignment_rules_assignment_rule_by_id_v1(
        self,
        name: str = None,
        sequence_id: str = None,
    ) -> Response:
        """Get assignment-rule by ID.

        Args:
            name (str, optional): name
            sequence_id (str, optional): sequenceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/assignment-rules/assignment-rule/{sequence_id}"

        return await self.get(url)

    async def auth_server_group_delete_server_groups_server_group_assignment_rules_assignment_rule_by_id_v1(
        self,
        name: str = None,
        sequence_id: str = None,
    ) -> Response:
        """Delete assignment-rule by ID.

        Args:
            name (str, optional): name
            sequence_id (str, optional): sequenceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/assignment-rules/assignment-rule/{sequence_id}"

        return await self.delete(url)

    async def auth_server_group_create_server_groups_server_group_servers_by_id_v1(
        self,
        name: str = None,
        servers_name: str = None,
    ) -> Response:
        """Create servers by ID.

        Args:
            name (str, optional): name
            servers_name (str, optional): servers_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/servers/{servers_name}"

        return await self.post(url)

    async def auth_server_group_read_server_groups_server_group_servers_by_id_v1(
        self,
        name: str = None,
        servers_name: str = None,
    ) -> Response:
        """Get servers by ID.

        Args:
            name (str, optional): name
            servers_name (str, optional): servers_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/servers/{servers_name}"

        return await self.get(url)

    async def auth_server_group_delete_server_groups_server_group_servers_by_id_v1(
        self,
        name: str = None,
        servers_name: str = None,
    ) -> Response:
        """Delete servers by ID.

        Args:
            name (str, optional): name
            servers_name (str, optional): servers_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/servers/{servers_name}"

        return await self.delete(url)

    async def auth_server_group_create_server_groups_server_group_tunnel_private_group_id_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create tunnel-private-group-id by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/tunnel-private-group-id"

        return await self.post(url)

    async def auth_server_group_read_server_groups_server_group_tunnel_private_group_id_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get tunnel-private-group-id by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/tunnel-private-group-id"

        return await self.get(url)

    async def auth_server_group_create_server_groups_server_group_nas_identifier_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create nas-identifier by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/nas-identifier"

        return await self.post(url)

    async def auth_server_group_read_server_groups_server_group_nas_identifier_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get nas-identifier by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/nas-identifier"

        return await self.get(url)

    async def auth_server_group_create_server_groups_server_group_nas_ip_address_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create nas-ip-address by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/nas-ip-address"

        return await self.post(url)

    async def auth_server_group_read_server_groups_server_group_nas_ip_address_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get nas-ip-address by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/nas-ip-address"

        return await self.get(url)

    async def auth_server_group_create_server_groups_server_group_framed_ip_address_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create framed-ip-address by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/framed-ip-address"

        return await self.post(url)

    async def auth_server_group_read_server_groups_server_group_framed_ip_address_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get framed-ip-address by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/framed-ip-address"

        return await self.get(url)

    async def auth_server_group_create_server_groups_server_group_vsa_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create vsa by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/vsa"

        return await self.post(url)

    async def auth_server_group_read_server_groups_server_group_vsa_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get vsa by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/server-groups/{name}/vsa"

        return await self.get(url)

    async def auth_server_create_auth_servers_by_id_v1(
        self,
        auth_server: list,
    ) -> Response:
        """Create auth-servers by ID.

        Args:
            auth_server (list): List of Auth Servers.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/auth_servers"

        json_data = {
            'auth_server': auth_server
        }

        return await self.post(url, json_data=json_data)

    async def auth_server_read_auth_servers_v1(
        self,
    ) -> Response:
        """Get auth-servers.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/auth-servers"

        return await self.get(url)

    async def auth_server_create_auth_servers_auth_server_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create auth-server by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-servers/{name}"

        return await self.post(url)

    async def auth_server_read_auth_servers_auth_server_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get auth-server by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-servers/{name}"

        return await self.get(url)

    async def auth_server_delete_auth_servers_auth_server_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete auth-server by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-servers/{name}"

        return await self.delete(url)

    async def auth_server_create_auth_servers_auth_server_called_station_id_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create called-station-id by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-servers/{name}/called-station-id"

        return await self.post(url)

    async def auth_server_read_auth_servers_auth_server_called_station_id_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get called-station-id by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-servers/{name}/called-station-id"

        return await self.get(url)

    async def auth_server_create_auth_servers_auth_server_ipsec_ah_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ipsec-ah by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-servers/{name}/ipsec-ah"

        return await self.post(url)

    async def auth_server_read_auth_servers_auth_server_ipsec_ah_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ipsec-ah by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-servers/{name}/ipsec-ah"

        return await self.get(url)

    async def auth_server_create_auth_servers_auth_server_ipsec_esp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ipsec-esp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-servers/{name}/ipsec-esp"

        return await self.post(url)

    async def auth_server_read_auth_servers_auth_server_ipsec_esp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ipsec-esp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-servers/{name}/ipsec-esp"

        return await self.get(url)

    async def auth_survivability_create_auth_survivability_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        cache_lifetime: int = None,
        ca_cert: str = None,
        server_cert: str = None,
    ) -> Response:
        """Create auth-survivability by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Auth survivability profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Auth survivability profile name.
            description (str): Auth survivability profile description.
            enable (bool): Enable Auth Survivability.
            cache_lifetime (int): Survival Keys Cache Lifetime.
            ca_cert (str): Client's CA Certificate for Survival Server.
            server_cert (str): Server Certificate for Survival Server.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/auth-survivability"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'cache_lifetime': cache_lifetime,
            'ca_cert': ca_cert,
            'server_cert': server_cert
        }

        return await self.post(url, json_data=json_data)

    async def auth_survivability_read_auth_survivability_v1(
        self,
    ) -> Response:
        """Get auth-survivability.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/auth-survivability"

        return await self.get(url)

    async def auth_survivability_create_auth_survivability_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-survivability/{name}"

        return await self.post(url)

    async def auth_survivability_read_auth_survivability_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-survivability/{name}"

        return await self.get(url)

    async def auth_survivability_delete_auth_survivability_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/auth-survivability/{name}"

        return await self.delete(url)

    async def bfd_create_bfd_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        min_rx_interval: int = 1000,
        min_tx_interval: int = 1000,
        min_echo_rx_interval: int = 0,
        detect_multiplier: int = None,
    ) -> Response:
        """Create bfd by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): L2TP profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            min_rx_interval (int, optional): Minimum receive interval of control packets.
            min_tx_interval (int, optional): Minimum transmit interval of control packets.
            min_echo_rx_interval (int, optional): Echo receive interval in use.
            detect_multiplier (int, optional): Detect-multiplier for control packets.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/bfd"

        json_data = {
            'min_rx_interval': min_rx_interval,
            'min_tx_interval': min_tx_interval,
            'min_echo_rx_interval': min_echo_rx_interval,
            'detect_multiplier': detect_multiplier
        }

        return await self.post(url, json_data=json_data)

    async def bfd_read_bfd_v1(
        self,
    ) -> Response:
        """Get bfd.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/bfd"

        return await self.get(url)

    async def bfd_create_bfd_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}"

        return await self.post(url)

    async def bfd_read_bfd_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}"

        return await self.get(url)

    async def bfd_delete_bfd_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}"

        return await self.delete(url)

    async def bfd_create_bfd_profile_timers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create timers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}/timers"

        return await self.post(url)

    async def bfd_read_bfd_profile_timers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get timers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}/timers"

        return await self.get(url)

    async def bfd_create_bfd_profile_authentication_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create authentication by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}/authentication"

        return await self.post(url)

    async def bfd_read_bfd_profile_authentication_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get authentication by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}/authentication"

        return await self.get(url)

    async def bgp_create_bfd_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        min_rx_interval: int = 1000,
        min_tx_interval: int = 1000,
        min_echo_rx_interval: int = 0,
        detect_multiplier: int = None,
    ) -> Response:
        """Create bfd by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): L2TP profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            min_rx_interval (int, optional): Minimum receive interval of control packets.
            min_tx_interval (int, optional): Minimum transmit interval of control packets.
            min_echo_rx_interval (int, optional): Echo receive interval in use.
            detect_multiplier (int, optional): Detect-multiplier for control packets.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/bfd"

        json_data = {
            'min_rx_interval': min_rx_interval,
            'min_tx_interval': min_tx_interval,
            'min_echo_rx_interval': min_echo_rx_interval,
            'detect_multiplier': detect_multiplier
        }

        return await self.post(url, json_data=json_data)

    async def bgp_read_bfd_v1(
        self,
    ) -> Response:
        """Get bfd.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/bfd"

        return await self.get(url)

    async def bgp_create_bfd_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}"

        return await self.post(url)

    async def bgp_read_bfd_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}"

        return await self.get(url)

    async def bgp_delete_bfd_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}"

        return await self.delete(url)

    async def bgp_create_bfd_profile_timers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create timers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}/timers"

        return await self.post(url)

    async def bgp_read_bfd_profile_timers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get timers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}/timers"

        return await self.get(url)

    async def bgp_create_bfd_profile_authentication_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create authentication by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}/authentication"

        return await self.post(url)

    async def bgp_read_bfd_profile_authentication_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get authentication by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/bfd/{name}/authentication"

        return await self.get(url)

    async def branch_gateway_firmware_create_branch_gateway_firmware_by_id_v1(
        self,
        upgrade_mode: str,
        version: str,
        rollback: str,
        active_partition: str,
        auto_reboot: bool,
    ) -> Response:
        """Create branch-gateway-firmware by ID.

        Args:
            upgrade_mode (str): Live upgrade or regular upgrade  Valid Values: AOS_REGULAR, AOS_LIVE
            version (str): Desired firmware version
            rollback (str): INTERNAL - firmware version to rollback to
            active_partition (str): Partition to upgrade  Valid Values: PRIMARY, SECONDARY
            auto_reboot (bool): Automatically reboot after upgrade or not

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/branch-gateway-firmware"

        json_data = {
            'upgrade_mode': upgrade_mode,
            'version': version,
            'rollback': rollback,
            'active_partition': active_partition,
            'auto_reboot': auto_reboot
        }

        return await self.post(url, json_data=json_data)

    async def branch_gateway_firmware_read_branch_gateway_firmware_v1(
        self,
    ) -> Response:
        """Get branch-gateway-firmware.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/branch-gateway-firmware"

        return await self.get(url)

    async def calea_create_calea_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        ip_address: str = None,
        ip_mtu: int = 1500,
        encapsulation: str = None,
        gre_type: int = None,
    ) -> Response:
        """Create calea by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): CALEA profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            ip_address (str, optional): CALEA server IP address.
            ip_mtu (int, optional): MTU size.
            encapsulation (str, optional): GRE packet encapsulation type.  Valid Values: GRE
            gre_type (int, optional): GRE payload type.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/calea"

        json_data = {
            'ip_address': ip_address,
            'ip_mtu': ip_mtu,
            'encapsulation': encapsulation,
            'gre_type': gre_type
        }

        return await self.post(url, json_data=json_data)

    async def calea_read_calea_v1(
        self,
    ) -> Response:
        """Get calea.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/calea"

        return await self.get(url)

    async def calea_create_calea_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/calea/{name}"

        return await self.post(url)

    async def calea_read_calea_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/calea/{name}"

        return await self.get(url)

    async def calea_delete_calea_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/calea/{name}"

        return await self.delete(url)

    async def calea_create_calea_profile_config_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create config by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/calea/{name}/config"

        return await self.post(url)

    async def calea_read_calea_profile_config_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get config by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/calea/{name}/config"

        return await self.get(url)

    async def campus_ap_firmware_create_campus_ap_firmware_by_id_v1(
        self,
        upgrade_mode: str,
        version: str,
        rollback: str,
    ) -> Response:
        """Create campus-ap-firmware by ID.

        Args:
            upgrade_mode (str): Live upgrade or regular upgrade  Valid Values: AOS_REGULAR, AOS_LIVE
            version (str): Desired firmware version
            rollback (str): INTERNAL - firmware version to rollback to

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/campus-ap-firmware"

        json_data = {
            'upgrade_mode': upgrade_mode,
            'version': version,
            'rollback': rollback
        }

        return await self.post(url, json_data=json_data)

    async def campus_ap_firmware_read_campus_ap_firmware_v1(
        self,
    ) -> Response:
        """Get campus-ap-firmware.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/campus-ap-firmware"

        return await self.get(url)

    async def cda_authz_policy_create_authz_policies_by_id_v1(
        self,
        policy: list,
    ) -> Response:
        """Create authz-policies by ID.

        Args:
            policy (list): List of authorization polices.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/authz-policies"

        json_data = {
            'policy': policy
        }

        return await self.post(url, json_data=json_data)

    async def cda_authz_policy_read_authz_policies_v1(
        self,
    ) -> Response:
        """Get authz-policies.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/authz-policies"

        return await self.get(url)

    async def cda_authz_policy_create_authz_policies_policy_by_id_v1(
        self,
        policy_id: str = None,
    ) -> Response:
        """Create policy by ID.

        Args:
            policy_id (str, optional): policyId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}"

        return await self.post(url)

    async def cda_authz_policy_read_authz_policies_policy_by_id_v1(
        self,
        policy_id: str = None,
    ) -> Response:
        """Get policy by ID.

        Args:
            policy_id (str, optional): policyId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}"

        return await self.get(url)

    async def cda_authz_policy_delete_authz_policies_policy_by_id_v1(
        self,
        policy_id: str = None,
    ) -> Response:
        """Delete policy by ID.

        Args:
            policy_id (str, optional): policyId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}"

        return await self.delete(url)

    async def cda_authz_policy_create_authz_policies_policy_identity_stores_by_id_v1(
        self,
        policy_id: str = None,
    ) -> Response:
        """Create identity-stores by ID.

        Args:
            policy_id (str, optional): policyId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/identity-stores"

        return await self.post(url)

    async def cda_authz_policy_read_authz_policies_policy_identity_stores_by_id_v1(
        self,
        policy_id: str = None,
    ) -> Response:
        """Get identity-stores by ID.

        Args:
            policy_id (str, optional): policyId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/identity-stores"

        return await self.get(url)

    async def cda_authz_policy_delete_authz_policies_policy_identity_stores_by_id_v1(
        self,
        policy_id: str = None,
    ) -> Response:
        """Delete identity-stores by ID.

        Args:
            policy_id (str, optional): policyId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/identity-stores"

        return await self.delete(url)

    async def cda_authz_policy_create_authz_policies_policy_conditions_by_id_v1(
        self,
        policy_id: str = None,
    ) -> Response:
        """Create conditions by ID.

        Args:
            policy_id (str, optional): policyId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/conditions"

        return await self.post(url)

    async def cda_authz_policy_read_authz_policies_policy_conditions_by_id_v1(
        self,
        policy_id: str = None,
    ) -> Response:
        """Get conditions by ID.

        Args:
            policy_id (str, optional): policyId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/conditions"

        return await self.get(url)

    async def cda_authz_policy_create_authz_policies_policy_conditions_condition_by_id_v1(
        self,
        policy_id: str = None,
        condition_id: str = None,
    ) -> Response:
        """Create condition by ID.

        Args:
            policy_id (str, optional): policyId
            condition_id (str, optional): conditionId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/conditions/condition/{condition_id}"

        return await self.post(url)

    async def cda_authz_policy_read_authz_policies_policy_conditions_condition_by_id_v1(
        self,
        policy_id: str = None,
        condition_id: str = None,
    ) -> Response:
        """Get condition by ID.

        Args:
            policy_id (str, optional): policyId
            condition_id (str, optional): conditionId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/conditions/condition/{condition_id}"

        return await self.get(url)

    async def cda_authz_policy_delete_authz_policies_policy_conditions_condition_by_id_v1(
        self,
        policy_id: str = None,
        condition_id: str = None,
    ) -> Response:
        """Delete condition by ID.

        Args:
            policy_id (str, optional): policyId
            condition_id (str, optional): conditionId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/conditions/condition/{condition_id}"

        return await self.delete(url)

    async def cda_authz_policy_create_authz_policies_policy_rule_by_id_v1(
        self,
        policy_id: str = None,
        rule_id: str = None,
    ) -> Response:
        """Create rule by ID.

        Args:
            policy_id (str, optional): policyId
            rule_id (str, optional): ruleId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/rule/{rule_id}"

        return await self.post(url)

    async def cda_authz_policy_read_authz_policies_policy_rule_by_id_v1(
        self,
        policy_id: str = None,
        rule_id: str = None,
    ) -> Response:
        """Get rule by ID.

        Args:
            policy_id (str, optional): policyId
            rule_id (str, optional): ruleId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/rule/{rule_id}"

        return await self.get(url)

    async def cda_authz_policy_delete_authz_policies_policy_rule_by_id_v1(
        self,
        policy_id: str = None,
        rule_id: str = None,
    ) -> Response:
        """Delete rule by ID.

        Args:
            policy_id (str, optional): policyId
            rule_id (str, optional): ruleId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/rule/{rule_id}"

        return await self.delete(url)

    async def cda_authz_policy_create_authz_policies_policy_rule_conditions_by_id_v1(
        self,
        policy_id: str = None,
        rule_id: str = None,
    ) -> Response:
        """Create conditions by ID.

        Args:
            policy_id (str, optional): policyId
            rule_id (str, optional): ruleId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/rule/{rule_id}/conditions"

        return await self.post(url)

    async def cda_authz_policy_read_authz_policies_policy_rule_conditions_by_id_v1(
        self,
        policy_id: str = None,
        rule_id: str = None,
    ) -> Response:
        """Get conditions by ID.

        Args:
            policy_id (str, optional): policyId
            rule_id (str, optional): ruleId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/rule/{rule_id}/conditions"

        return await self.get(url)

    async def cda_authz_policy_create_authz_policies_policy_rule_enf_profile_by_id_v1(
        self,
        policy_id: str = None,
        rule_id: str = None,
        profile_id: str = None,
    ) -> Response:
        """Create enf-profile by ID.

        Args:
            policy_id (str, optional): policyId
            rule_id (str, optional): ruleId
            profile_id (str, optional): profileId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/rule/{rule_id}/enf-profile/{profile_id}"

        return await self.post(url)

    async def cda_authz_policy_read_authz_policies_policy_rule_enf_profile_by_id_v1(
        self,
        policy_id: str = None,
        rule_id: str = None,
        profile_id: str = None,
    ) -> Response:
        """Get enf-profile by ID.

        Args:
            policy_id (str, optional): policyId
            rule_id (str, optional): ruleId
            profile_id (str, optional): profileId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/rule/{rule_id}/enf-profile/{profile_id}"

        return await self.get(url)

    async def cda_authz_policy_delete_authz_policies_policy_rule_enf_profile_by_id_v1(
        self,
        policy_id: str = None,
        rule_id: str = None,
        profile_id: str = None,
    ) -> Response:
        """Delete enf-profile by ID.

        Args:
            policy_id (str, optional): policyId
            rule_id (str, optional): ruleId
            profile_id (str, optional): profileId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/authz-policies/{policy_id}/rule/{rule_id}/enf-profile/{profile_id}"

        return await self.delete(url)

    async def cda_identity_store_create_identity_stores_by_id_v1(
        self,
        store: list,
    ) -> Response:
        """Create identity-stores by ID.

        Args:
            store (list): List of identity stores.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/identity-stores"

        json_data = {
            'store': store
        }

        return await self.post(url, json_data=json_data)

    async def cda_identity_store_read_identity_stores_v1(
        self,
    ) -> Response:
        """Get identity-stores.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/identity-stores"

        return await self.get(url)

    async def cda_identity_store_create_identity_stores_store_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create store by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/identity-stores/{id}"

        return await self.post(url)

    async def cda_identity_store_read_identity_stores_store_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get store by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/identity-stores/{id}"

        return await self.get(url)

    async def cda_identity_store_delete_identity_stores_store_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Delete store by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/identity-stores/{id}"

        return await self.delete(url)

    async def cda_identity_store_create_identity_stores_store_microsoft_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create microsoft by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/identity-stores/{id}/microsoft"

        return await self.post(url)

    async def cda_identity_store_read_identity_stores_store_microsoft_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get microsoft by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/identity-stores/{id}/microsoft"

        return await self.get(url)

    async def cda_identity_store_create_identity_stores_store_google_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create google by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/identity-stores/{id}/google"

        return await self.post(url)

    async def cda_identity_store_read_identity_stores_store_google_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get google by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/identity-stores/{id}/google"

        return await self.get(url)

    async def cda_identity_store_create_identity_stores_store_okta_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create okta by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/identity-stores/{id}/okta"

        return await self.post(url)

    async def cda_identity_store_read_identity_stores_store_okta_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get okta by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/identity-stores/{id}/okta"

        return await self.get(url)

    async def cdp_create_cdp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        mode: str = None,
    ) -> Response:
        """Create cdp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): CDP Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): CDP profile name.
            description (str): CDP profile description.
            enable (bool): Enable CDP.
            mode (str): CDP Mode.  Valid Values: RX_ONLY, PASSTHROUGH, PRE_STANDARD_VOICE

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/cdp"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'mode': mode
        }

        return await self.post(url, json_data=json_data)

    async def cdp_read_cdp_v1(
        self,
    ) -> Response:
        """Get cdp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/cdp"

        return await self.get(url)

    async def cdp_create_cdp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cdp/{name}"

        return await self.post(url)

    async def cdp_read_cdp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cdp/{name}"

        return await self.get(url)

    async def cdp_delete_cdp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cdp/{name}"

        return await self.delete(url)

    async def cellular_create_cellular_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create cellular by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Cellular profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Cellular profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/cellular"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def cellular_read_cellular_v1(
        self,
    ) -> Response:
        """Get cellular.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/cellular"

        return await self.get(url)

    async def cellular_create_cellular_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cellular/{name}"

        return await self.post(url)

    async def cellular_read_cellular_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cellular/{name}"

        return await self.get(url)

    async def cellular_delete_cellular_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cellular/{name}"

        return await self.delete(url)

    async def cellular_create_cellular_profile_modem_apn_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create modem-apn by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cellular/{name}/modem-apn"

        return await self.post(url)

    async def cellular_read_cellular_profile_modem_apn_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get modem-apn by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cellular/{name}/modem-apn"

        return await self.get(url)

    async def cellular_create_cellular_profile_tp_cell_auth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create tp-cell-auth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cellular/{name}/tp-cell-auth"

        return await self.post(url)

    async def cellular_read_cellular_profile_tp_cell_auth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get tp-cell-auth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cellular/{name}/tp-cell-auth"

        return await self.get(url)

    async def cellular_create_cellular_profile_sim_pin_enable_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create sim-pin-enable by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cellular/{name}/sim-pin-enable"

        return await self.post(url)

    async def cellular_read_cellular_profile_sim_pin_enable_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get sim-pin-enable by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cellular/{name}/sim-pin-enable"

        return await self.get(url)

    async def cellular_create_cellular_profile_sim_pin_renew_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create sim-pin-renew by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cellular/{name}/sim-pin-renew"

        return await self.post(url)

    async def cellular_read_cellular_profile_sim_pin_renew_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get sim-pin-renew by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cellular/{name}/sim-pin-renew"

        return await self.get(url)

    async def cellular_create_cellular_profile_sim_pin_puk_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create sim-pin-puk by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cellular/{name}/sim-pin-puk"

        return await self.post(url)

    async def cellular_read_cellular_profile_sim_pin_puk_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get sim-pin-puk by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cellular/{name}/sim-pin-puk"

        return await self.get(url)

    async def certificate_rcp_create_certificate_rcp_by_id_v1(
        self,
        responder_cert: str = None,
        signer_cert: str = None,
        primary_url: str = None,
        secondary_url: str = None,
        delegate: bool = False,
        delegate_url_leaf_cert: str = None,
        delegate_url_intermediate_cert1: str = None,
        delegate_url_intermediate_cert2: str = None,
        delegate_url_intermediate_cert3: str = None,
        disable_nonce: bool = False,
        enforcement_level: str = 'FAIL_OVER',
        vrf: str = None,
        timeout_period: int = 1000,
    ) -> Response:
        """Create certificate-rcp by ID.

        Args:
            responder_cert (str, optional): OCSP Responder Cert to verify OCSP responses.
            signer_cert (str, optional): OCSP Signer Cert to sign the OCSP request/responses.
            primary_url (str, optional): OCSP Primary Server URL.
            secondary_url (str, optional): OCSP Secondary Server URL.
            delegate (bool, optional): Enable Delegate mode for OCSP revocation
            delegate_url_leaf_cert (str, optional): OCSP Responder URL to check the revocation
                status for the leaf certificate
            delegate_url_intermediate_cert1 (str, optional): OCSP Responder URL to check the
                revocation status for the intermedidate certificate 1
            delegate_url_intermediate_cert2 (str, optional): OCSP Responder URL to check the
                revocation status for the intermedidate certificate 2
            delegate_url_intermediate_cert3 (str, optional): OCSP Responder URL to check the
                revocation status for the intermedidate certificate 3
            disable_nonce (bool, optional): Disable inclusion of the nonce in OCSP requests.
            enforcement_level (str, optional): Action to be taken when OCSP Server is unreachable.
                Default: Fail-Over.  Valid Values: REVOKE_CERT, ALLOW_CERT, FAIL_OVER
            vrf (str, optional): OCSP Server VRF.
            timeout_period (int, optional): OCSP Server timeout value.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/certificate-rcp"

        json_data = {
            'responder_cert': responder_cert,
            'signer_cert': signer_cert,
            'primary_url': primary_url,
            'secondary_url': secondary_url,
            'delegate': delegate,
            'delegate_url_leaf_cert': delegate_url_leaf_cert,
            'delegate_url_intermediate_cert1': delegate_url_intermediate_cert1,
            'delegate_url_intermediate_cert2': delegate_url_intermediate_cert2,
            'delegate_url_intermediate_cert3': delegate_url_intermediate_cert3,
            'disable_nonce': disable_nonce,
            'enforcement_level': enforcement_level,
            'vrf': vrf,
            'timeout_period': timeout_period
        }

        return await self.post(url, json_data=json_data)

    async def certificate_rcp_read_certificate_rcp_v1(
        self,
    ) -> Response:
        """Get certificate-rcp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/certificate-rcp"

        return await self.get(url)

    async def certificate_rcp_create_certificate_rcp_ta_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ta-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/certificate-rcp/{name}"

        return await self.post(url)

    async def certificate_rcp_read_certificate_rcp_ta_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ta-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/certificate-rcp/{name}"

        return await self.get(url)

    async def certificate_rcp_delete_certificate_rcp_ta_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete ta-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/certificate-rcp/{name}"

        return await self.delete(url)

    async def certificate_rcp_create_certificate_rcp_ta_profile_ocsp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ocsp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/certificate-rcp/{name}/ocsp"

        return await self.post(url)

    async def certificate_rcp_read_certificate_rcp_ta_profile_ocsp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ocsp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/certificate-rcp/{name}/ocsp"

        return await self.get(url)

    async def certificate_rcp_create_certificate_rcp_ta_profile_crl_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create crl by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/certificate-rcp/{name}/crl"

        return await self.post(url)

    async def certificate_rcp_read_certificate_rcp_ta_profile_crl_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get crl by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/certificate-rcp/{name}/crl"

        return await self.get(url)

    async def certificate_create_certificates_by_id_v1(
        self,
        name: str,
        type: str,
    ) -> Response:
        """Create certificates by ID.

        Args:
            name (str): Certificate name.
            type (str): Certificate type.  Valid Values: SERVER_CERT, CA_CERT, CLIENT_CERT, CRL,
                OCSP_RESPONDER_CERT, OCSP_SIGNER_CERT

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/certificates"

        json_data = {
            'name': name,
            'type': type
        }

        return await self.post(url, json_data=json_data)

    async def certificate_read_certificates_v1(
        self,
    ) -> Response:
        """Get certificates.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/certificates"

        return await self.get(url)

    async def certificate_create_certificates_certificate_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create certificate by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/certificates/{name}"

        return await self.post(url)

    async def certificate_read_certificates_certificate_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get certificate by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/certificates/{name}"

        return await self.get(url)

    async def certificate_delete_certificates_certificate_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete certificate by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/certificates/{name}"

        return await self.delete(url)

    async def client_insight_create_client_insight_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        onboarding_event_log: bool = None,
    ) -> Response:
        """Create client-insight by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Client-insight profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Client-insight profile name
            description (str): Client-insight profile description
            enable (bool): Enable client-insight. Default: Disabled.
            onboarding_event_log (bool): Enable client onboarding event logs. Default: Disabled.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/client-insight"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'onboarding_event_log': onboarding_event_log
        }

        return await self.post(url, json_data=json_data)

    async def client_insight_read_client_insight_v1(
        self,
    ) -> Response:
        """Get client-insight.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/client-insight"

        return await self.get(url)

    async def client_insight_create_client_insight_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/client-insight/{name}"

        return await self.post(url)

    async def client_insight_read_client_insight_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/client-insight/{name}"

        return await self.get(url)

    async def client_insight_delete_client_insight_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/client-insight/{name}"

        return await self.delete(url)

    async def client_iptracker_interface_create_client_iptracker_interface_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create client-iptracker-interface by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of IP tracker interface profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of IP tracker interface profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/client-iptracker-interface"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def client_iptracker_interface_read_client_iptracker_interface_v1(
        self,
    ) -> Response:
        """Get client-iptracker-interface.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/client-iptracker-interface"

        return await self.get(url)

    async def client_iptracker_interface_create_client_iptracker_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/client-iptracker-interface/{name}"

        return await self.post(url)

    async def client_iptracker_interface_read_client_iptracker_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/client-iptracker-interface/{name}"

        return await self.get(url)

    async def client_iptracker_interface_delete_client_iptracker_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/client-iptracker-interface/{name}"

        return await self.delete(url)

    async def client_iptracker_create_client_iptracker_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create client-iptracker by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of IP tracker global profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of IP tracker global profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/client-iptracker"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def client_iptracker_read_client_iptracker_v1(
        self,
    ) -> Response:
        """Get client-iptracker.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/client-iptracker"

        return await self.get(url)

    async def client_iptracker_create_client_iptracker_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/client-iptracker/{name}"

        return await self.post(url)

    async def client_iptracker_read_client_iptracker_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/client-iptracker/{name}"

        return await self.get(url)

    async def client_iptracker_delete_client_iptracker_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/client-iptracker/{name}"

        return await self.delete(url)

    async def config_checkpoint_create_config_checkpoint_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        post_checkpoint: bool = None,
        post_checkpoint_delay: int = None,
    ) -> Response:
        """Create config-checkpoint by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Configuration checkpoint profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Configuration checkpoint profile name.
            description (str): Profile description.
            post_checkpoint (bool): Automatically create a checkpoint after configuration changes.
                Default is enabled.
            post_checkpoint_delay (int): Number of seconds the system will wait after a
                configuration change before creating a post configuration checkpoint.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/config-checkpoint"

        json_data = {
            'name': name,
            'description': description,
            'post_checkpoint': post_checkpoint,
            'post_checkpoint_delay': post_checkpoint_delay
        }

        return await self.post(url, json_data=json_data)

    async def config_checkpoint_read_config_checkpoint_v1(
        self,
    ) -> Response:
        """Get config-checkpoint.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/config-checkpoint"

        return await self.get(url)

    async def config_checkpoint_create_config_checkpoint_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-checkpoint/{name}"

        return await self.post(url)

    async def config_checkpoint_read_config_checkpoint_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-checkpoint/{name}"

        return await self.get(url)

    async def config_checkpoint_delete_config_checkpoint_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-checkpoint/{name}"

        return await self.delete(url)

    async def config_subscription_create_config_subscription_by_id_v1(
        self,
        xpath: str,
        description: str,
        subscribed_services: list,
    ) -> Response:
        """Create config-subscription by ID.

        Args:
            xpath (str): XPath to the YANG configuration parameter.
            description (str): Resource limit description.
            subscribed_services (list): List of subscribed services

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/config-subscription"

        json_data = {
            'xpath': xpath,
            'description': description,
            'subscribed_services': subscribed_services
        }

        return await self.post(url, json_data=json_data)

    async def config_subscription_read_config_subscription_v1(
        self,
    ) -> Response:
        """Get config-subscription.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/config-subscription"

        return await self.get(url)

    async def config_subscription_create_config_subscription_subscription_parameters_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Create subscription-parameters by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-subscription/{xpath}"

        return await self.post(url)

    async def config_subscription_read_config_subscription_subscription_parameters_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Get subscription-parameters by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-subscription/{xpath}"

        return await self.get(url)

    async def config_subscription_delete_config_subscription_subscription_parameters_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Delete subscription-parameters by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-subscription/{xpath}"

        return await self.delete(url)

    async def config_subscription_create_config_subscription_subscription_parameters_subscribed_services_by_id_v1(
        self,
        xpath: str = None,
        consumer_id: str = None,
    ) -> Response:
        """Create subscribed-services by ID.

        Args:
            xpath (str, optional): xpath
            consumer_id (str, optional): consumerId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-subscription/{xpath}/subscribed-services/{consumer_id}"

        return await self.post(url)

    async def config_subscription_read_config_subscription_subscription_parameters_subscribed_services_by_id_v1(
        self,
        xpath: str = None,
        consumer_id: str = None,
    ) -> Response:
        """Get subscribed-services by ID.

        Args:
            xpath (str, optional): xpath
            consumer_id (str, optional): consumerId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-subscription/{xpath}/subscribed-services/{consumer_id}"

        return await self.get(url)

    async def config_subscription_delete_config_subscription_subscription_parameters_subscribed_services_by_id_v1(
        self,
        xpath: str = None,
        consumer_id: str = None,
    ) -> Response:
        """Delete subscribed-services by ID.

        Args:
            xpath (str, optional): xpath
            consumer_id (str, optional): consumerId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-subscription/{xpath}/subscribed-services/{consumer_id}"

        return await self.delete(url)

    async def config_subscription_create_config_subscription_subscription_parameters_subscribed_services_config_distribution_condition_by_id_v1(
        self,
        xpath: str = None,
        consumer_id: str = None,
    ) -> Response:
        """Create config-distribution-condition by ID.

        Args:
            xpath (str, optional): xpath
            consumer_id (str, optional): consumerId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-subscription/{xpath}/subscribed-services/{consumer_id}/config-distribution-condition"

        return await self.post(url)

    async def config_subscription_read_config_subscription_subscription_parameters_subscribed_services_config_distribution_condition_by_id_v1(
        self,
        xpath: str = None,
        consumer_id: str = None,
    ) -> Response:
        """Get config-distribution-condition by ID.

        Args:
            xpath (str, optional): xpath
            consumer_id (str, optional): consumerId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-subscription/{xpath}/subscribed-services/{consumer_id}/config-distribution-condition"

        return await self.get(url)

    async def configuration_summary_create_config_profile_summary_by_id_v1(
        self,
        category: str,
        config_profile: list,
    ) -> Response:
        """Create config-profile-summary by ID.

        Args:
            category (str): The name of the profile category.
            config_profile (list): List of configuration profiles in this category.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/config_profile-summary"

        json_data = {
            'category': category,
            'config_profile': config_profile
        }

        return await self.post(url, json_data=json_data)

    async def configuration_summary_read_config_profile_summary_v1(
        self,
    ) -> Response:
        """Get config-profile-summary.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/config-profile-summary"

        return await self.get(url)

    async def configuration_summary_create_config_profile_summary_configuration_summary_by_id_v1(
        self,
        category: str = None,
    ) -> Response:
        """Create configuration-summary by ID.

        Args:
            category (str, optional): category

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-profile-summary/{category}"

        return await self.post(url)

    async def configuration_summary_read_config_profile_summary_configuration_summary_by_id_v1(
        self,
        category: str = None,
    ) -> Response:
        """Get configuration-summary by ID.

        Args:
            category (str, optional): category

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-profile-summary/{category}"

        return await self.get(url)

    async def configuration_summary_delete_config_profile_summary_configuration_summary_by_id_v1(
        self,
        category: str = None,
    ) -> Response:
        """Delete configuration-summary by ID.

        Args:
            category (str, optional): category

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-profile-summary/{category}"

        return await self.delete(url)

    async def configuration_summary_create_config_profile_summary_configuration_summary_config_profile_by_id_v1(
        self,
        category: str = None,
        profile_name: str = None,
    ) -> Response:
        """Create config-profile by ID.

        Args:
            category (str, optional): category
            profile_name (str, optional): profileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-profile-summary/{category}/config-profile/{profile_name}"

        return await self.post(url)

    async def configuration_summary_read_config_profile_summary_configuration_summary_config_profile_by_id_v1(
        self,
        category: str = None,
        profile_name: str = None,
    ) -> Response:
        """Get config-profile by ID.

        Args:
            category (str, optional): category
            profile_name (str, optional): profileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-profile-summary/{category}/config-profile/{profile_name}"

        return await self.get(url)

    async def configuration_summary_delete_config_profile_summary_configuration_summary_config_profile_by_id_v1(
        self,
        category: str = None,
        profile_name: str = None,
    ) -> Response:
        """Delete config-profile by ID.

        Args:
            category (str, optional): category
            profile_name (str, optional): profileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/config-profile-summary/{category}/config-profile/{profile_name}"

        return await self.delete(url)

    async def container_create_containers_by_id_v1(
        self,
        cpu: int = 10,
        memory: int = 256,
    ) -> Response:
        """Create containers by ID.

        Args:
            cpu (int, optional): Maximum percent of the CPU capacity to be permitted for
                the container.
            memory (int, optional): Maximum amount of DRAM (in MB) to be permitted for the
                container.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/containers"

        json_data = {
            'cpu': cpu,
            'memory': memory
        }

        return await self.post(url, json_data=json_data)

    async def container_read_containers_v1(
        self,
    ) -> Response:
        """Get containers.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/containers"

        return await self.get(url)

    async def container_create_containers_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}"

        return await self.post(url)

    async def container_read_containers_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}"

        return await self.get(url)

    async def container_delete_containers_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}"

        return await self.delete(url)

    async def container_create_containers_instance_vrfs_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create vrfs by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}/vrfs"

        return await self.post(url)

    async def container_read_containers_instance_vrfs_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get vrfs by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}/vrfs"

        return await self.get(url)

    async def container_delete_containers_instance_vrfs_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete vrfs by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}/vrfs"

        return await self.delete(url)

    async def container_create_containers_instance_environment_variables_by_id_v1(
        self,
        name: str = None,
        variable: str = None,
    ) -> Response:
        """Create environment-variables by ID.

        Args:
            name (str, optional): name
            variable (str, optional): variable

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}/environment-variables/{variable}"

        return await self.post(url)

    async def container_read_containers_instance_environment_variables_by_id_v1(
        self,
        name: str = None,
        variable: str = None,
    ) -> Response:
        """Get environment-variables by ID.

        Args:
            name (str, optional): name
            variable (str, optional): variable

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}/environment-variables/{variable}"

        return await self.get(url)

    async def container_delete_containers_instance_environment_variables_by_id_v1(
        self,
        name: str = None,
        variable: str = None,
    ) -> Response:
        """Delete environment-variables by ID.

        Args:
            name (str, optional): name
            variable (str, optional): variable

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}/environment-variables/{variable}"

        return await self.delete(url)

    async def container_create_containers_instance_encrypted_environment_variables_by_id_v1(
        self,
        name: str = None,
        variable: str = None,
    ) -> Response:
        """Create encrypted-environment-variables by ID.

        Args:
            name (str, optional): name
            variable (str, optional): variable

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}/encrypted-environment-variables/{variable}"

        return await self.post(url)

    async def container_read_containers_instance_encrypted_environment_variables_by_id_v1(
        self,
        name: str = None,
        variable: str = None,
    ) -> Response:
        """Get encrypted-environment-variables by ID.

        Args:
            name (str, optional): name
            variable (str, optional): variable

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}/encrypted-environment-variables/{variable}"

        return await self.get(url)

    async def container_delete_containers_instance_encrypted_environment_variables_by_id_v1(
        self,
        name: str = None,
        variable: str = None,
    ) -> Response:
        """Delete encrypted-environment-variables by ID.

        Args:
            name (str, optional): name
            variable (str, optional): variable

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}/encrypted-environment-variables/{variable}"

        return await self.delete(url)

    async def container_create_containers_instance_runtime_constraints_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create runtime-constraints by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}/runtime-constraints"

        return await self.post(url)

    async def container_read_containers_instance_runtime_constraints_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get runtime-constraints by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/containers/{name}/runtime-constraints"

        return await self.get(url)

    async def copp_create_copp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        priority: int = None,
        rate_pps: str = None,
        rate_kbits: int = None,
        burst_pkts: int = None,
        burst_kbytes: int = None,
        drop: bool = False,
    ) -> Response:
        """Create copp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): ...
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            priority (int, optional): Local priority for an entry in the CoPP policy.
            rate_pps (str, optional): Rate limit for an entry in the CoPP policy.
            rate_kbits (int, optional): Rate limit for an entry in the CoPP policy.
            burst_pkts (int, optional): Burst limit for an entry in the CoPP policy.
            burst_kbytes (int, optional): Burst limit for an entry in the CoPP policy.
            drop (bool, optional): Class is dropped in the CoPP policy.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/copp"

        json_data = {
            'priority': priority,
            'rate_pps': rate_pps,
            'rate_kbits': rate_kbits,
            'burst_pkts': burst_pkts,
            'burst_kbytes': burst_kbytes,
            'drop': drop
        }

        return await self.post(url, json_data=json_data)

    async def copp_read_copp_v1(
        self,
    ) -> Response:
        """Get copp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/copp"

        return await self.get(url)

    async def copp_create_copp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/copp/{name}"

        return await self.post(url)

    async def copp_read_copp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/copp/{name}"

        return await self.get(url)

    async def copp_delete_copp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/copp/{name}"

        return await self.delete(url)

    async def copp_create_copp_profile_default_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create default-policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/copp/{name}/default-policy"

        return await self.post(url)

    async def copp_read_copp_profile_default_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get default-policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/copp/{name}/default-policy"

        return await self.get(url)

    async def copp_create_copp_profile_default_policy_configured_copp_policy_entries_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create configured-copp-policy-entries by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/copp/{name}/default-policy/configured-copp-policy-entries"

        return await self.post(url)

    async def copp_read_copp_profile_default_policy_configured_copp_policy_entries_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get configured-copp-policy-entries by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/copp/{name}/default-policy/configured-copp-policy-entries"

        return await self.get(url)

    async def copp_create_copp_profile_user_policies_by_id_v1(
        self,
        name: str = None,
        copp_polic_yname: str = None,
    ) -> Response:
        """Create user-policies by ID.

        Args:
            name (str, optional): name
            copp_polic_yname (str, optional): coppPolicyName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/copp/{name}/user-policies/{copp_polic_yname}"

        return await self.post(url)

    async def copp_read_copp_profile_user_policies_by_id_v1(
        self,
        name: str = None,
        copp_polic_yname: str = None,
    ) -> Response:
        """Get user-policies by ID.

        Args:
            name (str, optional): name
            copp_polic_yname (str, optional): coppPolicyName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/copp/{name}/user-policies/{copp_polic_yname}"

        return await self.get(url)

    async def copp_delete_copp_profile_user_policies_by_id_v1(
        self,
        name: str = None,
        copp_polic_yname: str = None,
    ) -> Response:
        """Delete user-policies by ID.

        Args:
            name (str, optional): name
            copp_polic_yname (str, optional): coppPolicyName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/copp/{name}/user-policies/{copp_polic_yname}"

        return await self.delete(url)

    async def copp_create_copp_profile_user_policies_configured_copp_policy_entries_by_id_v1(
        self,
        name: str = None,
        copp_polic_yname: str = None,
    ) -> Response:
        """Create configured-copp-policy-entries by ID.

        Args:
            name (str, optional): name
            copp_polic_yname (str, optional): coppPolicyName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/copp/{name}/user-policies/{copp_polic_yname}/configured-copp-policy-entries"

        return await self.post(url)

    async def copp_read_copp_profile_user_policies_configured_copp_policy_entries_by_id_v1(
        self,
        name: str = None,
        copp_polic_yname: str = None,
    ) -> Response:
        """Get configured-copp-policy-entries by ID.

        Args:
            name (str, optional): name
            copp_polic_yname (str, optional): coppPolicyName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/copp/{name}/user-policies/{copp_polic_yname}/configured-copp-policy-entries"

        return await self.get(url)

    async def countermon_create_countermon_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        poll_interval: int = None,
        enable_polling: bool = None,
    ) -> Response:
        """Create countermon by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Counter monitor configuration profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Counter monitor profile name.
            description (str): Counter monitor profile description.
            poll_interval (int): System resource data polling interval in seconds.
            enable_polling (bool): Enable system resource data polling.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/countermon"

        json_data = {
            'name': name,
            'description': description,
            'poll_interval': poll_interval,
            'enable_polling': enable_polling
        }

        return await self.post(url, json_data=json_data)

    async def countermon_read_countermon_v1(
        self,
    ) -> Response:
        """Get countermon.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/countermon"

        return await self.get(url)

    async def countermon_create_countermon_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/countermon/{name}"

        return await self.post(url)

    async def countermon_read_countermon_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/countermon/{name}"

        return await self.get(url)

    async def countermon_delete_countermon_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/countermon/{name}"

        return await self.delete(url)

    async def cp_bandwidth_contract_create_cp_bandwidth_contract_by_id_v1(
        self,
        name: str,
        description: str,
        rate: int,
    ) -> Response:
        """Create cp-bandwidth-contract by ID.

        Args:
            name (str): Contract name
            description (str): CP Bandwidth Contract profile description.
            rate (int): Bandwidth rate

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/cp-bandwidth-contract"

        json_data = {
            'name': name,
            'description': description,
            'rate': rate
        }

        return await self.post(url, json_data=json_data)

    async def cp_bandwidth_contract_read_cp_bandwidth_contract_v1(
        self,
    ) -> Response:
        """Get cp-bandwidth-contract.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/cp-bandwidth-contract"

        return await self.get(url)

    async def cp_bandwidth_contract_create_cp_bandwidth_contract_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cp-bandwidth-contract/{name}"

        return await self.post(url)

    async def cp_bandwidth_contract_read_cp_bandwidth_contract_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cp-bandwidth-contract/{name}"

        return await self.get(url)

    async def cp_bandwidth_contract_delete_cp_bandwidth_contract_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/cp-bandwidth-contract/{name}"

        return await self.delete(url)

    async def credentials_management_create_credentials_management_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        include_credentials: bool = None,
        mode: str = None,
        include_clearpass_key: bool = None,
        delete_cred_in_config_file: bool = None,
        cwmp_enable: bool = None,
        encrypt_credentials: bool = None,
        key_type: str = None,
        key_string: str = None,
        encrypt_credential_header: str = None,
        template_header_line: str = None,
        template_version_line: str = None,
    ) -> Response:
        """Create credentials-management by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Credentials management profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Credentials management profile name.
            description (str): Credentials management description.
            include_credentials (bool): Enables inclusion of credentials in each configuration
                when saved onto a remote server or workstation
            mode (str): Specifies the storage mode of the credentials.  Valid Values: ENABLED,
                RADIUS_TACACS_ONLY
            include_clearpass_key (bool): Enables inclusion of ClearPass key along with other
                sensitive keys in the show configuration.
            delete_cred_in_config_file (bool): Deletes credentials stored in the configuration
                files when include credentials was enabled.
            cwmp_enable (bool): Enable CPE WAN Management Protocol (TR-069).
            encrypt_credentials (bool): Enables encryption of credentials in configuration.
            key_type (str): Type of pre-shared key.  Valid Values: HEX, TEXT
            key_string (str): Key for encrypting credentials in the configuration.
            encrypt_credential_header (str): Header string to be specified in running configuration.
            template_header_line (str): The first line of template header as specified in running
                configuration.
            template_version_line (str): The second line of template header as specified in running
                configuration.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/credentials-management"

        json_data = {
            'name': name,
            'description': description,
            'include_credentials': include_credentials,
            'mode': mode,
            'include_clearpass_key': include_clearpass_key,
            'delete_cred_in_config_file': delete_cred_in_config_file,
            'cwmp_enable': cwmp_enable,
            'encrypt_credentials': encrypt_credentials,
            'key_type': key_type,
            'key_string': key_string,
            'encrypt_credential_header': encrypt_credential_header,
            'template_header_line': template_header_line,
            'template_version_line': template_version_line
        }

        return await self.post(url, json_data=json_data)

    async def credentials_management_read_credentials_management_v1(
        self,
    ) -> Response:
        """Get credentials-management.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/credentials-management"

        return await self.get(url)

    async def credentials_management_create_credentials_management_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/credentials-management/{name}"

        return await self.post(url)

    async def credentials_management_read_credentials_management_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/credentials-management/{name}"

        return await self.get(url)

    async def credentials_management_delete_credentials_management_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/credentials-management/{name}"

        return await self.delete(url)

    async def custom_get_api_read_custom_get_v1(
        self,
    ) -> Response:
        """Get custom-get-api.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/custom-get-api"

        return await self.get(url)

    async def custom_variable_create_custom_variables_by_id_v1(
        self,
        type: str = None,
        int8: int = None,
        int16: int = None,
        int32: int = None,
        uint8: int = None,
        uint16: int = None,
        uint32: int = None,
        uint64: int = None,
        string: str = None,
    ) -> Response:
        """Create custom-variables by ID.

        Args:
            type (str, optional): Custom Variable type.  Valid Values: INT8, INT16, INT32, STRING,
                UINT8, UINT16, UINT32, UINT64
            int8 (int, optional): int8.
            int16 (int, optional): int16.
            int32 (int, optional): int8.
            uint8 (int, optional): uint8.
            uint16 (int, optional): uint16.
            uint32 (int, optional): uint32.
            uint64 (int, optional): uint64.
            string (str, optional): string.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/custom-variables"

        json_data = {
            'type': type,
            'int8': int8,
            'int16': int16,
            'int32': int32,
            'uint8': uint8,
            'uint16': uint16,
            'uint32': uint32,
            'uint64': uint64,
            'string': string
        }

        return await self.post(url, json_data=json_data)

    async def custom_variable_read_custom_variables_v1(
        self,
    ) -> Response:
        """Get custom-variables.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/custom-variables"

        return await self.get(url)

    async def custom_variable_read_custom_capabilities_v1(
        self,
    ) -> Response:
        """Get custom-capabilities.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/custom-capabilities"

        return await self.get(url)

    async def custom_variable_create_custom_variables_custom_variable_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Create custom-variable by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/custom-variables/{xpath}"

        return await self.post(url)

    async def custom_variable_read_custom_variables_custom_variable_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Get custom-variable by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/custom-variables/{xpath}"

        return await self.get(url)

    async def custom_variable_delete_custom_variables_custom_variable_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Delete custom-variable by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/custom-variables/{xpath}"

        return await self.delete(url)

    async def custom_variable_create_custom_variables_custom_variable_value_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Create value by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/custom-variables/{xpath}/value"

        return await self.post(url)

    async def custom_variable_read_custom_variables_custom_variable_value_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Get value by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/custom-variables/{xpath}/value"

        return await self.get(url)

    async def custom_variable_create_custom_variables_custom_variable_scopes_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Create scopes by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/custom-variables/{xpath}/scopes"

        return await self.post(url)

    async def custom_variable_read_custom_variables_custom_variable_scopes_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Get scopes by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/custom-variables/{xpath}/scopes"

        return await self.get(url)

    async def custom_variable_delete_custom_variables_custom_variable_scopes_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Delete scopes by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/custom-variables/{xpath}/scopes"

        return await self.delete(url)

    async def custom_variable_read_custom_capabilities_custom_capability_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Get custom-capability by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/custom-capabilities/{xpath}"

        return await self.get(url)

    async def custom_variable_read_custom_capabilities_custom_capability_scopes_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Get scopes by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/custom-capabilities/{xpath}/scopes"

        return await self.get(url)

    async def cx_switch_firmware_create_cx_switch_firmware_by_id_v1(
        self,
        upgrade_mode: str,
        version: str,
        rollback: str,
        active_partition: str,
        reboot: bool,
    ) -> Response:
        """Create cx-switch-firmware by ID.

        Args:
            upgrade_mode (str): Hitless upgrade or regular upgrade  Valid Values: CX_REGULAR,
                CX_ISSU, CX_SITE_DISTRIBUTION, CX_VSX_LIVE
            version (str): Desired firmware version
            rollback (str): INTERNAL - firmware version to rollback to
            active_partition (str): Partition to upgrade  Valid Values: PRIMARY, SECONDARY
            reboot (bool): Automatically reboot after upgrade or not

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/cx-switch-firmware"

        json_data = {
            'upgrade_mode': upgrade_mode,
            'version': version,
            'rollback': rollback,
            'active_partition': active_partition,
            'reboot': reboot
        }

        return await self.post(url, json_data=json_data)

    async def cx_switch_firmware_read_cx_switch_firmware_v1(
        self,
    ) -> Response:
        """Get cx-switch-firmware.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/cx-switch-firmware"

        return await self.get(url)

    async def ddns_http_ietf_create_ddns_http_ietf_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create ddns-http-ietf by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for DDNS HTTP parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Global profile for DDNS HTTP parameters

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ddns-http-ietf"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def ddns_http_ietf_read_ddns_http_ietf_v1(
        self,
    ) -> Response:
        """Get ddns-http-ietf.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ddns-http-ietf"

        return await self.get(url)

    async def ddns_http_ietf_create_ddns_http_ietf_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http-ietf/{name}"

        return await self.post(url)

    async def ddns_http_ietf_read_ddns_http_ietf_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http-ietf/{name}"

        return await self.get(url)

    async def ddns_http_ietf_delete_ddns_http_ietf_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http-ietf/{name}"

        return await self.delete(url)

    async def ddns_http_ietf_create_ddns_http_ietf_profile_server_http_by_id_v1(
        self,
        name: str = None,
        url: str = None,
    ) -> Response:
        """Create server-http by ID.

        Args:
            name (str, optional): name
            url (str, optional): url

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http-ietf/{name}/server-http/{url}"

        return await self.post(url)

    async def ddns_http_ietf_read_ddns_http_ietf_profile_server_http_by_id_v1(
        self,
        name: str = None,
        url: str = None,
    ) -> Response:
        """Get server-http by ID.

        Args:
            name (str, optional): name
            url (str, optional): url

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http-ietf/{name}/server-http/{url}"

        return await self.get(url)

    async def ddns_http_ietf_delete_ddns_http_ietf_profile_server_http_by_id_v1(
        self,
        name: str = None,
        url: str = None,
    ) -> Response:
        """Delete server-http by ID.

        Args:
            name (str, optional): name
            url (str, optional): url

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http-ietf/{name}/server-http/{url}"

        return await self.delete(url)

    async def ddns_http_ietf_create_ddns_http_ietf_profile_server_ietf_by_id_v1(
        self,
        name: str = None,
        ip: str = None,
    ) -> Response:
        """Create server-ietf by ID.

        Args:
            name (str, optional): name
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http-ietf/{name}/server-ietf/{ip}"

        return await self.post(url)

    async def ddns_http_ietf_read_ddns_http_ietf_profile_server_ietf_by_id_v1(
        self,
        name: str = None,
        ip: str = None,
    ) -> Response:
        """Get server-ietf by ID.

        Args:
            name (str, optional): name
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http-ietf/{name}/server-ietf/{ip}"

        return await self.get(url)

    async def ddns_http_ietf_delete_ddns_http_ietf_profile_server_ietf_by_id_v1(
        self,
        name: str = None,
        ip: str = None,
    ) -> Response:
        """Delete server-ietf by ID.

        Args:
            name (str, optional): name
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http-ietf/{name}/server-ietf/{ip}"

        return await self.delete(url)

    async def ddns_http_create_ddns_http_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create ddns-http by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for DDNS HTTP parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Global profile for DDNS HTTP parameters

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ddns-http"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def ddns_http_read_ddns_http_v1(
        self,
    ) -> Response:
        """Get ddns-http.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ddns-http"

        return await self.get(url)

    async def ddns_http_create_ddns_http_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http/{name}"

        return await self.post(url)

    async def ddns_http_read_ddns_http_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http/{name}"

        return await self.get(url)

    async def ddns_http_delete_ddns_http_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http/{name}"

        return await self.delete(url)

    async def ddns_http_create_ddns_http_profile_server_by_id_v1(
        self,
        name: str = None,
        url: str = None,
    ) -> Response:
        """Create server by ID.

        Args:
            name (str, optional): name
            url (str, optional): url

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http/{name}/server/{url}"

        return await self.post(url)

    async def ddns_http_read_ddns_http_profile_server_by_id_v1(
        self,
        name: str = None,
        url: str = None,
    ) -> Response:
        """Get server by ID.

        Args:
            name (str, optional): name
            url (str, optional): url

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http/{name}/server/{url}"

        return await self.get(url)

    async def ddns_http_delete_ddns_http_profile_server_by_id_v1(
        self,
        name: str = None,
        url: str = None,
    ) -> Response:
        """Delete server by ID.

        Args:
            name (str, optional): name
            url (str, optional): url

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns-http/{name}/server/{url}"

        return await self.delete(url)

    async def ddns_create_ddns_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create ddns by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for DDNS parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Global profile for DDNS parameters

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ddns"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def ddns_read_ddns_v1(
        self,
    ) -> Response:
        """Get ddns.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ddns"

        return await self.get(url)

    async def ddns_create_ddns_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns/{name}"

        return await self.post(url)

    async def ddns_read_ddns_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns/{name}"

        return await self.get(url)

    async def ddns_delete_ddns_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns/{name}"

        return await self.delete(url)

    async def ddns_create_ddns_profile_server_by_id_v1(
        self,
        name: str = None,
        ip: str = None,
    ) -> Response:
        """Create server by ID.

        Args:
            name (str, optional): name
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns/{name}/server/{ip}"

        return await self.post(url)

    async def ddns_read_ddns_profile_server_by_id_v1(
        self,
        name: str = None,
        ip: str = None,
    ) -> Response:
        """Get server by ID.

        Args:
            name (str, optional): name
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns/{name}/server/{ip}"

        return await self.get(url)

    async def ddns_delete_ddns_profile_server_by_id_v1(
        self,
        name: str = None,
        ip: str = None,
    ) -> Response:
        """Delete server by ID.

        Args:
            name (str, optional): name
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ddns/{name}/server/{ip}"

        return await self.delete(url)

    async def deployment_property_create_deployment_by_id_v1(
        self,
        deployment_persona: str,
    ) -> Response:
        """Create deployment by ID.

        Args:
            deployment_persona (str): The persona for all gateways in a network deployment.  Valid
                Values: HYBRID, BRANCH_GW, MOBILITY_GW

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/deployment"

        json_data = {
            'deployment_persona': deployment_persona
        }

        return await self.post(url, json_data=json_data)

    async def deployment_property_read_deployment_v1(
        self,
    ) -> Response:
        """Get deployment.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/deployment"

        return await self.get(url)

    async def device_constraints_read_device_constraints_v1(
        self,
    ) -> Response:
        """Get device-constraints.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/device-constraints"

        return await self.get(url)

    async def device_constraints_read_device_constraints_device_parameters_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Get device-parameters by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-constraints/{xpath}"

        return await self.get(url)

    async def device_constraints_read_device_constraints_device_parameters_meta_data_by_id_v1(
        self,
        xpath: str = None,
    ) -> Response:
        """Get meta-data by ID.

        Args:
            xpath (str, optional): xpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-constraints/{xpath}/meta-data"

        return await self.get(url)

    async def device_constraints_read_device_constraints_device_parameters_platforms_by_id_v1(
        self,
        xpath: str = None,
        type: str = None,
    ) -> Response:
        """Get platforms by ID.

        Args:
            xpath (str, optional): xpath
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-constraints/{xpath}/platforms/{type}"

        return await self.get(url)

    async def device_constraints_read_device_constraints_device_parameters_platforms_models_by_id_v1(
        self,
        xpath: str = None,
        type: str = None,
    ) -> Response:
        """Get models by ID.

        Args:
            xpath (str, optional): xpath
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-constraints/{xpath}/platforms/{type}/models"

        return await self.get(url)

    async def device_info_create_device_parameters_by_id_v1(
        self,
        platform_model: str,
        license_tier: str,
        sw_version: str,
        sku: str,
        deployment_type: str,
        switch_profile: str,
    ) -> Response:
        """Create device-parameters by ID.

        Args:
            platform_model (str): Platform Model Type, like, SW_CX-6000
            license_tier (str): License type  Valid Values: FOUNDATION, ADVANCED, FOUNDATION_BASE,
                ADVANCED_SECURITY, FOUNDATION_SECURITY
            sw_version (str): Software Version, like 0.0.0.0,  5.6.7.8
            sku (str): Device SKU Number
            deployment_type (str): Deployment type for SKU profiles
            switch_profile (str): CX Switch profile name

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/device-parameters"

        json_data = {
            'platform_model': platform_model,
            'license_tier': license_tier,
            'sw_version': sw_version,
            'sku': sku,
            'deployment_type': deployment_type,
            'switch_profile': switch_profile
        }

        return await self.post(url, json_data=json_data)

    async def device_info_read_device_parameters_v1(
        self,
    ) -> Response:
        """Get device-parameters.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/device-parameters"

        return await self.get(url)

    async def device_info_create_device_parameters_platforms_by_id_v1(
        self,
        platform_model: str = None,
    ) -> Response:
        """Create platforms by ID.

        Args:
            platform_model (str, optional): platformModel

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-parameters/{platform_model}"

        return await self.post(url)

    async def device_info_read_device_parameters_platforms_by_id_v1(
        self,
        platform_model: str = None,
    ) -> Response:
        """Get platforms by ID.

        Args:
            platform_model (str, optional): platformModel

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-parameters/{platform_model}"

        return await self.get(url)

    async def device_info_delete_device_parameters_platforms_by_id_v1(
        self,
        platform_model: str = None,
    ) -> Response:
        """Delete platforms by ID.

        Args:
            platform_model (str, optional): platformModel

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-parameters/{platform_model}"

        return await self.delete(url)

    async def device_persona_create_device_persona_by_id_v1(
        self,
        deviceid: str,
        persona: str,
    ) -> Response:
        """Create device-persona by ID.

        Args:
            deviceid (str): Device Serial Number.
            persona (str): Persona identifier.  Valid Values: MOBILITY_GW, BRANCH_GW, VPNC,
                CAMPUS_AP, MICROBRANCH_AP, SWITCH, ALL, SERVICE_PERSONA

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/device-persona"

        json_data = {
            'deviceid': deviceid,
            'persona': persona
        }

        return await self.post(url, json_data=json_data)

    async def device_persona_read_device_persona_v1(
        self,
    ) -> Response:
        """Get device-persona.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/device-persona"

        return await self.get(url)

    async def device_persona_create_device_persona_device_by_id_v1(
        self,
        deviceid: str = None,
    ) -> Response:
        """Create device by ID.

        Args:
            deviceid (str, optional): deviceid

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-persona/{deviceid}"

        return await self.post(url)

    async def device_persona_read_device_persona_device_by_id_v1(
        self,
        deviceid: str = None,
    ) -> Response:
        """Get device by ID.

        Args:
            deviceid (str, optional): deviceid

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-persona/{deviceid}"

        return await self.get(url)

    async def device_persona_delete_device_persona_device_by_id_v1(
        self,
        deviceid: str = None,
    ) -> Response:
        """Delete device by ID.

        Args:
            deviceid (str, optional): deviceid

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-persona/{deviceid}"

        return await self.delete(url)

    async def device_profile_create_device_profile_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create device-profile by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of device profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of device profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/device-profile"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def device_profile_read_device_profile_v1(
        self,
    ) -> Response:
        """Get device-profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/device-profile"

        return await self.get(url)

    async def device_profile_create_device_profile_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}"

        return await self.post(url)

    async def device_profile_read_device_profile_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}"

        return await self.get(url)

    async def device_profile_delete_device_profile_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}"

        return await self.delete(url)

    async def device_profile_create_device_profile_profile_lldp_group_entries_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Create lldp-group-entries by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}/lldp-group-entries/{sequence_number}"

        return await self.post(url)

    async def device_profile_read_device_profile_profile_lldp_group_entries_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Get lldp-group-entries by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}/lldp-group-entries/{sequence_number}"

        return await self.get(url)

    async def device_profile_delete_device_profile_profile_lldp_group_entries_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Delete lldp-group-entries by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}/lldp-group-entries/{sequence_number}"

        return await self.delete(url)

    async def device_profile_create_device_profile_profile_lldp_group_entries_vendor_oui_subtype_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
        type: str = None,
    ) -> Response:
        """Create vendor-oui-subtype by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}/lldp-group-entries/{sequence_number}/vendor-oui-subtype/{type}"

        return await self.post(url)

    async def device_profile_read_device_profile_profile_lldp_group_entries_vendor_oui_subtype_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
        type: str = None,
    ) -> Response:
        """Get vendor-oui-subtype by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}/lldp-group-entries/{sequence_number}/vendor-oui-subtype/{type}"

        return await self.get(url)

    async def device_profile_delete_device_profile_profile_lldp_group_entries_vendor_oui_subtype_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
        type: str = None,
    ) -> Response:
        """Delete vendor-oui-subtype by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}/lldp-group-entries/{sequence_number}/vendor-oui-subtype/{type}"

        return await self.delete(url)

    async def device_profile_create_device_profile_profile_cdp_group_entries_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Create cdp-group-entries by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}/cdp-group-entries/{sequence_number}"

        return await self.post(url)

    async def device_profile_read_device_profile_profile_cdp_group_entries_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Get cdp-group-entries by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}/cdp-group-entries/{sequence_number}"

        return await self.get(url)

    async def device_profile_delete_device_profile_profile_cdp_group_entries_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Delete cdp-group-entries by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}/cdp-group-entries/{sequence_number}"

        return await self.delete(url)

    async def device_profile_create_device_profile_profile_mac_group_entries_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Create mac-group-entries by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}/mac-group-entries/{sequence_number}"

        return await self.post(url)

    async def device_profile_read_device_profile_profile_mac_group_entries_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Get mac-group-entries by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}/mac-group-entries/{sequence_number}"

        return await self.get(url)

    async def device_profile_delete_device_profile_profile_mac_group_entries_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Delete mac-group-entries by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/device-profile/{name}/mac-group-entries/{sequence_number}"

        return await self.delete(url)

    async def devicefingerprinting_interface_create_devicefingerprinting_interface_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create devicefingerprinting-interface by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of DFP Interface Profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of DFP Interface Profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/devicefingerprinting-interface"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def devicefingerprinting_interface_read_devicefingerprinting_interface_v1(
        self,
    ) -> Response:
        """Get devicefingerprinting-interface.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/devicefingerprinting-interface"

        return await self.get(url)

    async def devicefingerprinting_interface_create_devicefingerprinting_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-interface/{name}"

        return await self.post(url)

    async def devicefingerprinting_interface_read_devicefingerprinting_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-interface/{name}"

        return await self.get(url)

    async def devicefingerprinting_interface_delete_devicefingerprinting_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-interface/{name}"

        return await self.delete(url)

    async def devicefingerprinting_profile_create_devicefingerprinting_profile_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create devicefingerprinting-profile by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of DFP Profiles
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of DFP Profiles

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/devicefingerprinting-profile"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def devicefingerprinting_profile_read_devicefingerprinting_profile_v1(
        self,
    ) -> Response:
        """Get devicefingerprinting-profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/devicefingerprinting-profile"

        return await self.get(url)

    async def devicefingerprinting_profile_create_devicefingerprinting_profile_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}"

        return await self.post(url)

    async def devicefingerprinting_profile_read_devicefingerprinting_profile_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}"

        return await self.get(url)

    async def devicefingerprinting_profile_delete_devicefingerprinting_profile_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}"

        return await self.delete(url)

    async def devicefingerprinting_profile_create_devicefingerprinting_profile_profile_lldp_tlv_names_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create lldp-tlv-names by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/lldp-tlv-names"

        return await self.post(url)

    async def devicefingerprinting_profile_read_devicefingerprinting_profile_profile_lldp_tlv_names_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get lldp-tlv-names by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/lldp-tlv-names"

        return await self.get(url)

    async def devicefingerprinting_profile_delete_devicefingerprinting_profile_profile_lldp_tlv_names_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete lldp-tlv-names by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/lldp-tlv-names"

        return await self.delete(url)

    async def devicefingerprinting_profile_create_devicefingerprinting_profile_profile_lldp_tlv_numbers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create lldp-tlv-numbers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/lldp-tlv-numbers"

        return await self.post(url)

    async def devicefingerprinting_profile_read_devicefingerprinting_profile_profile_lldp_tlv_numbers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get lldp-tlv-numbers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/lldp-tlv-numbers"

        return await self.get(url)

    async def devicefingerprinting_profile_delete_devicefingerprinting_profile_profile_lldp_tlv_numbers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete lldp-tlv-numbers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/lldp-tlv-numbers"

        return await self.delete(url)

    async def devicefingerprinting_profile_create_devicefingerprinting_profile_profile_cdp_tlv_names_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create cdp-tlv-names by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/cdp-tlv-names"

        return await self.post(url)

    async def devicefingerprinting_profile_read_devicefingerprinting_profile_profile_cdp_tlv_names_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get cdp-tlv-names by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/cdp-tlv-names"

        return await self.get(url)

    async def devicefingerprinting_profile_delete_devicefingerprinting_profile_profile_cdp_tlv_names_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete cdp-tlv-names by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/cdp-tlv-names"

        return await self.delete(url)

    async def devicefingerprinting_profile_create_devicefingerprinting_profile_profile_cdp_tlv_numbers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create cdp-tlv-numbers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/cdp-tlv-numbers"

        return await self.post(url)

    async def devicefingerprinting_profile_read_devicefingerprinting_profile_profile_cdp_tlv_numbers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get cdp-tlv-numbers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/cdp-tlv-numbers"

        return await self.get(url)

    async def devicefingerprinting_profile_delete_devicefingerprinting_profile_profile_cdp_tlv_numbers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete cdp-tlv-numbers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/cdp-tlv-numbers"

        return await self.delete(url)

    async def devicefingerprinting_profile_create_devicefingerprinting_profile_profile_dhcp_options_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create dhcp-options by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/dhcp-options"

        return await self.post(url)

    async def devicefingerprinting_profile_read_devicefingerprinting_profile_profile_dhcp_options_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get dhcp-options by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/dhcp-options"

        return await self.get(url)

    async def devicefingerprinting_profile_delete_devicefingerprinting_profile_profile_dhcp_options_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete dhcp-options by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting-profile/{name}/dhcp-options"

        return await self.delete(url)

    async def devicefingerprinting_create_devicefingerprinting_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create devicefingerprinting by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of Device Fingerprinting global profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of Device Fingerprinting global profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/devicefingerprinting"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def devicefingerprinting_read_devicefingerprinting_v1(
        self,
    ) -> Response:
        """Get devicefingerprinting.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/devicefingerprinting"

        return await self.get(url)

    async def devicefingerprinting_create_devicefingerprinting_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting/{name}"

        return await self.post(url)

    async def devicefingerprinting_read_devicefingerprinting_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting/{name}"

        return await self.get(url)

    async def devicefingerprinting_delete_devicefingerprinting_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/devicefingerprinting/{name}"

        return await self.delete(url)

    async def dhcp_client_create_dhcp_client_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create dhcp-client by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for DHCP Client Configuration.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Global profile for DHCP Client Configuration.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dhcp-client"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def dhcp_client_read_dhcp_client_v1(
        self,
    ) -> Response:
        """Get dhcp-client.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dhcp-client"

        return await self.get(url)

    async def dhcp_client_create_dhcp_client_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-client/{name}"

        return await self.post(url)

    async def dhcp_client_read_dhcp_client_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-client/{name}"

        return await self.get(url)

    async def dhcp_client_delete_dhcp_client_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-client/{name}"

        return await self.delete(url)

    async def dhcp_client_create_dhcp_client_profile_ip_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ip by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-client/{name}/ip"

        return await self.post(url)

    async def dhcp_client_read_dhcp_client_profile_ip_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ip by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-client/{name}/ip"

        return await self.get(url)

    async def dhcp_relay_create_dhcp_relay_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create dhcp-relay by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for DHCP Relay Configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Global profile for DHCP Relay Configurations

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dhcp-relay"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def dhcp_relay_read_dhcp_relay_v1(
        self,
    ) -> Response:
        """Get dhcp-relay.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dhcp-relay"

        return await self.get(url)

    async def dhcp_relay_create_dhcp_relay_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-relay/{name}"

        return await self.post(url)

    async def dhcp_relay_read_dhcp_relay_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-relay/{name}"

        return await self.get(url)

    async def dhcp_relay_delete_dhcp_relay_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-relay/{name}"

        return await self.delete(url)

    async def dhcp_relay_create_dhcp_relay_profile_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-relay/{name}/ipv4"

        return await self.post(url)

    async def dhcp_relay_read_dhcp_relay_profile_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-relay/{name}/ipv4"

        return await self.get(url)

    async def dhcp_relay_create_dhcp_relay_profile_ipv4_option82_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create option-82 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-relay/{name}/ipv4/option-82"

        return await self.post(url)

    async def dhcp_relay_read_dhcp_relay_profile_ipv4_option82_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get option-82 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-relay/{name}/ipv4/option-82"

        return await self.get(url)

    async def dhcp_relay_create_dhcp_relay_profile_ipv6_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ipv6 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-relay/{name}/ipv6"

        return await self.post(url)

    async def dhcp_relay_read_dhcp_relay_profile_ipv6_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ipv6 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-relay/{name}/ipv6"

        return await self.get(url)

    async def dhcp_server_create_dhcp_server_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create dhcp-server by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for DHCP Server Configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Global profile for DHCP Server Configurations

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dhcp-server"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def dhcp_server_read_dhcp_server_v1(
        self,
    ) -> Response:
        """Get dhcp-server.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dhcp-server"

        return await self.get(url)

    async def dhcp_server_create_dhcp_server_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}"

        return await self.post(url)

    async def dhcp_server_read_dhcp_server_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}"

        return await self.get(url)

    async def dhcp_server_delete_dhcp_server_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}"

        return await self.delete(url)

    async def dhcp_server_create_dhcp_server_profile_instance_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        ip_version: str = None,
    ) -> Response:
        """Create instance by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            ip_version (str, optional): ipVersion

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/instance/{vrf}/{ip_version}"

        return await self.post(url)

    async def dhcp_server_read_dhcp_server_profile_instance_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        ip_version: str = None,
    ) -> Response:
        """Get instance by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            ip_version (str, optional): ipVersion

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/instance/{vrf}/{ip_version}"

        return await self.get(url)

    async def dhcp_server_delete_dhcp_server_profile_instance_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        ip_version: str = None,
    ) -> Response:
        """Delete instance by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            ip_version (str, optional): ipVersion

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/instance/{vrf}/{ip_version}"

        return await self.delete(url)

    async def dhcp_server_create_dhcp_server_profile_instance_ipv4_pool_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        ip_version: str = None,
        ipv4_pool_name: str = None,
    ) -> Response:
        """Create ipv4-pool by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            ip_version (str, optional): ipVersion
            ipv4_pool_name (str, optional): ipv4-pool_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/instance/{vrf}/{ip_version}/ipv4-pool/{ipv4_pool_name}"

        return await self.post(url)

    async def dhcp_server_read_dhcp_server_profile_instance_ipv4_pool_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        ip_version: str = None,
        ipv4_pool_name: str = None,
    ) -> Response:
        """Get ipv4-pool by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            ip_version (str, optional): ipVersion
            ipv4_pool_name (str, optional): ipv4-pool_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/instance/{vrf}/{ip_version}/ipv4-pool/{ipv4_pool_name}"

        return await self.get(url)

    async def dhcp_server_delete_dhcp_server_profile_instance_ipv4_pool_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        ip_version: str = None,
        ipv4_pool_name: str = None,
    ) -> Response:
        """Delete ipv4-pool by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            ip_version (str, optional): ipVersion
            ipv4_pool_name (str, optional): ipv4-pool_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/instance/{vrf}/{ip_version}/ipv4-pool/{ipv4_pool_name}"

        return await self.delete(url)

    async def dhcp_server_create_dhcp_server_profile_instance_ipv6_pool_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        ip_version: str = None,
        ipv6_pool_name: str = None,
    ) -> Response:
        """Create ipv6-pool by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            ip_version (str, optional): ipVersion
            ipv6_pool_name (str, optional): ipv6-pool_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/instance/{vrf}/{ip_version}/ipv6-pool/{ipv6_pool_name}"

        return await self.post(url)

    async def dhcp_server_read_dhcp_server_profile_instance_ipv6_pool_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        ip_version: str = None,
        ipv6_pool_name: str = None,
    ) -> Response:
        """Get ipv6-pool by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            ip_version (str, optional): ipVersion
            ipv6_pool_name (str, optional): ipv6-pool_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/instance/{vrf}/{ip_version}/ipv6-pool/{ipv6_pool_name}"

        return await self.get(url)

    async def dhcp_server_delete_dhcp_server_profile_instance_ipv6_pool_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        ip_version: str = None,
        ipv6_pool_name: str = None,
    ) -> Response:
        """Delete ipv6-pool by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            ip_version (str, optional): ipVersion
            ipv6_pool_name (str, optional): ipv6-pool_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/instance/{vrf}/{ip_version}/ipv6-pool/{ipv6_pool_name}"

        return await self.delete(url)

    async def dhcp_server_create_dhcp_server_profile_excluded_address_by_id_v1(
        self,
        name: str = None,
        low: str = None,
    ) -> Response:
        """Create excluded-address by ID.

        Args:
            name (str, optional): name
            low (str, optional): low

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/excluded-address/{low}"

        return await self.post(url)

    async def dhcp_server_read_dhcp_server_profile_excluded_address_by_id_v1(
        self,
        name: str = None,
        low: str = None,
    ) -> Response:
        """Get excluded-address by ID.

        Args:
            name (str, optional): name
            low (str, optional): low

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/excluded-address/{low}"

        return await self.get(url)

    async def dhcp_server_delete_dhcp_server_profile_excluded_address_by_id_v1(
        self,
        name: str = None,
        low: str = None,
    ) -> Response:
        """Delete excluded-address by ID.

        Args:
            name (str, optional): name
            low (str, optional): low

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/excluded-address/{low}"

        return await self.delete(url)

    async def dhcp_server_create_dhcp_server_profile_static_binding_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Create static-binding by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/static-binding/{mac}"

        return await self.post(url)

    async def dhcp_server_read_dhcp_server_profile_static_binding_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Get static-binding by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/static-binding/{mac}"

        return await self.get(url)

    async def dhcp_server_delete_dhcp_server_profile_static_binding_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Delete static-binding by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/static-binding/{mac}"

        return await self.delete(url)

    async def dhcp_server_create_dhcp_server_profile_ping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/ping"

        return await self.post(url)

    async def dhcp_server_read_dhcp_server_profile_ping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/ping"

        return await self.get(url)

    async def dhcp_server_create_dhcp_server_profile_external_storage_by_id_v1(
        self,
        name: str = None,
        ip_version: str = None,
        external_storage_name: str = None,
    ) -> Response:
        """Create external-storage by ID.

        Args:
            name (str, optional): name
            ip_version (str, optional): ipVersion
            external_storage_name (str, optional): external-storage_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/external-storage/{ip_version}/{external_storage_name}"

        return await self.post(url)

    async def dhcp_server_read_dhcp_server_profile_external_storage_by_id_v1(
        self,
        name: str = None,
        ip_version: str = None,
        external_storage_name: str = None,
    ) -> Response:
        """Get external-storage by ID.

        Args:
            name (str, optional): name
            ip_version (str, optional): ipVersion
            external_storage_name (str, optional): external-storage_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/external-storage/{ip_version}/{external_storage_name}"

        return await self.get(url)

    async def dhcp_server_delete_dhcp_server_profile_external_storage_by_id_v1(
        self,
        name: str = None,
        ip_version: str = None,
        external_storage_name: str = None,
    ) -> Response:
        """Delete external-storage by ID.

        Args:
            name (str, optional): name
            ip_version (str, optional): ipVersion
            external_storage_name (str, optional): external-storage_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/external-storage/{ip_version}/{external_storage_name}"

        return await self.delete(url)

    async def dhcp_server_create_dhcp_server_profile_database_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create database by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/database"

        return await self.post(url)

    async def dhcp_server_read_dhcp_server_profile_database_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get database by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-server/{name}/database"

        return await self.get(url)

    async def dhcp_snooping_interface_create_dhcp_snooping_interface_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create dhcp-snooping-interface by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): DHCP-Snooping interface profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): DHCP-Snooping interface profile

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dhcp-snooping-interface"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def dhcp_snooping_interface_read_dhcp_snooping_interface_v1(
        self,
    ) -> Response:
        """Get dhcp-snooping-interface.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dhcp-snooping-interface"

        return await self.get(url)

    async def dhcp_snooping_interface_create_dhcp_snooping_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping-interface/{name}"

        return await self.post(url)

    async def dhcp_snooping_interface_read_dhcp_snooping_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping-interface/{name}"

        return await self.get(url)

    async def dhcp_snooping_interface_delete_dhcp_snooping_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping-interface/{name}"

        return await self.delete(url)

    async def dhcp_snooping_interface_create_dhcp_snooping_interface_profile_dhcpv4_snooping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create dhcpv4-snooping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping-interface/{name}/dhcpv4-snooping"

        return await self.post(url)

    async def dhcp_snooping_interface_read_dhcp_snooping_interface_profile_dhcpv4_snooping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get dhcpv4-snooping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping-interface/{name}/dhcpv4-snooping"

        return await self.get(url)

    async def dhcp_snooping_interface_create_dhcp_snooping_interface_profile_dhcpv6_snooping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create dhcpv6-snooping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping-interface/{name}/dhcpv6-snooping"

        return await self.post(url)

    async def dhcp_snooping_interface_read_dhcp_snooping_interface_profile_dhcpv6_snooping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get dhcpv6-snooping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping-interface/{name}/dhcpv6-snooping"

        return await self.get(url)

    async def dhcp_snooping_create_dhcp_snooping_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create dhcp-snooping by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): DHCP-Snooping profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): DHCP-Snooping profile

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dhcp-snooping"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def dhcp_snooping_read_dhcp_snooping_v1(
        self,
    ) -> Response:
        """Get dhcp-snooping.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dhcp-snooping"

        return await self.get(url)

    async def dhcp_snooping_create_dhcp_snooping_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}"

        return await self.post(url)

    async def dhcp_snooping_read_dhcp_snooping_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}"

        return await self.get(url)

    async def dhcp_snooping_delete_dhcp_snooping_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}"

        return await self.delete(url)

    async def dhcp_snooping_create_dhcp_snooping_profile_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv4"

        return await self.post(url)

    async def dhcp_snooping_read_dhcp_snooping_profile_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv4"

        return await self.get(url)

    async def dhcp_snooping_create_dhcp_snooping_profile_ipv4_option82_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create option-82 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv4/option-82"

        return await self.post(url)

    async def dhcp_snooping_read_dhcp_snooping_profile_ipv4_option82_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get option-82 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv4/option-82"

        return await self.get(url)

    async def dhcp_snooping_create_dhcp_snooping_profile_ipv4_external_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create external-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv4/external-storage"

        return await self.post(url)

    async def dhcp_snooping_read_dhcp_snooping_profile_ipv4_external_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get external-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv4/external-storage"

        return await self.get(url)

    async def dhcp_snooping_create_dhcp_snooping_profile_ipv4_flash_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create flash-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv4/flash-storage"

        return await self.post(url)

    async def dhcp_snooping_read_dhcp_snooping_profile_ipv4_flash_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get flash-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv4/flash-storage"

        return await self.get(url)

    async def dhcp_snooping_create_dhcp_snooping_profile_ipv4_remote_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create remote-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv4/remote-storage"

        return await self.post(url)

    async def dhcp_snooping_read_dhcp_snooping_profile_ipv4_remote_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get remote-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv4/remote-storage"

        return await self.get(url)

    async def dhcp_snooping_create_dhcp_snooping_profile_ipv4_authorized_server_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create authorized-server by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv4/authorized-server/{vrf}"

        return await self.post(url)

    async def dhcp_snooping_read_dhcp_snooping_profile_ipv4_authorized_server_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get authorized-server by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv4/authorized-server/{vrf}"

        return await self.get(url)

    async def dhcp_snooping_delete_dhcp_snooping_profile_ipv4_authorized_server_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete authorized-server by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv4/authorized-server/{vrf}"

        return await self.delete(url)

    async def dhcp_snooping_create_dhcp_snooping_profile_ipv6_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ipv6 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6"

        return await self.post(url)

    async def dhcp_snooping_read_dhcp_snooping_profile_ipv6_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ipv6 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6"

        return await self.get(url)

    async def dhcp_snooping_create_dhcp_snooping_profile_ipv6_external_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create external-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6/external-storage"

        return await self.post(url)

    async def dhcp_snooping_read_dhcp_snooping_profile_ipv6_external_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get external-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6/external-storage"

        return await self.get(url)

    async def dhcp_snooping_create_dhcp_snooping_profile_ipv6_flash_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create flash-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6/flash-storage"

        return await self.post(url)

    async def dhcp_snooping_read_dhcp_snooping_profile_ipv6_flash_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get flash-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6/flash-storage"

        return await self.get(url)

    async def dhcp_snooping_create_dhcp_snooping_profile_ipv6_remote_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create remote-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6/remote-storage"

        return await self.post(url)

    async def dhcp_snooping_read_dhcp_snooping_profile_ipv6_remote_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get remote-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6/remote-storage"

        return await self.get(url)

    async def dhcp_snooping_create_dhcp_snooping_profile_ipv6_authorized_server_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create authorized-server by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6/authorized-server/{vrf}"

        return await self.post(url)

    async def dhcp_snooping_read_dhcp_snooping_profile_ipv6_authorized_server_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get authorized-server by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6/authorized-server/{vrf}"

        return await self.get(url)

    async def dhcp_snooping_delete_dhcp_snooping_profile_ipv6_authorized_server_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete authorized-server by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6/authorized-server/{vrf}"

        return await self.delete(url)

    async def dhcp_snooping_create_dhcp_snooping_profile_ipv6_ipv6_guard_policy_by_id_v1(
        self,
        name: str = None,
        ipv6_guard_policy_name: str = None,
    ) -> Response:
        """Create ipv6-guard-policy by ID.

        Args:
            name (str, optional): name
            ipv6_guard_policy_name (str, optional): ipv6-guard-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6/ipv6-guard-policy/{ipv6_guard_policy_name}"

        return await self.post(url)

    async def dhcp_snooping_read_dhcp_snooping_profile_ipv6_ipv6_guard_policy_by_id_v1(
        self,
        name: str = None,
        ipv6_guard_policy_name: str = None,
    ) -> Response:
        """Get ipv6-guard-policy by ID.

        Args:
            name (str, optional): name
            ipv6_guard_policy_name (str, optional): ipv6-guard-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6/ipv6-guard-policy/{ipv6_guard_policy_name}"

        return await self.get(url)

    async def dhcp_snooping_delete_dhcp_snooping_profile_ipv6_ipv6_guard_policy_by_id_v1(
        self,
        name: str = None,
        ipv6_guard_policy_name: str = None,
    ) -> Response:
        """Delete ipv6-guard-policy by ID.

        Args:
            name (str, optional): name
            ipv6_guard_policy_name (str, optional): ipv6-guard-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dhcp-snooping/{name}/ipv6/ipv6-guard-policy/{ipv6_guard_policy_name}"

        return await self.delete(url)

    async def distributed_fabric_create_fabrics_by_id_v1(
        self,
        source: str = None,
        wlan_gateway_clusters: List[str] = None,
        extended_edges: List[str] = None,
    ) -> Response:
        """Create fabrics by ID.

        Args:
            source (str, optional): Source of the Static Tunnel.
            wlan_gateway_clusters (List[str], optional): wlan-gateway-clusters
            extended_edges (List[str], optional): extended-edges

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/fabrics"

        json_data = {
            'source': source,
            'wlan_gateway_clusters': wlan_gateway_clusters,
            'extended_edges': extended_edges
        }

        return await self.post(url, json_data=json_data)

    async def distributed_fabric_read_fabrics_v1(
        self,
    ) -> Response:
        """Get fabrics.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/fabrics"

        return await self.get(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create distributed-fabric by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get distributed-fabric by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}"

        return await self.get(url)

    async def distributed_fabric_delete_fabrics_distributed_fabric_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete distributed-fabric by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}"

        return await self.delete(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_device_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Create device by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/device/{id}"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_device_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Get device by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/device/{id}"

        return await self.get(url)

    async def distributed_fabric_delete_fabrics_distributed_fabric_device_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Delete device by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/device/{id}"

        return await self.delete(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_device_campus_overlay_functions_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Create campus-overlay-functions by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/device/{id}/campus-overlay-functions"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_device_campus_overlay_functions_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Get campus-overlay-functions by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/device/{id}/campus-overlay-functions"

        return await self.get(url)

    async def distributed_fabric_delete_fabrics_distributed_fabric_device_campus_overlay_functions_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Delete campus-overlay-functions by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/device/{id}/campus-overlay-functions"

        return await self.delete(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_device_data_center_overlay_functions_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Create data-center-overlay-functions by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/device/{id}/data-center-overlay-functions"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_device_data_center_overlay_functions_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Get data-center-overlay-functions by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/device/{id}/data-center-overlay-functions"

        return await self.get(url)

    async def distributed_fabric_delete_fabrics_distributed_fabric_device_data_center_overlay_functions_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Delete data-center-overlay-functions by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/device/{id}/data-center-overlay-functions"

        return await self.delete(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_overlay_networks_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create overlay-networks by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/overlay-networks/{vrf}"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_overlay_networks_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get overlay-networks by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/overlay-networks/{vrf}"

        return await self.get(url)

    async def distributed_fabric_delete_fabrics_distributed_fabric_overlay_networks_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete overlay-networks by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/overlay-networks/{vrf}"

        return await self.delete(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_static_vxlan_tunnels_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create static-vxlan-tunnels by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/static-vxlan-tunnels"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_static_vxlan_tunnels_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get static-vxlan-tunnels by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/static-vxlan-tunnels"

        return await self.get(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_static_vxlan_tunnels_wlan_gateway_clusters_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create wlan-gateway-clusters by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/static-vxlan-tunnels/wlan-gateway-clusters"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_static_vxlan_tunnels_wlan_gateway_clusters_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get wlan-gateway-clusters by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/static-vxlan-tunnels/wlan-gateway-clusters"

        return await self.get(url)

    async def distributed_fabric_delete_fabrics_distributed_fabric_static_vxlan_tunnels_wlan_gateway_clusters_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete wlan-gateway-clusters by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/static-vxlan-tunnels/wlan-gateway-clusters"

        return await self.delete(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_static_vxlan_tunnels_extended_edges_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create extended-edges by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/static-vxlan-tunnels/extended-edges"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_static_vxlan_tunnels_extended_edges_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get extended-edges by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/static-vxlan-tunnels/extended-edges"

        return await self.get(url)

    async def distributed_fabric_delete_fabrics_distributed_fabric_static_vxlan_tunnels_extended_edges_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete extended-edges by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/static-vxlan-tunnels/extended-edges"

        return await self.delete(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_segment_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Create segment by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_segment_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Get segment by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}"

        return await self.get(url)

    async def distributed_fabric_delete_fabrics_distributed_fabric_segment_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Delete segment by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}"

        return await self.delete(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_segment_ipv4_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Create ipv4 by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}/ipv4"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_segment_ipv4_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Get ipv4 by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}/ipv4"

        return await self.get(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_segment_ipv6_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Create ipv6 by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}/ipv6"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_segment_ipv6_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Get ipv6 by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}/ipv6"

        return await self.get(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_segment_dhcp_relays_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Create dhcp-relays by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}/dhcp-relays"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_segment_dhcp_relays_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Get dhcp-relays by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}/dhcp-relays"

        return await self.get(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_segment_roles_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Create roles by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}/roles"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_segment_roles_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Get roles by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}/roles"

        return await self.get(url)

    async def distributed_fabric_delete_fabrics_distributed_fabric_segment_roles_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Delete roles by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}/roles"

        return await self.delete(url)

    async def distributed_fabric_create_fabrics_distributed_fabric_segment_devices_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Create devices by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}/devices"

        return await self.post(url)

    async def distributed_fabric_read_fabrics_distributed_fabric_segment_devices_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Get devices by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}/devices"

        return await self.get(url)

    async def distributed_fabric_delete_fabrics_distributed_fabric_segment_devices_by_id_v1(
        self,
        name: str = None,
        segment_name: str = None,
    ) -> Response:
        """Delete devices by ID.

        Args:
            name (str, optional): name
            segment_name (str, optional): segmentName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fabrics/{name}/segment/{segment_name}/devices"

        return await self.delete(url)

    async def dns_create_dns_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create dns by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for DNS parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Global profile for DNS parameters

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dns"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def dns_read_dns_v1(
        self,
    ) -> Response:
        """Get dns.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dns"

        return await self.get(url)

    async def dns_create_dns_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}"

        return await self.post(url)

    async def dns_read_dns_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}"

        return await self.get(url)

    async def dns_delete_dns_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}"

        return await self.delete(url)

    async def dns_create_dns_profile_domain_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create domain by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/domain/{vrf}"

        return await self.post(url)

    async def dns_read_dns_profile_domain_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get domain by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/domain/{vrf}"

        return await self.get(url)

    async def dns_delete_dns_profile_domain_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete domain by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/domain/{vrf}"

        return await self.delete(url)

    async def dns_create_dns_profile_domain_list_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create domain-list by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/domain-list/{vrf}"

        return await self.post(url)

    async def dns_read_dns_profile_domain_list_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get domain-list by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/domain-list/{vrf}"

        return await self.get(url)

    async def dns_delete_dns_profile_domain_list_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete domain-list by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/domain-list/{vrf}"

        return await self.delete(url)

    async def dns_create_dns_profile_domain_list_name_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create name by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/domain-list/{vrf}/name"

        return await self.post(url)

    async def dns_read_dns_profile_domain_list_name_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get name by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/domain-list/{vrf}/name"

        return await self.get(url)

    async def dns_delete_dns_profile_domain_list_name_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete name by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/domain-list/{vrf}/name"

        return await self.delete(url)

    async def dns_create_dns_profile_resolver_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create resolver by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/resolver/{vrf}"

        return await self.post(url)

    async def dns_read_dns_profile_resolver_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get resolver by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/resolver/{vrf}"

        return await self.get(url)

    async def dns_delete_dns_profile_resolver_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete resolver by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/resolver/{vrf}"

        return await self.delete(url)

    async def dns_create_dns_profile_resolver_name_server_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        ip: str = None,
    ) -> Response:
        """Create name-server by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/resolver/{vrf}/name-server/{ip}"

        return await self.post(url)

    async def dns_read_dns_profile_resolver_name_server_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        ip: str = None,
    ) -> Response:
        """Get name-server by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/resolver/{vrf}/name-server/{ip}"

        return await self.get(url)

    async def dns_delete_dns_profile_resolver_name_server_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        ip: str = None,
    ) -> Response:
        """Delete name-server by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/resolver/{vrf}/name-server/{ip}"

        return await self.delete(url)

    async def dns_create_dns_profile_redirect_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create redirect by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/redirect"

        return await self.post(url)

    async def dns_read_dns_profile_redirect_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get redirect by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/redirect"

        return await self.get(url)

    async def dns_create_dns_profile_redirect_server_by_id_v1(
        self,
        name: str = None,
        domain: str = None,
        ip: str = None,
    ) -> Response:
        """Create server by ID.

        Args:
            name (str, optional): name
            domain (str, optional): domain
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/redirect/server/{domain}/{ip}"

        return await self.post(url)

    async def dns_read_dns_profile_redirect_server_by_id_v1(
        self,
        name: str = None,
        domain: str = None,
        ip: str = None,
    ) -> Response:
        """Get server by ID.

        Args:
            name (str, optional): name
            domain (str, optional): domain
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/redirect/server/{domain}/{ip}"

        return await self.get(url)

    async def dns_delete_dns_profile_redirect_server_by_id_v1(
        self,
        name: str = None,
        domain: str = None,
        ip: str = None,
    ) -> Response:
        """Delete server by ID.

        Args:
            name (str, optional): name
            domain (str, optional): domain
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/redirect/server/{domain}/{ip}"

        return await self.delete(url)

    async def dns_create_dns_profile_static_host_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create static-host by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/static-host/{vrf}"

        return await self.post(url)

    async def dns_read_dns_profile_static_host_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get static-host by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/static-host/{vrf}"

        return await self.get(url)

    async def dns_delete_dns_profile_static_host_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete static-host by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/static-host/{vrf}"

        return await self.delete(url)

    async def dns_create_dns_profile_static_host_host_ip_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        hostname: str = None,
    ) -> Response:
        """Create host-ip by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            hostname (str, optional): hostname

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/static-host/{vrf}/host-ip/{hostname}"

        return await self.post(url)

    async def dns_read_dns_profile_static_host_host_ip_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        hostname: str = None,
    ) -> Response:
        """Get host-ip by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            hostname (str, optional): hostname

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/static-host/{vrf}/host-ip/{hostname}"

        return await self.get(url)

    async def dns_delete_dns_profile_static_host_host_ip_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        hostname: str = None,
    ) -> Response:
        """Delete host-ip by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            hostname (str, optional): hostname

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dns/{name}/static-host/{vrf}/host-ip/{hostname}"

        return await self.delete(url)

    async def dpi_create_dpi_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create dpi by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for DPI Configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Global profile for DPI Configurations

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dpi"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def dpi_read_dpi_v1(
        self,
    ) -> Response:
        """Get dpi.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dpi"

        return await self.get(url)

    async def dpi_create_dpi_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dpi/{name}"

        return await self.post(url)

    async def dpi_read_dpi_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dpi/{name}"

        return await self.get(url)

    async def dpi_delete_dpi_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dpi/{name}"

        return await self.delete(url)

    async def dpi_create_dpi_profile_error_page_urls_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create error-page-urls by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dpi/{name}/error-page-urls"

        return await self.post(url)

    async def dpi_read_dpi_profile_error_page_urls_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get error-page-urls by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dpi/{name}/error-page-urls"

        return await self.get(url)

    async def dpi_create_dpi_profile_error_page_urls_error_page_url_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Create error-page-url by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dpi/{name}/error-page-urls/error-page-url/{index}"

        return await self.post(url)

    async def dpi_read_dpi_profile_error_page_urls_error_page_url_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Get error-page-url by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dpi/{name}/error-page-urls/error-page-url/{index}"

        return await self.get(url)

    async def dpi_delete_dpi_profile_error_page_urls_error_page_url_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Delete error-page-url by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dpi/{name}/error-page-urls/error-page-url/{index}"

        return await self.delete(url)

    async def dpp_create_dpp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        auth_server: str = None,
    ) -> Response:
        """Create dpp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of DPP profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Device Provision Protocol Profile name.
            auth_server (str): DPP Auth server.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dpp"

        json_data = {
            'name': name,
            'auth_server': auth_server
        }

        return await self.post(url, json_data=json_data)

    async def dpp_read_dpp_v1(
        self,
    ) -> Response:
        """Get dpp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dpp"

        return await self.get(url)

    async def dpp_create_dpp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dpp/{name}"

        return await self.post(url)

    async def dpp_read_dpp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dpp/{name}"

        return await self.get(url)

    async def dpp_delete_dpp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dpp/{name}"

        return await self.delete(url)

    async def dump_server_create_dump_server_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        tftp_server: str = None,
        username: str = None,
        password: str = None,
        server_ip: str = None,
        port: int = None,
        dir: str = None,
    ) -> Response:
        """Create dump-server by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Dump Server profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Dump Server profile name.
            description (str): Dump Server profile description.
            tftp_server (str): TFTP dump server IP address
            username (str): The username of the dump collection secure copy operation
            password (str): The password of the dump collection secure copy operation
            server_ip (str): Server IP address for the dump collection secure copy operation
            port (int): The port of the dump collection secure copy operation
            dir (str): The Directory of the dump collection secure copy operation.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dump-server"

        json_data = {
            'name': name,
            'description': description,
            'tftp_server': tftp_server,
            'username': username,
            'password': password,
            'server_ip': server_ip,
            'port': port,
            'dir': dir
        }

        return await self.post(url, json_data=json_data)

    async def dump_server_read_dump_server_v1(
        self,
    ) -> Response:
        """Get dump-server.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dump-server"

        return await self.get(url)

    async def dump_server_create_dump_server_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dump-server/{name}"

        return await self.post(url)

    async def dump_server_read_dump_server_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dump-server/{name}"

        return await self.get(url)

    async def dump_server_delete_dump_server_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dump-server/{name}"

        return await self.delete(url)

    async def dynamic_arp_inspection_interface_create_dynamic_arp_inspection_interface_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create dynamic-arp-inspection-interface by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Dynamic ARP Inspection interface profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Dynamic ARP Inspection interface profile

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dynamic-arp-inspection-interface"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def dynamic_arp_inspection_interface_read_dynamic_arp_inspection_interface_v1(
        self,
    ) -> Response:
        """Get dynamic-arp-inspection-interface.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dynamic-arp-inspection-interface"

        return await self.get(url)

    async def dynamic_arp_inspection_interface_create_dynamic_arp_inspection_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dynamic-arp-inspection-interface/{name}"

        return await self.post(url)

    async def dynamic_arp_inspection_interface_read_dynamic_arp_inspection_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dynamic-arp-inspection-interface/{name}"

        return await self.get(url)

    async def dynamic_arp_inspection_interface_delete_dynamic_arp_inspection_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dynamic-arp-inspection-interface/{name}"

        return await self.delete(url)

    async def dynamic_arp_inspection_interface_create_dynamic_arp_inspection_interface_profile_dynamic_arp_inspection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create dynamic-arp-inspection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dynamic-arp-inspection-interface/{name}/dynamic-arp-inspection"

        return await self.post(url)

    async def dynamic_arp_inspection_interface_read_dynamic_arp_inspection_interface_profile_dynamic_arp_inspection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get dynamic-arp-inspection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dynamic-arp-inspection-interface/{name}/dynamic-arp-inspection"

        return await self.get(url)

    async def dynamic_arp_inspection_create_dynamic_arp_inspection_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        validate_destination_mac: bool = None,
        validate_ip: bool = None,
        validate_source_mac: bool = None,
    ) -> Response:
        """Create dynamic-arp-inspection by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Dynamic ARP Inspection profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Dynamic ARP Inspection profile name
            description (str): Dynamic ARP Inspection profile description
            enable (bool): Enable Dynamic ARP Protection globally
            validate_destination_mac (bool): Validate destination MAC address in ARP request
            validate_ip (bool): Validate source IP address in ARP request
            validate_source_mac (bool): Validate source MAC address in ARP request

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dynamic-arp-inspection"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'validate_destination_mac': validate_destination_mac,
            'validate_ip': validate_ip,
            'validate_source_mac': validate_source_mac
        }

        return await self.post(url, json_data=json_data)

    async def dynamic_arp_inspection_read_dynamic_arp_inspection_v1(
        self,
    ) -> Response:
        """Get dynamic-arp-inspection.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/dynamic-arp-inspection"

        return await self.get(url)

    async def dynamic_arp_inspection_create_dynamic_arp_inspection_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dynamic-arp-inspection/{name}"

        return await self.post(url)

    async def dynamic_arp_inspection_read_dynamic_arp_inspection_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dynamic-arp-inspection/{name}"

        return await self.get(url)

    async def dynamic_arp_inspection_delete_dynamic_arp_inspection_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/dynamic-arp-inspection/{name}"

        return await self.delete(url)

    async def est_create_est_profiles_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        server_host: str = None,
        server_port: int = None,
        server_vrf: str = None,
        server_cert: str = None,
        challenge_password: str = None,
        arbitrary_label: str = None,
        arbitrary_label_enrollment: str = None,
        arbitrary_label_reenrollment: str = None,
        organizational_unit_name: str = None,
        username: str = None,
        password: str = None,
        csr_attribute: str = None,
        enable: bool = None,
        retry_count: int = None,
        retry_interval: int = None,
        reenrollment_prior_expiry: int = None,
        cacerts_download: bool = None,
        http_auth_digest: bool = None,
    ) -> Response:
        """Create est-profiles by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of EST Profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): EST Profile name.
            server_host (str): EST Server hostname/ip-address.
            server_port (int): EST Server Port value.
            server_vrf (str): VRF for EST operation
            server_cert (str): EST Server's CA Cert name
            challenge_password (str): Challenge Password used in EST enrollment
            arbitrary_label (str): Arbitrary Label used in EST enrollment/reenrollment operations
            arbitrary_label_enrollment (str): Arbitrary Label used in EST enrollment
            arbitrary_label_reenrollment (str): Arbitrary Label used in EST reenrollment
            organizational_unit_name (str): Organization-Unit used in CSR attribute value
            username (str): Username used in EST enrollment
            password (str): Password used in EST enrollment
            csr_attribute (str): CSR Attribute used in EST enrollment  Valid Values: RSA_SHA256,
                ECDSA_PRIME256V1_SHA256, ECDSA_PRIME384R1_SHA384
            enable (bool): Enable/disable EST Profile
            retry_count (int): Retry-count for EST operations
            retry_interval (int): Retry-interval for EST operations
            reenrollment_prior_expiry (int): Number of days prior certificate expiry to initiate
                reenrollment
            cacerts_download (bool): Allows EST CA download
            http_auth_digest (bool): Enables HTTP-Digest-Auth in EST operation

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/est-profiles"

        json_data = {
            'name': name,
            'server_host': server_host,
            'server_port': server_port,
            'server_vrf': server_vrf,
            'server_cert': server_cert,
            'challenge_password': challenge_password,
            'arbitrary_label': arbitrary_label,
            'arbitrary_label_enrollment': arbitrary_label_enrollment,
            'arbitrary_label_reenrollment': arbitrary_label_reenrollment,
            'organizational_unit_name': organizational_unit_name,
            'username': username,
            'password': password,
            'csr_attribute': csr_attribute,
            'enable': enable,
            'retry_count': retry_count,
            'retry_interval': retry_interval,
            'reenrollment_prior_expiry': reenrollment_prior_expiry,
            'cacerts_download': cacerts_download,
            'http_auth_digest': http_auth_digest
        }

        return await self.post(url, json_data=json_data)

    async def est_read_est_profiles_v1(
        self,
    ) -> Response:
        """Get est-profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/est-profiles"

        return await self.get(url)

    async def est_create_est_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/est-profiles/{name}"

        return await self.post(url)

    async def est_read_est_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/est-profiles/{name}"

        return await self.get(url)

    async def est_delete_est_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/est-profiles/{name}"

        return await self.delete(url)

    async def evpn_create_evpn_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        mac_mobility_window: int = 180,
        mac_mobility_threshold: int = 5,
        arp_suppression: bool = False,
        nd_suppression: bool = False,
        redistribute_local_mac: bool = False,
        redistribute_local_svi: bool = False,
        tunnel_bridging_mode: str = 'NO_BRIDGING',
        allow_imet_relay: bool = False,
        vlan: list = None,
        vlan_aware_bundle: list = None,
    ) -> Response:
        """Create evpn by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): EVPN Profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            mac_mobility_window (int, optional): The time interval used in detecting a duplicate MAC
                address.                                                  The value can be from 5
                through 600 seconds.                                                  The default is
                180 seconds
            mac_mobility_threshold (int, optional): The number of MAC mobility events that are
                detected for a                                                     given MAC address
                within the detection-window before it is identified
                as a duplicate MAC address. Once the detection threshold is reached,
                updates for the MAC address are suppressed.
            arp_suppression (bool, optional): Enable (TRUE) or disable (FALSE) ARP suppression. If
                true                                               the  Address Resolution Protocol
                (ARP) queries for an                                               IP address that
                is not on that network are suppressed.
                Address Resolution Protocol (ARP) suppression is a
                technique used to reduce the amount of ARP broadcast
                flooding within individual VXLAN segments, that is between
                VMs connected to the same logical switch.
            nd_suppression (bool, optional): Enable (TRUE) or disable (FALSE) Neighbor Discovery
                suppression.                                              If true the NDP queries
                for an IP address that is not on that
                network are suppressed. NDP suppression is a
                technique used to reduce the amount of NDP Packets
                flooding within individual VXLAN segments, that is between
                VMs connected to the same logical switch.
            redistribute_local_mac (bool, optional): Enable (TRUE) or disable (FALSE) Type-2 route
                advertisement for                                                      local system
                MAC address of the EVPN enabled VLANs.
            redistribute_local_svi (bool, optional): Enable (TRUE) or disable (FALSE) Type-2 route
                advertisement for                                                      local IP
                address and MAC address of the SVI interfaces corresponding
                to EVPN enabled VLANs.
            tunnel_bridging_mode (str, optional): Configure bridging mode for EVPN tunnels.  Valid
                Values: NO_BRIDGING, IBGP_EBGP
            allow_imet_relay (bool, optional): Allow Inclusive Multicast Ethernet Tag (IMET) routes
                to be relayed between eBGP peers.
            vlan (list, optional): List of EVPN VLANs.
            vlan_aware_bundle (list, optional): List of EVPN VLAN aware bundles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/evpn"

        json_data = {
            'mac_mobility_window': mac_mobility_window,
            'mac_mobility_threshold': mac_mobility_threshold,
            'arp_suppression': arp_suppression,
            'nd_suppression': nd_suppression,
            'redistribute_local_mac': redistribute_local_mac,
            'redistribute_local_svi': redistribute_local_svi,
            'tunnel_bridging_mode': tunnel_bridging_mode,
            'allow_imet_relay': allow_imet_relay,
            'vlan': vlan,
            'vlan_aware_bundle': vlan_aware_bundle
        }

        return await self.post(url, json_data=json_data)

    async def evpn_read_evpn_v1(
        self,
    ) -> Response:
        """Get evpn.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/evpn"

        return await self.get(url)

    async def evpn_create_evpn_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/evpn/{name}"

        return await self.post(url)

    async def evpn_read_evpn_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/evpn/{name}"

        return await self.get(url)

    async def evpn_delete_evpn_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/evpn/{name}"

        return await self.delete(url)

    async def evpn_create_evpn_profile_evpn_global_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create evpn-global by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/evpn/{name}/evpn-global"

        return await self.post(url)

    async def evpn_read_evpn_profile_evpn_global_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get evpn-global by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/evpn/{name}/evpn-global"

        return await self.get(url)

    async def evpn_create_evpn_profile_evpn_global_vlan_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Create vlan by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/evpn/{name}/evpn-global/vlan/{id}"

        return await self.post(url)

    async def evpn_read_evpn_profile_evpn_global_vlan_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Get vlan by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/evpn/{name}/evpn-global/vlan/{id}"

        return await self.get(url)

    async def evpn_delete_evpn_profile_evpn_global_vlan_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Delete vlan by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/evpn/{name}/evpn-global/vlan/{id}"

        return await self.delete(url)

    async def evpn_create_evpn_profile_evpn_global_vlan_aware_bundle_by_id_v1(
        self,
        name: str = None,
        bundle_name: str = None,
    ) -> Response:
        """Create vlan-aware-bundle by ID.

        Args:
            name (str, optional): name
            bundle_name (str, optional): bundleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/evpn/{name}/evpn-global/vlan-aware-bundle/{bundle_name}"

        return await self.post(url)

    async def evpn_read_evpn_profile_evpn_global_vlan_aware_bundle_by_id_v1(
        self,
        name: str = None,
        bundle_name: str = None,
    ) -> Response:
        """Get vlan-aware-bundle by ID.

        Args:
            name (str, optional): name
            bundle_name (str, optional): bundleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/evpn/{name}/evpn-global/vlan-aware-bundle/{bundle_name}"

        return await self.get(url)

    async def evpn_delete_evpn_profile_evpn_global_vlan_aware_bundle_by_id_v1(
        self,
        name: str = None,
        bundle_name: str = None,
    ) -> Response:
        """Delete vlan-aware-bundle by ID.

        Args:
            name (str, optional): name
            bundle_name (str, optional): bundleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/evpn/{name}/evpn-global/vlan-aware-bundle/{bundle_name}"

        return await self.delete(url)

    async def extension_opsramp_create_opsramp_ext_instances_by_id_v1(
        self,
        instance: list,
    ) -> Response:
        """Create opsramp-ext-instances by ID.

        Args:
            instance (list): OpsRamp extension instance list.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/opsramp-ext-instances"

        json_data = {
            'instance': instance
        }

        return await self.post(url, json_data=json_data)

    async def extension_opsramp_read_opsramp_ext_instances_v1(
        self,
    ) -> Response:
        """Get opsramp-ext-instances.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/opsramp-ext-instances"

        return await self.get(url)

    async def extension_opsramp_create_opsramp_ext_instances_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/opsramp-ext-instances/{name}"

        return await self.post(url)

    async def extension_opsramp_read_opsramp_ext_instances_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/opsramp-ext-instances/{name}"

        return await self.get(url)

    async def extension_opsramp_delete_opsramp_ext_instances_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/opsramp-ext-instances/{name}"

        return await self.delete(url)

    async def extension_opsramp_create_opsramp_ext_instances_instance_oauth_cc_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create oauth-cc by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/opsramp-ext-instances/{name}/oauth-cc"

        return await self.post(url)

    async def extension_opsramp_read_opsramp_ext_instances_instance_oauth_cc_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get oauth-cc by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/opsramp-ext-instances/{name}/oauth-cc"

        return await self.get(url)

    async def extension_psm_create_psm_instances_by_id_v1(
        self,
        psm_instance: list,
    ) -> Response:
        """Create psm-instances by ID.

        Args:
            psm_instance (list): List of PSM Extension installed instances.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/psm_instances"

        json_data = {
            'psm_instance': psm_instance
        }

        return await self.post(url, json_data=json_data)

    async def extension_psm_read_psm_instances_v1(
        self,
    ) -> Response:
        """Get psm-instances.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/psm-instances"

        return await self.get(url)

    async def extension_psm_create_psm_instances_psm_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create psm-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm-instances/{name}"

        return await self.post(url)

    async def extension_psm_read_psm_instances_psm_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get psm-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm-instances/{name}"

        return await self.get(url)

    async def extension_psm_delete_psm_instances_psm_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete psm-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm-instances/{name}"

        return await self.delete(url)

    async def extension_psm_create_psm_instances_psm_instance_psm_endpoint_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create psm-endpoint by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm-instances/{name}/psm-endpoint"

        return await self.post(url)

    async def extension_psm_read_psm_instances_psm_instance_psm_endpoint_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get psm-endpoint by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm-instances/{name}/psm-endpoint"

        return await self.get(url)

    async def extension_psm_create_psm_instances_psm_instance_psm_endpoint_hosts_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create hosts by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm-instances/{name}/psm-endpoint/hosts"

        return await self.post(url)

    async def extension_psm_read_psm_instances_psm_instance_psm_endpoint_hosts_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get hosts by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm-instances/{name}/psm-endpoint/hosts"

        return await self.get(url)

    async def extension_psm_delete_psm_instances_psm_instance_psm_endpoint_hosts_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete hosts by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm-instances/{name}/psm-endpoint/hosts"

        return await self.delete(url)

    async def extension_psm_create_psm_instances_psm_instance_psm_agent_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create psm-agent by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm-instances/{name}/psm-agent"

        return await self.post(url)

    async def extension_psm_read_psm_instances_psm_instance_psm_agent_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get psm-agent by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm-instances/{name}/psm-agent"

        return await self.get(url)

    async def extension_psm_create_psm_instances_psm_instance_scopes_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create scopes by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm-instances/{name}/scopes"

        return await self.post(url)

    async def extension_psm_read_psm_instances_psm_instance_scopes_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get scopes by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm-instances/{name}/scopes"

        return await self.get(url)

    async def extension_psm_delete_psm_instances_psm_instance_scopes_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete scopes by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm-instances/{name}/scopes"

        return await self.delete(url)

    async def extension_splunk_create_splunk_instances_by_id_v1(
        self,
        instance: list,
    ) -> Response:
        """Create splunk-instances by ID.

        Args:
            instance (list): List of Splunk Extension installed instances.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/splunk-instances"

        json_data = {
            'instance': instance
        }

        return await self.post(url, json_data=json_data)

    async def extension_splunk_read_splunk_instances_v1(
        self,
    ) -> Response:
        """Get splunk-instances.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/splunk-instances"

        return await self.get(url)

    async def extension_splunk_create_splunk_instances_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/splunk-instances/{name}"

        return await self.post(url)

    async def extension_splunk_read_splunk_instances_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/splunk-instances/{name}"

        return await self.get(url)

    async def extension_splunk_delete_splunk_instances_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/splunk-instances/{name}"

        return await self.delete(url)

    async def extension_splunk_create_splunk_instances_instance_ds_index_map_by_id_v1(
        self,
        name: str = None,
        ds: str = None,
    ) -> Response:
        """Create ds-index-map by ID.

        Args:
            name (str, optional): name
            ds (str, optional): ds

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/splunk-instances/{name}/ds-index-map/{ds}"

        return await self.post(url)

    async def extension_splunk_read_splunk_instances_instance_ds_index_map_by_id_v1(
        self,
        name: str = None,
        ds: str = None,
    ) -> Response:
        """Get ds-index-map by ID.

        Args:
            name (str, optional): name
            ds (str, optional): ds

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/splunk-instances/{name}/ds-index-map/{ds}"

        return await self.get(url)

    async def extension_splunk_delete_splunk_instances_instance_ds_index_map_by_id_v1(
        self,
        name: str = None,
        ds: str = None,
    ) -> Response:
        """Delete ds-index-map by ID.

        Args:
            name (str, optional): name
            ds (str, optional): ds

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/splunk-instances/{name}/ds-index-map/{ds}"

        return await self.delete(url)

    async def extension_uem_ivanti_create_uem_ivanti_ext_instances_by_id_v1(
        self,
        uem_ivanti_instance: list,
    ) -> Response:
        """Create uem-ivanti-ext-instances by ID.

        Args:
            uem_ivanti_instance (list): Ivanti UEM extension instance list.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/uem-ivanti-ext-instances"

        json_data = {
            'uem_ivanti_instance': uem_ivanti_instance
        }

        return await self.post(url, json_data=json_data)

    async def extension_uem_ivanti_read_uem_ivanti_ext_instances_v1(
        self,
    ) -> Response:
        """Get uem-ivanti-ext-instances.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/uem-ivanti-ext-instances"

        return await self.get(url)

    async def extension_uem_ivanti_create_uem_ivanti_ext_instances_uem_ivanti_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create uem-ivanti-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-ivanti-ext-instances/{name}"

        return await self.post(url)

    async def extension_uem_ivanti_read_uem_ivanti_ext_instances_uem_ivanti_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get uem-ivanti-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-ivanti-ext-instances/{name}"

        return await self.get(url)

    async def extension_uem_ivanti_delete_uem_ivanti_ext_instances_uem_ivanti_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete uem-ivanti-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-ivanti-ext-instances/{name}"

        return await self.delete(url)

    async def extension_uem_ivanti_create_uem_ivanti_ext_instances_uem_ivanti_instance_basic_auth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create basic-auth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-ivanti-ext-instances/{name}/basic-auth"

        return await self.post(url)

    async def extension_uem_ivanti_read_uem_ivanti_ext_instances_uem_ivanti_instance_basic_auth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get basic-auth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-ivanti-ext-instances/{name}/basic-auth"

        return await self.get(url)

    async def extension_uem_ivanti_create_uem_ivanti_ext_instances_uem_ivanti_instance_oauth2_cc_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create oauth2-cc by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-ivanti-ext-instances/{name}/oauth2-cc"

        return await self.post(url)

    async def extension_uem_ivanti_read_uem_ivanti_ext_instances_uem_ivanti_instance_oauth2_cc_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get oauth2-cc by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-ivanti-ext-instances/{name}/oauth2-cc"

        return await self.get(url)

    async def extension_uem_msintune_create_uem_msintune_ext_instances_by_id_v1(
        self,
        uem_msintune_instance: list,
    ) -> Response:
        """Create uem-msintune-ext-instances by ID.

        Args:
            uem_msintune_instance (list): Microsoft Intune extension instance list.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/uem-msintune-ext-instances"

        json_data = {
            'uem_msintune_instance': uem_msintune_instance
        }

        return await self.post(url, json_data=json_data)

    async def extension_uem_msintune_read_uem_msintune_ext_instances_v1(
        self,
    ) -> Response:
        """Get uem-msintune-ext-instances.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/uem-msintune-ext-instances"

        return await self.get(url)

    async def extension_uem_msintune_create_uem_msintune_ext_instances_uem_msintune_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create uem-msintune-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-msintune-ext-instances/{name}"

        return await self.post(url)

    async def extension_uem_msintune_read_uem_msintune_ext_instances_uem_msintune_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get uem-msintune-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-msintune-ext-instances/{name}"

        return await self.get(url)

    async def extension_uem_msintune_delete_uem_msintune_ext_instances_uem_msintune_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete uem-msintune-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-msintune-ext-instances/{name}"

        return await self.delete(url)

    async def extension_uem_msintune_create_uem_msintune_ext_instances_uem_msintune_instance_basic_auth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create basic-auth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-msintune-ext-instances/{name}/basic-auth"

        return await self.post(url)

    async def extension_uem_msintune_read_uem_msintune_ext_instances_uem_msintune_instance_basic_auth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get basic-auth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-msintune-ext-instances/{name}/basic-auth"

        return await self.get(url)

    async def extension_uem_msintune_create_uem_msintune_ext_instances_uem_msintune_instance_oauth2_cc_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create oauth2-cc by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-msintune-ext-instances/{name}/oauth2-cc"

        return await self.post(url)

    async def extension_uem_msintune_read_uem_msintune_ext_instances_uem_msintune_instance_oauth2_cc_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get oauth2-cc by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-msintune-ext-instances/{name}/oauth2-cc"

        return await self.get(url)

    async def extension_uem_vmware_create_uem_vmware_ext_instances_by_id_v1(
        self,
        uem_vmware_instance: list,
    ) -> Response:
        """Create uem-vmware-ext-instances by ID.

        Args:
            uem_vmware_instance (list): VMware Workspace ONE UEM extension instance list.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/uem-vmware-ext-instances"

        json_data = {
            'uem_vmware_instance': uem_vmware_instance
        }

        return await self.post(url, json_data=json_data)

    async def extension_uem_vmware_read_uem_vmware_ext_instances_v1(
        self,
    ) -> Response:
        """Get uem-vmware-ext-instances.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/uem-vmware-ext-instances"

        return await self.get(url)

    async def extension_uem_vmware_create_uem_vmware_ext_instances_uem_vmware_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create uem-vmware-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-vmware-ext-instances/{name}"

        return await self.post(url)

    async def extension_uem_vmware_read_uem_vmware_ext_instances_uem_vmware_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get uem-vmware-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-vmware-ext-instances/{name}"

        return await self.get(url)

    async def extension_uem_vmware_delete_uem_vmware_ext_instances_uem_vmware_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete uem-vmware-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-vmware-ext-instances/{name}"

        return await self.delete(url)

    async def extension_uem_vmware_create_uem_vmware_ext_instances_uem_vmware_instance_basic_auth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create basic-auth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-vmware-ext-instances/{name}/basic-auth"

        return await self.post(url)

    async def extension_uem_vmware_read_uem_vmware_ext_instances_uem_vmware_instance_basic_auth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get basic-auth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-vmware-ext-instances/{name}/basic-auth"

        return await self.get(url)

    async def extension_uem_vmware_create_uem_vmware_ext_instances_uem_vmware_instance_oauth2_cc_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create oauth2-cc by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-vmware-ext-instances/{name}/oauth2-cc"

        return await self.post(url)

    async def extension_uem_vmware_read_uem_vmware_ext_instances_uem_vmware_instance_oauth2_cc_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get oauth2-cc by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/uem-vmware-ext-instances/{name}/oauth2-cc"

        return await self.get(url)

    async def extension_vsphere_create_vsphere_instances_by_id_v1(
        self,
        vsphere_instance: list,
    ) -> Response:
        """Create vsphere-instances by ID.

        Args:
            vsphere_instance (list): List of vSphere Extension installed instances.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vsphere_instances"

        json_data = {
            'vsphere_instance': vsphere_instance
        }

        return await self.post(url, json_data=json_data)

    async def extension_vsphere_read_vsphere_instances_v1(
        self,
    ) -> Response:
        """Get vsphere-instances.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vsphere-instances"

        return await self.get(url)

    async def extension_vsphere_create_vsphere_instances_vsphere_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create vsphere-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vsphere-instances/{name}"

        return await self.post(url)

    async def extension_vsphere_read_vsphere_instances_vsphere_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get vsphere-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vsphere-instances/{name}"

        return await self.get(url)

    async def extension_vsphere_delete_vsphere_instances_vsphere_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete vsphere-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vsphere-instances/{name}"

        return await self.delete(url)

    async def extension_vsphere_create_vsphere_instances_vsphere_instance_endpoint_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create endpoint by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vsphere-instances/{name}/endpoint"

        return await self.post(url)

    async def extension_vsphere_read_vsphere_instances_vsphere_instance_endpoint_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get endpoint by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vsphere-instances/{name}/endpoint"

        return await self.get(url)

    async def extension_vsphere_create_vsphere_instances_vsphere_instance_agent_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create agent by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vsphere-instances/{name}/agent"

        return await self.post(url)

    async def extension_vsphere_read_vsphere_instances_vsphere_instance_agent_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get agent by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vsphere-instances/{name}/agent"

        return await self.get(url)

    async def external_storage_create_external_storage_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create external-storage by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for External storage and External storage parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Global profile for External storage and External storage parameters

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/external-storage"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def external_storage_read_external_storage_v1(
        self,
    ) -> Response:
        """Get external-storage.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/external-storage"

        return await self.get(url)

    async def external_storage_create_external_storage_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/external-storage/{name}"

        return await self.post(url)

    async def external_storage_read_external_storage_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/external-storage/{name}"

        return await self.get(url)

    async def external_storage_delete_external_storage_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/external-storage/{name}"

        return await self.delete(url)

    async def external_storage_create_external_storage_profile_store_by_id_v1(
        self,
        name: str = None,
        store_name: str = None,
    ) -> Response:
        """Create store by ID.

        Args:
            name (str, optional): name
            store_name (str, optional): store_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/external-storage/{name}/store/{store_name}"

        return await self.post(url)

    async def external_storage_read_external_storage_profile_store_by_id_v1(
        self,
        name: str = None,
        store_name: str = None,
    ) -> Response:
        """Get store by ID.

        Args:
            name (str, optional): name
            store_name (str, optional): store_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/external-storage/{name}/store/{store_name}"

        return await self.get(url)

    async def external_storage_delete_external_storage_profile_store_by_id_v1(
        self,
        name: str = None,
        store_name: str = None,
    ) -> Response:
        """Delete store by ID.

        Args:
            name (str, optional): name
            store_name (str, optional): store_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/external-storage/{name}/store/{store_name}"

        return await self.delete(url)

    async def fault_monitor_create_fault_monitor_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create fault-monitor by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of Fault monitor configurations.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of Fault monitor configurations.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/fault-monitor"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def fault_monitor_read_fault_monitor_v1(
        self,
    ) -> Response:
        """Get fault-monitor.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/fault-monitor"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}"

        return await self.get(url)

    async def fault_monitor_delete_fault_monitor_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}"

        return await self.delete(url)

    async def fault_monitor_create_fault_monitor_profile_all_faults_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create all-faults by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/all-faults"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_all_faults_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get all-faults by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/all-faults"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_link_flap_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create link-flap by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/link-flap"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_link_flap_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get link-flap by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/link-flap"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_excessive_oversize_packets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create excessive-oversize-packets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-oversize-packets"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_excessive_oversize_packets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get excessive-oversize-packets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-oversize-packets"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_excessive_fragments_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create excessive-fragments by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-fragments"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_excessive_fragments_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get excessive-fragments by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-fragments"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_excessive_crc_errors_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create excessive-crc-errors by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-crc-errors"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_excessive_crc_errors_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get excessive-crc-errors by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-crc-errors"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_excessive_jabbers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create excessive-jabbers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-jabbers"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_excessive_jabbers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get excessive-jabbers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-jabbers"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_excessive_late_collisions_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create excessive-late-collisions by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-late-collisions"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_excessive_late_collisions_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get excessive-late-collisions by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-late-collisions"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_excessive_collisions_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create excessive-collisions by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-collisions"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_excessive_collisions_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get excessive-collisions by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-collisions"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_excessive_tx_drops_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create excessive-tx-drops by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-tx-drops"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_excessive_tx_drops_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get excessive-tx-drops by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-tx-drops"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_excessive_fc_triggers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create excessive-fc-triggers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-fc-triggers"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_excessive_fc_triggers_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get excessive-fc-triggers by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-fc-triggers"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_excessive_alignment_errors_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create excessive-alignment-errors by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-alignment-errors"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_excessive_alignment_errors_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get excessive-alignment-errors by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-alignment-errors"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_bad_transceiver_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create bad-transceiver by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/bad-transceiver"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_bad_transceiver_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get bad-transceiver by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/bad-transceiver"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_over_bandwidth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create over-bandwidth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/over-bandwidth"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_over_bandwidth_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get over-bandwidth by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/over-bandwidth"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_link_loss_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create link-loss by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/link-loss"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_link_loss_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get link-loss by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/link-loss"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_half_duplex_mismatch_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create half-duplex-mismatch by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/half-duplex-mismatch"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_half_duplex_mismatch_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get half-duplex-mismatch by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/half-duplex-mismatch"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_full_duplex_mismatch_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create full-duplex-mismatch by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/full-duplex-mismatch"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_full_duplex_mismatch_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get full-duplex-mismatch by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/full-duplex-mismatch"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_excessive_broadcasts_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create excessive-broadcasts by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-broadcasts"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_excessive_broadcasts_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get excessive-broadcasts by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-broadcasts"

        return await self.get(url)

    async def fault_monitor_create_fault_monitor_profile_excessive_multicasts_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create excessive-multicasts by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-multicasts"

        return await self.post(url)

    async def fault_monitor_read_fault_monitor_profile_excessive_multicasts_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get excessive-multicasts by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/fault-monitor/{name}/excessive-multicasts"

        return await self.get(url)

    async def feature_property_create_features_by_id_v1(
        self,
        enable_role_enforcement: bool,
    ) -> Response:
        """Create features by ID.

        Args:
            enable_role_enforcement (bool): Enable role-to-role-enforcement.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/features"

        json_data = {
            'enable_role_enforcement': enable_role_enforcement
        }

        return await self.post(url, json_data=json_data)

    async def feature_property_read_features_v1(
        self,
    ) -> Response:
        """Get features.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/features"

        return await self.get(url)

    async def feature_property_create_features_role_feature_by_id_v1(
        self,
        enable_role_enforcement: bool,
    ) -> Response:
        """Create role-feature by ID.

        Args:
            enable_role_enforcement (bool): Enable role-to-role-enforcement.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/features/role-feature"

        json_data = {
            'enable_role_enforcement': enable_role_enforcement
        }

        return await self.post(url, json_data=json_data)

    async def feature_property_read_features_role_feature_v1(
        self,
    ) -> Response:
        """Get role-feature.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/features/role-feature"

        return await self.get(url)

    async def firewall_cp_create_firewall_cp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        cp_policy_rule: list = None,
    ) -> Response:
        """Create firewall-cp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Firewall Control Plane profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Firewall CP profile name.
            description (str): Firewall CP profile description.
            cp_policy_rule (list): List of Firewall Control Plane policies.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/firewall-cp"

        json_data = {
            'name': name,
            'description': description,
            'cp_policy_rule': cp_policy_rule
        }

        return await self.post(url, json_data=json_data)

    async def firewall_cp_read_firewall_cp_v1(
        self,
    ) -> Response:
        """Get firewall-cp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/firewall-cp"

        return await self.get(url)

    async def firewall_cp_create_firewall_cp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall-cp/{name}"

        return await self.post(url)

    async def firewall_cp_read_firewall_cp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall-cp/{name}"

        return await self.get(url)

    async def firewall_cp_delete_firewall_cp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall-cp/{name}"

        return await self.delete(url)

    async def firewall_cp_create_firewall_cp_profile_cp_policy_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create cp-policy-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall-cp/{name}/cp-policy-rule/{position}"

        return await self.post(url)

    async def firewall_cp_read_firewall_cp_profile_cp_policy_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get cp-policy-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall-cp/{name}/cp-policy-rule/{position}"

        return await self.get(url)

    async def firewall_cp_delete_firewall_cp_profile_cp_policy_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Delete cp-policy-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall-cp/{name}/cp-policy-rule/{position}"

        return await self.delete(url)

    async def firewall_cp_create_firewall_cp_profile_cp_policy_rule_host_address_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create host-address by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall-cp/{name}/cp-policy-rule/{position}/host-address"

        return await self.post(url)

    async def firewall_cp_read_firewall_cp_profile_cp_policy_rule_host_address_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get host-address by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall-cp/{name}/cp-policy-rule/{position}/host-address"

        return await self.get(url)

    async def firewall_cp_create_firewall_cp_profile_cp_policy_rule_network_address_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create network-address by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall-cp/{name}/cp-policy-rule/{position}/network-address"

        return await self.post(url)

    async def firewall_cp_read_firewall_cp_profile_cp_policy_rule_network_address_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get network-address by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall-cp/{name}/cp-policy-rule/{position}/network-address"

        return await self.get(url)

    async def firewall_create_firewall_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create firewall by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Firewall profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Firewall profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/firewall"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def firewall_read_firewall_v1(
        self,
    ) -> Response:
        """Get firewall.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/firewall"

        return await self.get(url)

    async def firewall_create_firewall_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}"

        return await self.post(url)

    async def firewall_read_firewall_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}"

        return await self.get(url)

    async def firewall_delete_firewall_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}"

        return await self.delete(url)

    async def firewall_create_firewall_profile_attack_rate_by_id_v1(
        self,
        name: str = None,
        protocol: str = None,
    ) -> Response:
        """Create attack-rate by ID.

        Args:
            name (str, optional): name
            protocol (str, optional): protocol

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/attack-rate/{protocol}"

        return await self.post(url)

    async def firewall_read_firewall_profile_attack_rate_by_id_v1(
        self,
        name: str = None,
        protocol: str = None,
    ) -> Response:
        """Get attack-rate by ID.

        Args:
            name (str, optional): name
            protocol (str, optional): protocol

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/attack-rate/{protocol}"

        return await self.get(url)

    async def firewall_delete_firewall_profile_attack_rate_by_id_v1(
        self,
        name: str = None,
        protocol: str = None,
    ) -> Response:
        """Delete attack-rate by ID.

        Args:
            name (str, optional): name
            protocol (str, optional): protocol

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/attack-rate/{protocol}"

        return await self.delete(url)

    async def firewall_create_firewall_profile_cp_bandwidth_contract_by_id_v1(
        self,
        name: str = None,
        protocol: str = None,
    ) -> Response:
        """Create cp-bandwidth-contract by ID.

        Args:
            name (str, optional): name
            protocol (str, optional): protocol

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/cp-bandwidth-contract/{protocol}"

        return await self.post(url)

    async def firewall_read_firewall_profile_cp_bandwidth_contract_by_id_v1(
        self,
        name: str = None,
        protocol: str = None,
    ) -> Response:
        """Get cp-bandwidth-contract by ID.

        Args:
            name (str, optional): name
            protocol (str, optional): protocol

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/cp-bandwidth-contract/{protocol}"

        return await self.get(url)

    async def firewall_delete_firewall_profile_cp_bandwidth_contract_by_id_v1(
        self,
        name: str = None,
        protocol: str = None,
    ) -> Response:
        """Delete cp-bandwidth-contract by ID.

        Args:
            name (str, optional): name
            protocol (str, optional): protocol

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/cp-bandwidth-contract/{protocol}"

        return await self.delete(url)

    async def firewall_create_firewall_profile_intra_vlan_traffic_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create intra-vlan-traffic by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/intra-vlan-traffic"

        return await self.post(url)

    async def firewall_read_firewall_profile_intra_vlan_traffic_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get intra-vlan-traffic by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/intra-vlan-traffic"

        return await self.get(url)

    async def firewall_create_firewall_profile_intra_vlan_traffic_wired_server_mac_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create wired-server-mac by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/intra-vlan-traffic/wired-server-mac"

        return await self.post(url)

    async def firewall_read_firewall_profile_intra_vlan_traffic_wired_server_mac_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get wired-server-mac by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/intra-vlan-traffic/wired-server-mac"

        return await self.get(url)

    async def firewall_delete_firewall_profile_intra_vlan_traffic_wired_server_mac_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete wired-server-mac by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/intra-vlan-traffic/wired-server-mac"

        return await self.delete(url)

    async def firewall_create_firewall_profile_intra_vlan_traffic_wired_server_ip_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create wired-server-ip by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/intra-vlan-traffic/wired-server-ip"

        return await self.post(url)

    async def firewall_read_firewall_profile_intra_vlan_traffic_wired_server_ip_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get wired-server-ip by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/intra-vlan-traffic/wired-server-ip"

        return await self.get(url)

    async def firewall_delete_firewall_profile_intra_vlan_traffic_wired_server_ip_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete wired-server-ip by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/intra-vlan-traffic/wired-server-ip"

        return await self.delete(url)

    async def firewall_create_firewall_profile_mcast_red_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create mcast-red by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/mcast-red"

        return await self.post(url)

    async def firewall_read_firewall_profile_mcast_red_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get mcast-red by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/firewall/{name}/mcast-red"

        return await self.get(url)

    async def firmware_management_create_device_firmware_by_id_v1(
        self,
        software_update_rollback_timer: int = 30,
        software_update_rollback_timer_enable: bool = False,
    ) -> Response:
        """Create device-firmware by ID.

        Args:
            software_update_rollback_timer (int, optional): Rollback timer value in minutes.
            software_update_rollback_timer_enable (bool, optional): Enables the ISSU rollback timer.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/device-firmware"

        json_data = {
            'software_update_rollback_timer': software_update_rollback_timer,
            'software_update_rollback_timer_enable': software_update_rollback_timer_enable
        }

        return await self.post(url, json_data=json_data)

    async def firmware_management_read_device_firmware_v1(
        self,
    ) -> Response:
        """Get device-firmware.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/device-firmware"

        return await self.get(url)

    async def firmware_management_create_device_firmware_cx_switch_firmware_by_id_v1(
        self,
        software_update_rollback_timer: int,
        software_update_rollback_timer_enable: bool,
    ) -> Response:
        """Create cx-switch-firmware by ID.

        Args:
            software_update_rollback_timer (int): Rollback timer value in minutes.
            software_update_rollback_timer_enable (bool): Enables the ISSU rollback timer.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/device-firmware/cx-switch-firmware"

        json_data = {
            'software_update_rollback_timer': software_update_rollback_timer,
            'software_update_rollback_timer_enable': software_update_rollback_timer_enable
        }

        return await self.post(url, json_data=json_data)

    async def firmware_management_read_device_firmware_cx_switch_firmware_v1(
        self,
    ) -> Response:
        """Get cx-switch-firmware.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/device-firmware/cx-switch-firmware"

        return await self.get(url)

    async def firmware_management_create_device_firmware_cx_switch_firmware_issu_by_id_v1(
        self,
        software_update_rollback_timer: int,
        software_update_rollback_timer_enable: bool,
    ) -> Response:
        """Create issu by ID.

        Args:
            software_update_rollback_timer (int): Rollback timer value in minutes.
            software_update_rollback_timer_enable (bool): Enables the ISSU rollback timer.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/device-firmware/cx-switch-firmware/issu"

        json_data = {
            'software_update_rollback_timer': software_update_rollback_timer,
            'software_update_rollback_timer_enable': software_update_rollback_timer_enable
        }

        return await self.post(url, json_data=json_data)

    async def firmware_management_read_device_firmware_cx_switch_firmware_issu_v1(
        self,
    ) -> Response:
        """Get issu.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/device-firmware/cx-switch-firmware/issu"

        return await self.get(url)

    async def flow_tracking_create_flow_tracking_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        tcp_ageout: int = None,
        udp_ageout: int = None,
        interface_flow_limit: int = None,
    ) -> Response:
        """Create flow-tracking by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for Flow-tracking Configuration
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Flow-Tracking profile name.
            description (str): Flow-Tracking profile description.
            enable (bool): Enable flow tracking on this device.
            tcp_ageout (int): Flow age-out time in seconds for established TCP Flows.
            udp_ageout (int): UDP ageout time in seconds for established UDP Flows.
            interface_flow_limit (int): Number of concurrent flows allowed to be in hardware on a
                per interface basis.                                         When not set, no limit
                is enforced.                                         This is only applicable to
                interfaces, where flow tracking is operationally enabled.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/flow-tracking"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'tcp_ageout': tcp_ageout,
            'udp_ageout': udp_ageout,
            'interface_flow_limit': interface_flow_limit
        }

        return await self.post(url, json_data=json_data)

    async def flow_tracking_read_flow_tracking_v1(
        self,
    ) -> Response:
        """Get flow-tracking.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/flow-tracking"

        return await self.get(url)

    async def flow_tracking_create_flow_tracking_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/flow-tracking/{name}"

        return await self.post(url)

    async def flow_tracking_read_flow_tracking_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/flow-tracking/{name}"

        return await self.get(url)

    async def flow_tracking_delete_flow_tracking_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/flow-tracking/{name}"

        return await self.delete(url)

    async def gw_cluster_intent_create_gw_cluster_mode_config_by_id_v1(
        self,
        cluster_mode: str,
    ) -> Response:
        """Create gw-cluster-mode-config by ID.

        Args:
            cluster_mode (str): Cluster-Mode decides how the cluster profiles are formed
                automatically. Setting cluster-mode type to CM_MANUAL will disable the auto-
                formation of the cluster profiles.  Valid Values: CM_SITE, CM_DEVICE_GROUP,
                CM_MANUAL

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gw-cluster_mode-config"

        json_data = {
            'cluster_mode': cluster_mode
        }

        return await self.post(url, json_data=json_data)

    async def gw_cluster_intent_read_gw_cluster_mode_config_v1(
        self,
    ) -> Response:
        """Get gw-cluster-mode-config.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gw-cluster-mode-config"

        return await self.get(url)

    async def gw_cluster_create_gateway_clusters_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        vlan: int = None,
        id: int = 220,
        passphrase: str = None,
    ) -> Response:
        """Create gateway-clusters by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of GW Cluster Profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            vlan (int, optional): VRRP VLAN corresponding to the VIP. Used for COA operations.
            id (int, optional): Specifies the starting VRRP ID for cluster members.
            passphrase (str, optional): VRRP Passphrase.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gateway-clusters"

        json_data = {
            'vlan': vlan,
            'id': id,
            'passphrase': passphrase
        }

        return await self.post(url, json_data=json_data)

    async def gw_cluster_read_gateway_clusters_v1(
        self,
    ) -> Response:
        """Get gateway-clusters.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gateway-clusters"

        return await self.get(url)

    async def gw_cluster_create_gateway_clusters_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gateway-clusters/{name}"

        return await self.post(url)

    async def gw_cluster_read_gateway_clusters_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gateway-clusters/{name}"

        return await self.get(url)

    async def gw_cluster_delete_gateway_clusters_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gateway-clusters/{name}"

        return await self.delete(url)

    async def gw_cluster_create_gateway_clusters_profile_ipv4_gateways_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Create ipv4-gateways by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gateway-clusters/{name}/ipv4-gateways/{mac}"

        return await self.post(url)

    async def gw_cluster_read_gateway_clusters_profile_ipv4_gateways_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Get ipv4-gateways by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gateway-clusters/{name}/ipv4-gateways/{mac}"

        return await self.get(url)

    async def gw_cluster_delete_gateway_clusters_profile_ipv4_gateways_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Delete ipv4-gateways by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gateway-clusters/{name}/ipv4-gateways/{mac}"

        return await self.delete(url)

    async def gw_cluster_create_gateway_clusters_profile_ipv6_gateways_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Create ipv6-gateways by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gateway-clusters/{name}/ipv6-gateways/{mac}"

        return await self.post(url)

    async def gw_cluster_read_gateway_clusters_profile_ipv6_gateways_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Get ipv6-gateways by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gateway-clusters/{name}/ipv6-gateways/{mac}"

        return await self.get(url)

    async def gw_cluster_delete_gateway_clusters_profile_ipv6_gateways_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Delete ipv6-gateways by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gateway-clusters/{name}/ipv6-gateways/{mac}"

        return await self.delete(url)

    async def gw_cluster_create_gateway_clusters_profile_coa_vrrp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create coa-vrrp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gateway-clusters/{name}/coa-vrrp"

        return await self.post(url)

    async def gw_cluster_read_gateway_clusters_profile_coa_vrrp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get coa-vrrp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gateway-clusters/{name}/coa-vrrp"

        return await self.get(url)

    async def gw_idps_create_gw_idps_by_id_v1(
        self,
        idps_name: str,
        system_profile: list,
        skip_scan: list,
        idps_strategy: list,
    ) -> Response:
        """Create gw-idps by ID.

        Args:
            idps_name (str): Gateway IDPS profile name.
            system_profile (list): Gateway IDPS system profiles.
            skip_scan (list): Gateway IDPS skip-scan setting.
            idps_strategy (list): Gateway IDPS strategy.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gw-idps"

        json_data = {
            'idps_name': idps_name,
            'system_profile': system_profile,
            'skip_scan': skip_scan,
            'idps_strategy': idps_strategy
        }

        return await self.post(url, json_data=json_data)

    async def gw_idps_read_gw_idps_v1(
        self,
    ) -> Response:
        """Get gw-idps.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gw-idps"

        return await self.get(url)

    async def gw_idps_create_gw_idps_idps_by_id_v1(
        self,
        idps_name: str = None,
    ) -> Response:
        """Create idps by ID.

        Args:
            idps_name (str, optional): idpsName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}"

        return await self.post(url)

    async def gw_idps_read_gw_idps_idps_by_id_v1(
        self,
        idps_name: str = None,
    ) -> Response:
        """Get idps by ID.

        Args:
            idps_name (str, optional): idpsName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}"

        return await self.get(url)

    async def gw_idps_delete_gw_idps_idps_by_id_v1(
        self,
        idps_name: str = None,
    ) -> Response:
        """Delete idps by ID.

        Args:
            idps_name (str, optional): idpsName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}"

        return await self.delete(url)

    async def gw_idps_create_gw_idps_idps_system_profile_by_id_v1(
        self,
        idps_name: str = None,
        sys_pro_fname: str = None,
    ) -> Response:
        """Create system-profile by ID.

        Args:
            idps_name (str, optional): idpsName
            sys_pro_fname (str, optional): sysProfName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/system-profile/{sys_pro_fname}"

        return await self.post(url)

    async def gw_idps_read_gw_idps_idps_system_profile_by_id_v1(
        self,
        idps_name: str = None,
        sys_pro_fname: str = None,
    ) -> Response:
        """Get system-profile by ID.

        Args:
            idps_name (str, optional): idpsName
            sys_pro_fname (str, optional): sysProfName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/system-profile/{sys_pro_fname}"

        return await self.get(url)

    async def gw_idps_delete_gw_idps_idps_system_profile_by_id_v1(
        self,
        idps_name: str = None,
        sys_pro_fname: str = None,
    ) -> Response:
        """Delete system-profile by ID.

        Args:
            idps_name (str, optional): idpsName
            sys_pro_fname (str, optional): sysProfName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/system-profile/{sys_pro_fname}"

        return await self.delete(url)

    async def gw_idps_create_gw_idps_idps_skip_scan_by_id_v1(
        self,
        idps_name: str = None,
        skip_sca_nname: str = None,
    ) -> Response:
        """Create skip-scan by ID.

        Args:
            idps_name (str, optional): idpsName
            skip_sca_nname (str, optional): skipScanName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/skip-scan/{skip_sca_nname}"

        return await self.post(url)

    async def gw_idps_read_gw_idps_idps_skip_scan_by_id_v1(
        self,
        idps_name: str = None,
        skip_sca_nname: str = None,
    ) -> Response:
        """Get skip-scan by ID.

        Args:
            idps_name (str, optional): idpsName
            skip_sca_nname (str, optional): skipScanName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/skip-scan/{skip_sca_nname}"

        return await self.get(url)

    async def gw_idps_delete_gw_idps_idps_skip_scan_by_id_v1(
        self,
        idps_name: str = None,
        skip_sca_nname: str = None,
    ) -> Response:
        """Delete skip-scan by ID.

        Args:
            idps_name (str, optional): idpsName
            skip_sca_nname (str, optional): skipScanName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/skip-scan/{skip_sca_nname}"

        return await self.delete(url)

    async def gw_idps_create_gw_idps_idps_skip_scan_port_number_by_id_v1(
        self,
        idps_name: str = None,
        skip_sca_nname: str = None,
    ) -> Response:
        """Create port-number by ID.

        Args:
            idps_name (str, optional): idpsName
            skip_sca_nname (str, optional): skipScanName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/skip-scan/{skip_sca_nname}/port-number"

        return await self.post(url)

    async def gw_idps_read_gw_idps_idps_skip_scan_port_number_by_id_v1(
        self,
        idps_name: str = None,
        skip_sca_nname: str = None,
    ) -> Response:
        """Get port-number by ID.

        Args:
            idps_name (str, optional): idpsName
            skip_sca_nname (str, optional): skipScanName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/skip-scan/{skip_sca_nname}/port-number"

        return await self.get(url)

    async def gw_idps_delete_gw_idps_idps_skip_scan_port_number_by_id_v1(
        self,
        idps_name: str = None,
        skip_sca_nname: str = None,
    ) -> Response:
        """Delete port-number by ID.

        Args:
            idps_name (str, optional): idpsName
            skip_sca_nname (str, optional): skipScanName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/skip-scan/{skip_sca_nname}/port-number"

        return await self.delete(url)

    async def gw_idps_create_gw_idps_idps_idps_strategy_by_id_v1(
        self,
        idps_name: str = None,
        strt_name: str = None,
    ) -> Response:
        """Create idps-strategy by ID.

        Args:
            idps_name (str, optional): idpsName
            strt_name (str, optional): strtName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/idps-strategy/{strt_name}"

        return await self.post(url)

    async def gw_idps_read_gw_idps_idps_idps_strategy_by_id_v1(
        self,
        idps_name: str = None,
        strt_name: str = None,
    ) -> Response:
        """Get idps-strategy by ID.

        Args:
            idps_name (str, optional): idpsName
            strt_name (str, optional): strtName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/idps-strategy/{strt_name}"

        return await self.get(url)

    async def gw_idps_delete_gw_idps_idps_idps_strategy_by_id_v1(
        self,
        idps_name: str = None,
        strt_name: str = None,
    ) -> Response:
        """Delete idps-strategy by ID.

        Args:
            idps_name (str, optional): idpsName
            strt_name (str, optional): strtName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/idps-strategy/{strt_name}"

        return await self.delete(url)

    async def gw_idps_create_gw_idps_idps_idps_strategy_allowlist_signatures_by_id_v1(
        self,
        idps_name: str = None,
        strt_name: str = None,
    ) -> Response:
        """Create allowlist-signatures by ID.

        Args:
            idps_name (str, optional): idpsName
            strt_name (str, optional): strtName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/idps-strategy/{strt_name}/allowlist-signatures"

        return await self.post(url)

    async def gw_idps_read_gw_idps_idps_idps_strategy_allowlist_signatures_by_id_v1(
        self,
        idps_name: str = None,
        strt_name: str = None,
    ) -> Response:
        """Get allowlist-signatures by ID.

        Args:
            idps_name (str, optional): idpsName
            strt_name (str, optional): strtName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/idps-strategy/{strt_name}/allowlist-signatures"

        return await self.get(url)

    async def gw_idps_delete_gw_idps_idps_idps_strategy_allowlist_signatures_by_id_v1(
        self,
        idps_name: str = None,
        strt_name: str = None,
    ) -> Response:
        """Delete allowlist-signatures by ID.

        Args:
            idps_name (str, optional): idpsName
            strt_name (str, optional): strtName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-idps/{idps_name}/idps-strategy/{strt_name}/allowlist-signatures"

        return await self.delete(url)

    async def gw_network_set_mapping_create_gw_network_set_mapping_by_id_v1(
        self,
        name: str,
        network_set_entries: list,
    ) -> Response:
        """Create gw-network-set-mapping by ID.

        Args:
            name (str): Network set Mapping name.
            network_set_entries (list): Configure Netalias to Network set mappings.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gw-network-set-mapping"

        json_data = {
            'name': name,
            'network_set_entries': network_set_entries
        }

        return await self.post(url, json_data=json_data)

    async def gw_network_set_mapping_read_gw_network_set_mapping_v1(
        self,
    ) -> Response:
        """Get gw-network-set-mapping.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gw-network-set-mapping"

        return await self.get(url)

    async def gw_network_set_mapping_create_gw_network_set_mapping_network_set_mapping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create network-set-mapping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-network-set-mapping/{name}"

        return await self.post(url)

    async def gw_network_set_mapping_read_gw_network_set_mapping_network_set_mapping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get network-set-mapping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-network-set-mapping/{name}"

        return await self.get(url)

    async def gw_network_set_mapping_delete_gw_network_set_mapping_network_set_mapping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete network-set-mapping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-network-set-mapping/{name}"

        return await self.delete(url)

    async def gw_network_set_mapping_create_gw_network_set_mapping_network_set_mapping_network_set_entries_by_id_v1(
        self,
        name: str = None,
        netalias_name: str = None,
    ) -> Response:
        """Create network-set-entries by ID.

        Args:
            name (str, optional): name
            netalias_name (str, optional): netaliasName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-network-set-mapping/{name}/network-set-entries/{netalias_name}"

        return await self.post(url)

    async def gw_network_set_mapping_read_gw_network_set_mapping_network_set_mapping_network_set_entries_by_id_v1(
        self,
        name: str = None,
        netalias_name: str = None,
    ) -> Response:
        """Get network-set-entries by ID.

        Args:
            name (str, optional): name
            netalias_name (str, optional): netaliasName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-network-set-mapping/{name}/network-set-entries/{netalias_name}"

        return await self.get(url)

    async def gw_network_set_mapping_delete_gw_network_set_mapping_network_set_mapping_network_set_entries_by_id_v1(
        self,
        name: str = None,
        netalias_name: str = None,
    ) -> Response:
        """Delete network-set-entries by ID.

        Args:
            name (str, optional): name
            netalias_name (str, optional): netaliasName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-network-set-mapping/{name}/network-set-entries/{netalias_name}"

        return await self.delete(url)

    async def gw_port_profile_create_gw_network_set_mapping_by_id_v1(
        self,
        name: str,
        network_set_entries: list,
    ) -> Response:
        """Create gw-network-set-mapping by ID.

        Args:
            name (str): Network set Mapping name.
            network_set_entries (list): Configure Netalias to Network set mappings.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gw-network-set-mapping"

        json_data = {
            'name': name,
            'network_set_entries': network_set_entries
        }

        return await self.post(url, json_data=json_data)

    async def gw_port_profile_read_gw_network_set_mapping_v1(
        self,
    ) -> Response:
        """Get gw-network-set-mapping.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gw-network-set-mapping"

        return await self.get(url)

    async def gw_port_profile_create_gw_network_set_mapping_network_set_mapping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create network-set-mapping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-network-set-mapping/{name}"

        return await self.post(url)

    async def gw_port_profile_read_gw_network_set_mapping_network_set_mapping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get network-set-mapping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-network-set-mapping/{name}"

        return await self.get(url)

    async def gw_port_profile_delete_gw_network_set_mapping_network_set_mapping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete network-set-mapping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-network-set-mapping/{name}"

        return await self.delete(url)

    async def gw_port_profile_create_gw_network_set_mapping_network_set_mapping_network_set_entries_by_id_v1(
        self,
        name: str = None,
        netalias_name: str = None,
    ) -> Response:
        """Create network-set-entries by ID.

        Args:
            name (str, optional): name
            netalias_name (str, optional): netaliasName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-network-set-mapping/{name}/network-set-entries/{netalias_name}"

        return await self.post(url)

    async def gw_port_profile_read_gw_network_set_mapping_network_set_mapping_network_set_entries_by_id_v1(
        self,
        name: str = None,
        netalias_name: str = None,
    ) -> Response:
        """Get network-set-entries by ID.

        Args:
            name (str, optional): name
            netalias_name (str, optional): netaliasName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-network-set-mapping/{name}/network-set-entries/{netalias_name}"

        return await self.get(url)

    async def gw_port_profile_delete_gw_network_set_mapping_network_set_mapping_network_set_entries_by_id_v1(
        self,
        name: str = None,
        netalias_name: str = None,
    ) -> Response:
        """Delete network-set-entries by ID.

        Args:
            name (str, optional): name
            netalias_name (str, optional): netaliasName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-network-set-mapping/{name}/network-set-entries/{netalias_name}"

        return await self.delete(url)

    async def gw_role_set_mapping_create_gw_role_set_mapping_by_id_v1(
        self,
        name: str,
        role_set_entries: list,
    ) -> Response:
        """Create gw-role-set-mapping by ID.

        Args:
            name (str): Role set Mapping name.
            role_set_entries (list): Configure User role to User set mappings.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gw-role-set-mapping"

        json_data = {
            'name': name,
            'role_set_entries': role_set_entries
        }

        return await self.post(url, json_data=json_data)

    async def gw_role_set_mapping_read_gw_role_set_mapping_v1(
        self,
    ) -> Response:
        """Get gw-role-set-mapping.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gw-role-set-mapping"

        return await self.get(url)

    async def gw_role_set_mapping_create_gw_role_set_mapping_role_set_mapping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create role-set-mapping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-role-set-mapping/{name}"

        return await self.post(url)

    async def gw_role_set_mapping_read_gw_role_set_mapping_role_set_mapping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get role-set-mapping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-role-set-mapping/{name}"

        return await self.get(url)

    async def gw_role_set_mapping_delete_gw_role_set_mapping_role_set_mapping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete role-set-mapping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-role-set-mapping/{name}"

        return await self.delete(url)

    async def gw_role_set_mapping_create_gw_role_set_mapping_role_set_mapping_role_set_entries_by_id_v1(
        self,
        name: str = None,
        user_rol_ename: str = None,
    ) -> Response:
        """Create role-set-entries by ID.

        Args:
            name (str, optional): name
            user_rol_ename (str, optional): userRoleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-role-set-mapping/{name}/role-set-entries/{user_rol_ename}"

        return await self.post(url)

    async def gw_role_set_mapping_read_gw_role_set_mapping_role_set_mapping_role_set_entries_by_id_v1(
        self,
        name: str = None,
        user_rol_ename: str = None,
    ) -> Response:
        """Get role-set-entries by ID.

        Args:
            name (str, optional): name
            user_rol_ename (str, optional): userRoleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-role-set-mapping/{name}/role-set-entries/{user_rol_ename}"

        return await self.get(url)

    async def gw_role_set_mapping_delete_gw_role_set_mapping_role_set_mapping_role_set_entries_by_id_v1(
        self,
        name: str = None,
        user_rol_ename: str = None,
    ) -> Response:
        """Delete role-set-entries by ID.

        Args:
            name (str, optional): name
            user_rol_ename (str, optional): userRoleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-role-set-mapping/{name}/role-set-entries/{user_rol_ename}"

        return await self.delete(url)

    async def gw_selective_inspection_create_gw_selective_inspection_by_id_v1(
        self,
        si_name: str,
        user_set: list,
        network_set: list,
        system_preference: list,
    ) -> Response:
        """Create gw-selective-inspection by ID.

        Args:
            si_name (str): Selective Inspection name.
            user_set (list): Configure user set.
            network_set (list): Configure Network set.
            system_preference (list): Configure System Preference.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gw-selective-inspection"

        json_data = {
            'si_name': si_name,
            'user_set': user_set,
            'network_set': network_set,
            'system_preference': system_preference
        }

        return await self.post(url, json_data=json_data)

    async def gw_selective_inspection_read_gw_selective_inspection_v1(
        self,
    ) -> Response:
        """Get gw-selective-inspection.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/gw-selective-inspection"

        return await self.get(url)

    async def gw_selective_inspection_create_gw_selective_inspection_selective_inspection_by_id_v1(
        self,
        si_name: str = None,
    ) -> Response:
        """Create selective-inspection by ID.

        Args:
            si_name (str, optional): siName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-selective-inspection/{si_name}"

        return await self.post(url)

    async def gw_selective_inspection_read_gw_selective_inspection_selective_inspection_by_id_v1(
        self,
        si_name: str = None,
    ) -> Response:
        """Get selective-inspection by ID.

        Args:
            si_name (str, optional): siName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-selective-inspection/{si_name}"

        return await self.get(url)

    async def gw_selective_inspection_delete_gw_selective_inspection_selective_inspection_by_id_v1(
        self,
        si_name: str = None,
    ) -> Response:
        """Delete selective-inspection by ID.

        Args:
            si_name (str, optional): siName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-selective-inspection/{si_name}"

        return await self.delete(url)

    async def gw_selective_inspection_create_gw_selective_inspection_selective_inspection_user_set_by_id_v1(
        self,
        si_name: str = None,
        uset_name: str = None,
    ) -> Response:
        """Create user-set by ID.

        Args:
            si_name (str, optional): siName
            uset_name (str, optional): usetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-selective-inspection/{si_name}/user-set/{uset_name}"

        return await self.post(url)

    async def gw_selective_inspection_read_gw_selective_inspection_selective_inspection_user_set_by_id_v1(
        self,
        si_name: str = None,
        uset_name: str = None,
    ) -> Response:
        """Get user-set by ID.

        Args:
            si_name (str, optional): siName
            uset_name (str, optional): usetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-selective-inspection/{si_name}/user-set/{uset_name}"

        return await self.get(url)

    async def gw_selective_inspection_delete_gw_selective_inspection_selective_inspection_user_set_by_id_v1(
        self,
        si_name: str = None,
        uset_name: str = None,
    ) -> Response:
        """Delete user-set by ID.

        Args:
            si_name (str, optional): siName
            uset_name (str, optional): usetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-selective-inspection/{si_name}/user-set/{uset_name}"

        return await self.delete(url)

    async def gw_selective_inspection_create_gw_selective_inspection_selective_inspection_network_set_by_id_v1(
        self,
        si_name: str = None,
        nwset_name: str = None,
    ) -> Response:
        """Create network-set by ID.

        Args:
            si_name (str, optional): siName
            nwset_name (str, optional): nwsetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-selective-inspection/{si_name}/network-set/{nwset_name}"

        return await self.post(url)

    async def gw_selective_inspection_read_gw_selective_inspection_selective_inspection_network_set_by_id_v1(
        self,
        si_name: str = None,
        nwset_name: str = None,
    ) -> Response:
        """Get network-set by ID.

        Args:
            si_name (str, optional): siName
            nwset_name (str, optional): nwsetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-selective-inspection/{si_name}/network-set/{nwset_name}"

        return await self.get(url)

    async def gw_selective_inspection_delete_gw_selective_inspection_selective_inspection_network_set_by_id_v1(
        self,
        si_name: str = None,
        nwset_name: str = None,
    ) -> Response:
        """Delete network-set by ID.

        Args:
            si_name (str, optional): siName
            nwset_name (str, optional): nwsetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-selective-inspection/{si_name}/network-set/{nwset_name}"

        return await self.delete(url)

    async def gw_selective_inspection_create_gw_selective_inspection_selective_inspection_system_preference_by_id_v1(
        self,
        si_name: str = None,
        sysp_name: str = None,
    ) -> Response:
        """Create system-preference by ID.

        Args:
            si_name (str, optional): siName
            sysp_name (str, optional): syspName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-selective-inspection/{si_name}/system-preference/{sysp_name}"

        return await self.post(url)

    async def gw_selective_inspection_read_gw_selective_inspection_selective_inspection_system_preference_by_id_v1(
        self,
        si_name: str = None,
        sysp_name: str = None,
    ) -> Response:
        """Get system-preference by ID.

        Args:
            si_name (str, optional): siName
            sysp_name (str, optional): syspName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-selective-inspection/{si_name}/system-preference/{sysp_name}"

        return await self.get(url)

    async def gw_selective_inspection_delete_gw_selective_inspection_selective_inspection_system_preference_by_id_v1(
        self,
        si_name: str = None,
        sysp_name: str = None,
    ) -> Response:
        """Delete system-preference by ID.

        Args:
            si_name (str, optional): siName
            sysp_name (str, optional): syspName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/gw-selective-inspection/{si_name}/system-preference/{sysp_name}"

        return await self.delete(url)

    async def hardware_module_profile_create_hardware_modules_by_id_v1(
        self,
        name: str,
        description: str,
        quick_poe: bool,
        always_on_poe: bool,
        interface_group_speed_profile: list,
    ) -> Response:
        """Create hardware-modules by ID.

        Args:
            name (str): Module name.
            description (str): Module description.
            quick_poe (bool): Enable quick-poe configuration. quick-poe allows the PSE
                to power up connected PDs soon after a cold reboot. On standalone
                devices this applies globally, on VSF it applies to the 'Member' and
                in chassis devices this is applicable to the 'Line Cards'.
            always_on_poe (bool): Always-on PoE provides ability to continue power delivery during
                a soft/warm reboot. On standalone devices this applies globally,
                on VSF it applies to the 'Member' and in chassis devices this is
                applicable to the 'Line Cards'.
            interface_group_speed_profile (list): Speed of ports for a group of interfaces.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/hardware-modules"

        json_data = {
            'name': name,
            'description': description,
            'quick_poe': quick_poe,
            'always_on_poe': always_on_poe,
            'interface_group_speed_profile': interface_group_speed_profile
        }

        return await self.post(url, json_data=json_data)

    async def hardware_module_profile_read_hardware_modules_v1(
        self,
    ) -> Response:
        """Get hardware-modules.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/hardware-modules"

        return await self.get(url)

    async def hardware_module_profile_create_hardware_modules_hw_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create hw-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hardware-modules/{name}"

        return await self.post(url)

    async def hardware_module_profile_read_hardware_modules_hw_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get hw-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hardware-modules/{name}"

        return await self.get(url)

    async def hardware_module_profile_delete_hardware_modules_hw_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete hw-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hardware-modules/{name}"

        return await self.delete(url)

    async def hardware_module_profile_create_hardware_modules_hw_profile_interface_group_speed_profile_by_id_v1(
        self,
        name: str = None,
        group_id: str = None,
    ) -> Response:
        """Create interface-group-speed-profile by ID.

        Args:
            name (str, optional): name
            group_id (str, optional): groupId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hardware-modules/{name}/interface-group-speed-profile/{group_id}"

        return await self.post(url)

    async def hardware_module_profile_read_hardware_modules_hw_profile_interface_group_speed_profile_by_id_v1(
        self,
        name: str = None,
        group_id: str = None,
    ) -> Response:
        """Get interface-group-speed-profile by ID.

        Args:
            name (str, optional): name
            group_id (str, optional): groupId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hardware-modules/{name}/interface-group-speed-profile/{group_id}"

        return await self.get(url)

    async def hardware_module_profile_delete_hardware_modules_hw_profile_interface_group_speed_profile_by_id_v1(
        self,
        name: str = None,
        group_id: str = None,
    ) -> Response:
        """Delete interface-group-speed-profile by ID.

        Args:
            name (str, optional): name
            group_id (str, optional): groupId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hardware-modules/{name}/interface-group-speed-profile/{group_id}"

        return await self.delete(url)

    async def health_check_manager_create_health_check_monitor_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create health-check-monitor by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Health-check profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Health-check profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/health-check-monitor"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def health_check_manager_read_health_check_monitor_v1(
        self,
    ) -> Response:
        """Get health-check-monitor.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/health-check-monitor"

        return await self.get(url)

    async def health_check_manager_create_health_check_monitor_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/health-check-monitor/{name}"

        return await self.post(url)

    async def health_check_manager_read_health_check_monitor_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/health-check-monitor/{name}"

        return await self.get(url)

    async def health_check_manager_delete_health_check_monitor_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/health-check-monitor/{name}"

        return await self.delete(url)

    async def hotspot2_anqp_3gpp_create_anqp3gpp_by_id_v1(
        self,
        name: str,
        enable: bool,
        plmn: List[str],
    ) -> Response:
        """Create anqp-3gpp by ID.

        Args:
            name (str): Profile name.
            enable (bool): Enable this profile
            plmn (List[str]): plmn

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-3gpp"

        json_data = {
            'name': name,
            'enable': enable,
            'plmn': plmn
        }

        return await self.post(url, json_data=json_data)

    async def hotspot2_anqp_3gpp_read_anqp3gpp_v1(
        self,
    ) -> Response:
        """Get anqp-3gpp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-3gpp"

        return await self.get(url)

    async def hotspot2_anqp_3gpp_create_anqp3gpp_anqp3gpp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create anqp-3gpp-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-3gpp/{name}"

        return await self.post(url)

    async def hotspot2_anqp_3gpp_read_anqp3gpp_anqp3gpp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get anqp-3gpp-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-3gpp/{name}"

        return await self.get(url)

    async def hotspot2_anqp_3gpp_delete_anqp3gpp_anqp3gpp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete anqp-3gpp-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-3gpp/{name}"

        return await self.delete(url)

    async def hotspot2_anqp_3gpp_create_anqp3gpp_anqp3gpp_profile_plmn_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create plmn by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-3gpp/{name}/plmn"

        return await self.post(url)

    async def hotspot2_anqp_3gpp_read_anqp3gpp_anqp3gpp_profile_plmn_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get plmn by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-3gpp/{name}/plmn"

        return await self.get(url)

    async def hotspot2_anqp_3gpp_delete_anqp3gpp_anqp3gpp_profile_plmn_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete plmn by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-3gpp/{name}/plmn"

        return await self.delete(url)

    async def hotspot2_anqp_domain_name_create_anqp_domain_name_by_id_v1(
        self,
        name: str,
        enable: bool,
        value: str,
    ) -> Response:
        """Create anqp-domain-name by ID.

        Args:
            name (str): Profile name.
            enable (bool): Enable this profile
            value (str): Domain name of the hotspot operator

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-domain-name"

        json_data = {
            'name': name,
            'enable': enable,
            'value': value
        }

        return await self.post(url, json_data=json_data)

    async def hotspot2_anqp_domain_name_read_anqp_domain_name_v1(
        self,
    ) -> Response:
        """Get anqp-domain-name.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-domain-name"

        return await self.get(url)

    async def hotspot2_anqp_domain_name_create_anqp_domain_name_anqp_domain_name_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create anqp-domain-name-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-domain-name/{name}"

        return await self.post(url)

    async def hotspot2_anqp_domain_name_read_anqp_domain_name_anqp_domain_name_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get anqp-domain-name-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-domain-name/{name}"

        return await self.get(url)

    async def hotspot2_anqp_domain_name_delete_anqp_domain_name_anqp_domain_name_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete anqp-domain-name-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-domain-name/{name}"

        return await self.delete(url)

    async def hotspot2_anqp_ip_addr_avail_create_anqp_ip_addr_avail_by_id_v1(
        self,
        name: str,
        enable: bool,
        ipv4: str,
        ipv6: str,
    ) -> Response:
        """Create anqp-ip-addr-avail by ID.

        Args:
            name (str): Profile name.
            enable (bool): Enable this profile
            ipv4 (str): Indicates the availability of an IPv4 network.  Valid Values: NOT_AVAILABLE,
                PUBLIC, PORT_RESTRICTED, SINGLE_NATED_PRIVATE, DOUBLE_NATED_PRIVATE,
                PORT_RESTRICTED_SINGLE_NATED_PRIVATE, PORT_RESTRICTED_DOUBLE_NATED_PRIVATE,
                UNKNOWN_IPV4_AVAIL
            ipv6 (str): Indicates the availability of an IPv6 network.  Valid Values: NOT_AVAILABLE,
                AVAILABLE, UNKNOWN_IPV6_AVAIL

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-ip-addr-avail"

        json_data = {
            'name': name,
            'enable': enable,
            'ipv4': ipv4,
            'ipv6': ipv6
        }

        return await self.post(url, json_data=json_data)

    async def hotspot2_anqp_ip_addr_avail_read_anqp_ip_addr_avail_v1(
        self,
    ) -> Response:
        """Get anqp-ip-addr-avail.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-ip-addr-avail"

        return await self.get(url)

    async def hotspot2_anqp_ip_addr_avail_create_anqp_ip_addr_avail_anqp_ip_addr_avail_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create anqp-ip-addr-avail-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-ip-addr-avail/{name}"

        return await self.post(url)

    async def hotspot2_anqp_ip_addr_avail_read_anqp_ip_addr_avail_anqp_ip_addr_avail_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get anqp-ip-addr-avail-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-ip-addr-avail/{name}"

        return await self.get(url)

    async def hotspot2_anqp_ip_addr_avail_delete_anqp_ip_addr_avail_anqp_ip_addr_avail_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete anqp-ip-addr-avail-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-ip-addr-avail/{name}"

        return await self.delete(url)

    async def hotspot2_anqp_nai_realm_create_anqp_nai_realm_by_id_v1(
        self,
        name: str,
        enable: bool,
        nai_realm_name: str,
        encoding: str,
        eap_method: list,
        home_realm: bool,
    ) -> Response:
        """Create anqp-nai-realm by ID.

        Args:
            name (str): Profile name.
            enable (bool): Enable this profile
            nai_realm_name (str): Name of the NAI realm. The realm name is often the domain name of
                the service provider.
            encoding (str): Issue this command if the NAI realm named
                defined by nai-realm-name <nai-realm-name> is                             a UTF-8
                formatted character string that is not                             formatted in
                accordance with IETF RFC 4282.  Valid Values: RFC4282, UTF8
            eap_method (list): NAI Realm EAP Auth Method
            home_realm (bool): Marks the realm in this profile as the NAI Home Realm.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-nai-realm"

        json_data = {
            'name': name,
            'enable': enable,
            'nai_realm_name': nai_realm_name,
            'encoding': encoding,
            'eap_method': eap_method,
            'home_realm': home_realm
        }

        return await self.post(url, json_data=json_data)

    async def hotspot2_anqp_nai_realm_read_anqp_nai_realm_v1(
        self,
    ) -> Response:
        """Get anqp-nai-realm.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-nai-realm"

        return await self.get(url)

    async def hotspot2_anqp_nai_realm_create_anqp_nai_realm_anqp_nai_realm_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create anqp-nai-realm-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-nai-realm/{name}"

        return await self.post(url)

    async def hotspot2_anqp_nai_realm_read_anqp_nai_realm_anqp_nai_realm_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get anqp-nai-realm-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-nai-realm/{name}"

        return await self.get(url)

    async def hotspot2_anqp_nai_realm_delete_anqp_nai_realm_anqp_nai_realm_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete anqp-nai-realm-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-nai-realm/{name}"

        return await self.delete(url)

    async def hotspot2_anqp_nai_realm_create_anqp_nai_realm_anqp_nai_realm_profile_eap_method_by_id_v1(
        self,
        name: str = None,
        method: str = None,
    ) -> Response:
        """Create eap-method by ID.

        Args:
            name (str, optional): name
            method (str, optional): method

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-nai-realm/{name}/eap-method/{method}"

        return await self.post(url)

    async def hotspot2_anqp_nai_realm_read_anqp_nai_realm_anqp_nai_realm_profile_eap_method_by_id_v1(
        self,
        name: str = None,
        method: str = None,
    ) -> Response:
        """Get eap-method by ID.

        Args:
            name (str, optional): name
            method (str, optional): method

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-nai-realm/{name}/eap-method/{method}"

        return await self.get(url)

    async def hotspot2_anqp_nai_realm_delete_anqp_nai_realm_anqp_nai_realm_profile_eap_method_by_id_v1(
        self,
        name: str = None,
        method: str = None,
    ) -> Response:
        """Delete eap-method by ID.

        Args:
            name (str, optional): name
            method (str, optional): method

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-nai-realm/{name}/eap-method/{method}"

        return await self.delete(url)

    async def hotspot2_anqp_nai_realm_create_anqp_nai_realm_anqp_nai_realm_profile_eap_method_auth_param_by_id_v1(
        self,
        name: str = None,
        method: str = None,
        id: str = None,
    ) -> Response:
        """Create auth-param by ID.

        Args:
            name (str, optional): name
            method (str, optional): method
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-nai-realm/{name}/eap-method/{method}/auth-param/{id}"

        return await self.post(url)

    async def hotspot2_anqp_nai_realm_read_anqp_nai_realm_anqp_nai_realm_profile_eap_method_auth_param_by_id_v1(
        self,
        name: str = None,
        method: str = None,
        id: str = None,
    ) -> Response:
        """Get auth-param by ID.

        Args:
            name (str, optional): name
            method (str, optional): method
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-nai-realm/{name}/eap-method/{method}/auth-param/{id}"

        return await self.get(url)

    async def hotspot2_anqp_nai_realm_delete_anqp_nai_realm_anqp_nai_realm_profile_eap_method_auth_param_by_id_v1(
        self,
        name: str = None,
        method: str = None,
        id: str = None,
    ) -> Response:
        """Delete auth-param by ID.

        Args:
            name (str, optional): name
            method (str, optional): method
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-nai-realm/{name}/eap-method/{method}/auth-param/{id}"

        return await self.delete(url)

    async def hotspot2_anqp_nwk_auth_create_anqp_nwk_auth_by_id_v1(
        self,
        name: str,
        enable: bool,
        na_type: str,
        url: str,
    ) -> Response:
        """Create anqp-nwk-auth by ID.

        Args:
            name (str): Profile name.
            enable (bool): Enable this profile
            na_type (str): Network authentication type being used by the hotspot network.  Valid
                Values: ACCEPT_TERM_AND_COND, ONLINE_ENROLLMENT, HTTP_REDIRECT, DNS_REDIRECT
            url (str): URL provided for DNS Redirection/Acceptance of Terms

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-nwk-auth"

        json_data = {
            'name': name,
            'enable': enable,
            'na_type': na_type,
            'url': url
        }

        return await self.post(url, json_data=json_data)

    async def hotspot2_anqp_nwk_auth_read_anqp_nwk_auth_v1(
        self,
    ) -> Response:
        """Get anqp-nwk-auth.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-nwk-auth"

        return await self.get(url)

    async def hotspot2_anqp_nwk_auth_create_anqp_nwk_auth_anqp_nwk_auth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create anqp-nwk-auth-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-nwk-auth/{name}"

        return await self.post(url)

    async def hotspot2_anqp_nwk_auth_read_anqp_nwk_auth_anqp_nwk_auth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get anqp-nwk-auth-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-nwk-auth/{name}"

        return await self.get(url)

    async def hotspot2_anqp_nwk_auth_delete_anqp_nwk_auth_anqp_nwk_auth_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete anqp-nwk-auth-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-nwk-auth/{name}"

        return await self.delete(url)

    async def hotspot2_anqp_roam_cons_create_anqp_roam_cons_by_id_v1(
        self,
        name: str,
        enable: bool,
        org_id: str,
    ) -> Response:
        """Create anqp-roam-cons by ID.

        Args:
            name (str): Profile name.
            enable (bool): Enable this profile
            org_id (str): Sends the specified roaming consortium OI in a GAS query response.
                The OI must be a hexadecimal value.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-roam-cons"

        json_data = {
            'name': name,
            'enable': enable,
            'org_id': org_id
        }

        return await self.post(url, json_data=json_data)

    async def hotspot2_anqp_roam_cons_read_anqp_roam_cons_v1(
        self,
    ) -> Response:
        """Get anqp-roam-cons.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-roam-cons"

        return await self.get(url)

    async def hotspot2_anqp_roam_cons_create_anqp_roam_cons_anqp_roam_cons_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create anqp-roam-cons-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-roam-cons/{name}"

        return await self.post(url)

    async def hotspot2_anqp_roam_cons_read_anqp_roam_cons_anqp_roam_cons_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get anqp-roam-cons-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-roam-cons/{name}"

        return await self.get(url)

    async def hotspot2_anqp_roam_cons_delete_anqp_roam_cons_anqp_roam_cons_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete anqp-roam-cons-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-roam-cons/{name}"

        return await self.delete(url)

    async def hotspot2_anqp_venue_name_create_anqp_venue_name_by_id_v1(
        self,
        name: str,
        enable: bool,
        group_type: str,
        lang_code: str,
        name_hex: str,
        venue_name: str,
        url: str,
    ) -> Response:
        """Create anqp-venue-name by ID.

        Args:
            name (str): Profile name.
            enable (bool): Enable this profile
            group_type (str): Network Venue Group  Valid Values: UNSPECIFIED_UNSPECIFIED,
                ASSEMBLY_UNSPECIFIED, ASSEMBLY_ARENA, ASSEMBLY_STADIUM, ASSEMBLY_PASSENGER_TERMINAL,
                ASSEMBLY_AMPHITHEATER, ASSEMBLY_AMUSEMENT_PARK, ASSEMBLY_PLACE_OF_WORSHIP,
                ASSEMBLY_CONVENTION_CENTER, ASSEMBLY_LIBRARY, ASSEMBLY_MUSEUM, ASSEMBLY_RESTAURANT,
                ASSEMBLY_THEATER, ASSEMBLY_BAR, ASSEMBLY_COFFEE_SHOP, ASSEMBLY_ZOO_OR_AQUARIUM,
                ASSEMBLY_EMERGENCY_CORD_CENTER, BUSINESS_UNSPECIFIED, BUSINESS_DOCTOR,
                BUSINESS_BANK, BUSINESS_FIRE_STATION, BUSINESS_POLICE_STATION, BUSINESS_POST_OFFICE,
                BUSINESS_PROFESSIONAL_OFFICE, BUSINESS_RESEARCH_AND_DEV_FACILITY,
                BUSINESS_ATTORNEY_OFFICE, EDUCATIONAL_UNSPECIFIED, EDUCATIONAL_SCHOOL_PRIMARY,
                EDUCATIONAL_SCHOOL_SECONDARY, EDUCATIONAL_UNIV_OR_COLLEGE,
                FACTORY_AND_INDUSTRIAL_UNSPECIFIED, FACTORY_AND_INDUSTRIAL_FACTORY,
                INSTITUTIONAL_UNSPECIFIED, INSTITUTIONAL_HOSPITAL, INSTITUTIONAL_LONG_TERM_CARE,
                INSTITUTIONAL_ALC_DRUG_REHAB, INSTITUTIONAL_GROUP_HOME,
                INSTITUTIONAL_PRISON_OR_JAIL, MERCANTILE_UNSPECIFIED, MERCANTILE_RETAIL_STORE,
                MERCANTILE_GROCERY_MARKET, MERCANTILE_AUTO_SERVICE_STATION,
                MERCANTILE_SHOPPING_MALL, MERCANTILE_GAS_STATION, RESIDENTIAL_UNSPECIFIED,
                RESIDENTIAL_PRIVATE_RESIDENCE, RESIDENTIAL_HOTEL, RESIDENTIAL_DORMITORY,
                RESIDENTIAL_BOARDING_HOUSE, STORAGE_UNSPECIFIED, UTILITY_AND_MISC_UNSPECIFIED,
                VEHICULAR_UNSPECIFIED, VEHICULAR_AUTOMOBILE_OR_TRUCK, VEHICULAR_AIRPLANE,
                VEHICULAR_BUS, VEHICULAR_FERRY, VEHICULAR_SHIP, VEHICULAR_TRAIN,
                VEHICULAR_MOTOR_BIKE, OUTDOOR_UNSPECIFIED, OUTDOOR_MUNI_MESH_NETWORK,
                OUTDOOR_CITY_PARK, OUTDOOR_REST_AREA, OUTDOOR_TRAFFIC_CONTROL, OUTDOOR_BUS_STOP,
                OUTDOOR_KIOSK
            lang_code (str): An ISO 639 language code that identifies the language used in the Venue
                Name field
            name_hex (str): Network Venue Name in HEX for non-english
            venue_name (str): Network Venue Name
            url (str): Venue URL where customer may go to get additional info related to the venue.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-venue_name"

        json_data = {
            'name': name,
            'enable': enable,
            'group_type': group_type,
            'lang_code': lang_code,
            'name_hex': name_hex,
            'venue_name': venue_name,
            'url': url
        }

        return await self.post(url, json_data=json_data)

    async def hotspot2_anqp_venue_name_read_anqp_venue_name_v1(
        self,
    ) -> Response:
        """Get anqp-venue-name.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/anqp-venue-name"

        return await self.get(url)

    async def hotspot2_anqp_venue_name_create_anqp_venue_name_anqp_venue_name_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create anqp-venue-name-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-venue-name/{name}"

        return await self.post(url)

    async def hotspot2_anqp_venue_name_read_anqp_venue_name_anqp_venue_name_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get anqp-venue-name-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-venue-name/{name}"

        return await self.get(url)

    async def hotspot2_anqp_venue_name_delete_anqp_venue_name_anqp_venue_name_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete anqp-venue-name-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/anqp-venue-name/{name}"

        return await self.delete(url)

    async def hotspot2_h2qp_conn_cap_create_h2qp_conn_cap_by_id_v1(
        self,
        name: str,
        enable: bool,
        icmp: bool,
        tcp_ftp: bool,
        tcp_ssh: bool,
        tcp_http: bool,
        tcp_tls_vpn: bool,
        tcp_pptp_vpn: bool,
        tcp_voip: bool,
        udp_voip: bool,
        udp_ipsec_vpn: bool,
        udp_ike2: bool,
        esp_port: bool,
    ) -> Response:
        """Create h2qp-conn-cap by ID.

        Args:
            name (str): Profile name.
            enable (bool): Enable this profile
            icmp (bool): Indicates that the ICMP port is enabled and available. (port 0)
            tcp_ftp (bool): Include this parameter to enable the FTP port. (port 20)
            tcp_ssh (bool): Include this parameter to enable the SSH port. (port 22)
            tcp_http (bool): Include this parameter to enable the HTTP port. (port 80)
            tcp_tls_vpn (bool): Include this parameter to enable the TCP TLS port used by VPNs.
                (port 80)
            tcp_pptp_vpn (bool): Include this parameter to enable the PPTP port used by IPsec VPNs.
                (port 1723)
            tcp_voip (bool): Include this parameter to enable the TCP VoIP port. (port 5060)
            udp_voip (bool): Include this parameter to enable the UDP VoIP port. (port 5060)
            udp_ipsec_vpn (bool): Enable UDP IKEv2 port 500 for IPSec VPN
            udp_ike2 (bool): Enable UDP IKEv2 port 4500 for IPSec VPN
            esp_port (bool): Enable ESP port Used by IPSec VPN

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/h2qp-conn-cap"

        json_data = {
            'name': name,
            'enable': enable,
            'icmp': icmp,
            'tcp_ftp': tcp_ftp,
            'tcp_ssh': tcp_ssh,
            'tcp_http': tcp_http,
            'tcp_tls_vpn': tcp_tls_vpn,
            'tcp_pptp_vpn': tcp_pptp_vpn,
            'tcp_voip': tcp_voip,
            'udp_voip': udp_voip,
            'udp_ipsec_vpn': udp_ipsec_vpn,
            'udp_ike2': udp_ike2,
            'esp_port': esp_port
        }

        return await self.post(url, json_data=json_data)

    async def hotspot2_h2qp_conn_cap_read_h2qp_conn_cap_v1(
        self,
    ) -> Response:
        """Get h2qp-conn-cap.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/h2qp-conn-cap"

        return await self.get(url)

    async def hotspot2_h2qp_conn_cap_create_h2qp_conn_cap_h2qp_conn_cap_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create h2qp-conn-cap-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-conn-cap/{name}"

        return await self.post(url)

    async def hotspot2_h2qp_conn_cap_read_h2qp_conn_cap_h2qp_conn_cap_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get h2qp-conn-cap-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-conn-cap/{name}"

        return await self.get(url)

    async def hotspot2_h2qp_conn_cap_delete_h2qp_conn_cap_h2qp_conn_cap_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete h2qp-conn-cap-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-conn-cap/{name}"

        return await self.delete(url)

    async def hotspot2_h2qp_oper_class_create_h2qp_oper_class_by_id_v1(
        self,
        name: str,
        enable: bool,
        operating_class_indication: int,
    ) -> Response:
        """Create h2qp-oper-class by ID.

        Args:
            name (str): Profile name.
            enable (bool): Enable this profile
            operating_class_indication (int): Indicate the operating class for the BSS (1-255)

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/h2qp-oper-class"

        json_data = {
            'name': name,
            'enable': enable,
            'operating_class_indication': operating_class_indication
        }

        return await self.post(url, json_data=json_data)

    async def hotspot2_h2qp_oper_class_read_h2qp_oper_class_v1(
        self,
    ) -> Response:
        """Get h2qp-oper-class.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/h2qp-oper-class"

        return await self.get(url)

    async def hotspot2_h2qp_oper_class_create_h2qp_oper_class_h2qp_oper_class_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create h2qp-oper-class-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-oper-class/{name}"

        return await self.post(url)

    async def hotspot2_h2qp_oper_class_read_h2qp_oper_class_h2qp_oper_class_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get h2qp-oper-class-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-oper-class/{name}"

        return await self.get(url)

    async def hotspot2_h2qp_oper_class_delete_h2qp_oper_class_h2qp_oper_class_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete h2qp-oper-class-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-oper-class/{name}"

        return await self.delete(url)

    async def hotspot2_h2qp_oper_name_create_h2qp_oper_name_by_id_v1(
        self,
        name: str,
        enable: bool,
        lang_code: str,
        fr_name: str,
        fr_name_hex: str,
    ) -> Response:
        """Create h2qp-oper-name by ID.

        Args:
            name (str): Profile name.
            enable (bool): Enable this profile
            lang_code (str): Operator Friendly Name Language Code to be selected. Refer to ISO 639
            fr_name (str): Operator Friendly English Name (max length:252)
            fr_name_hex (str): Operator Friendly English Name by hex (max length:504)

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/h2qp-oper-name"

        json_data = {
            'name': name,
            'enable': enable,
            'lang_code': lang_code,
            'fr_name': fr_name,
            'fr_name_hex': fr_name_hex
        }

        return await self.post(url, json_data=json_data)

    async def hotspot2_h2qp_oper_name_read_h2qp_oper_name_v1(
        self,
    ) -> Response:
        """Get h2qp-oper-name.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/h2qp-oper-name"

        return await self.get(url)

    async def hotspot2_h2qp_oper_name_create_h2qp_oper_name_h2qp_oper_name_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create h2qp-oper-name-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-oper-name/{name}"

        return await self.post(url)

    async def hotspot2_h2qp_oper_name_read_h2qp_oper_name_h2qp_oper_name_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get h2qp-oper-name-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-oper-name/{name}"

        return await self.get(url)

    async def hotspot2_h2qp_oper_name_delete_h2qp_oper_name_h2qp_oper_name_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete h2qp-oper-name-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-oper-name/{name}"

        return await self.delete(url)

    async def hotspot2_h2qp_osu_provider_create_h2qp_osu_provider_by_id_v1(
        self,
        name: str,
        enable: bool,
        friendly_name_duple: list,
        osu_server_uri: str,
        icons_available: list,
        srvc_desc: list,
        osu_method: str,
    ) -> Response:
        """Create h2qp-osu-provider by ID.

        Args:
            name (str): Profile name.
            enable (bool): Enable this profile
            friendly_name_duple (list): List of OSU friendly names
            osu_server_uri (str): OSU Server URI
            icons_available (list): List of OSU available icons
            srvc_desc (list): List of OSU service description
            osu_method (str): OSU Provider Method (OMA-DM/ SOAP-XML)  Valid Values: OMA_DM, SOAP_XML

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/h2qp-osu-provider"

        json_data = {
            'name': name,
            'enable': enable,
            'friendly_name_duple': friendly_name_duple,
            'osu_server_uri': osu_server_uri,
            'icons_available': icons_available,
            'srvc_desc': srvc_desc,
            'osu_method': osu_method
        }

        return await self.post(url, json_data=json_data)

    async def hotspot2_h2qp_osu_provider_read_h2qp_osu_provider_v1(
        self,
    ) -> Response:
        """Get h2qp-osu-provider.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/h2qp-osu-provider"

        return await self.get(url)

    async def hotspot2_h2qp_osu_provider_create_h2qp_osu_provider_h2qp_osu_provider_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create h2qp-osu-provider-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-osu-provider/{name}"

        return await self.post(url)

    async def hotspot2_h2qp_osu_provider_read_h2qp_osu_provider_h2qp_osu_provider_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get h2qp-osu-provider-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-osu-provider/{name}"

        return await self.get(url)

    async def hotspot2_h2qp_osu_provider_delete_h2qp_osu_provider_h2qp_osu_provider_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete h2qp-osu-provider-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-osu-provider/{name}"

        return await self.delete(url)

    async def hotspot2_h2qp_osu_provider_create_h2qp_osu_provider_h2qp_osu_provider_profile_friendly_name_duple_by_id_v1(
        self,
        name: str = None,
        value: str = None,
    ) -> Response:
        """Create friendly-name-duple by ID.

        Args:
            name (str, optional): name
            value (str, optional): value

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-osu-provider/{name}/friendly-name-duple/{value}"

        return await self.post(url)

    async def hotspot2_h2qp_osu_provider_read_h2qp_osu_provider_h2qp_osu_provider_profile_friendly_name_duple_by_id_v1(
        self,
        name: str = None,
        value: str = None,
    ) -> Response:
        """Get friendly-name-duple by ID.

        Args:
            name (str, optional): name
            value (str, optional): value

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-osu-provider/{name}/friendly-name-duple/{value}"

        return await self.get(url)

    async def hotspot2_h2qp_osu_provider_delete_h2qp_osu_provider_h2qp_osu_provider_profile_friendly_name_duple_by_id_v1(
        self,
        name: str = None,
        value: str = None,
    ) -> Response:
        """Delete friendly-name-duple by ID.

        Args:
            name (str, optional): name
            value (str, optional): value

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-osu-provider/{name}/friendly-name-duple/{value}"

        return await self.delete(url)

    async def hotspot2_h2qp_osu_provider_create_h2qp_osu_provider_h2qp_osu_provider_profile_icons_available_by_id_v1(
        self,
        name: str = None,
        file_index: str = None,
    ) -> Response:
        """Create icons-available by ID.

        Args:
            name (str, optional): name
            file_index (str, optional): fileIndex

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-osu-provider/{name}/icons-available/{file_index}"

        return await self.post(url)

    async def hotspot2_h2qp_osu_provider_read_h2qp_osu_provider_h2qp_osu_provider_profile_icons_available_by_id_v1(
        self,
        name: str = None,
        file_index: str = None,
    ) -> Response:
        """Get icons-available by ID.

        Args:
            name (str, optional): name
            file_index (str, optional): fileIndex

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-osu-provider/{name}/icons-available/{file_index}"

        return await self.get(url)

    async def hotspot2_h2qp_osu_provider_delete_h2qp_osu_provider_h2qp_osu_provider_profile_icons_available_by_id_v1(
        self,
        name: str = None,
        file_index: str = None,
    ) -> Response:
        """Delete icons-available by ID.

        Args:
            name (str, optional): name
            file_index (str, optional): fileIndex

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-osu-provider/{name}/icons-available/{file_index}"

        return await self.delete(url)

    async def hotspot2_h2qp_osu_provider_create_h2qp_osu_provider_h2qp_osu_provider_profile_srvc_desc_by_id_v1(
        self,
        name: str = None,
        desc: str = None,
    ) -> Response:
        """Create srvc-desc by ID.

        Args:
            name (str, optional): name
            desc (str, optional): desc

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-osu-provider/{name}/srvc-desc/{desc}"

        return await self.post(url)

    async def hotspot2_h2qp_osu_provider_read_h2qp_osu_provider_h2qp_osu_provider_profile_srvc_desc_by_id_v1(
        self,
        name: str = None,
        desc: str = None,
    ) -> Response:
        """Get srvc-desc by ID.

        Args:
            name (str, optional): name
            desc (str, optional): desc

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-osu-provider/{name}/srvc-desc/{desc}"

        return await self.get(url)

    async def hotspot2_h2qp_osu_provider_delete_h2qp_osu_provider_h2qp_osu_provider_profile_srvc_desc_by_id_v1(
        self,
        name: str = None,
        desc: str = None,
    ) -> Response:
        """Delete srvc-desc by ID.

        Args:
            name (str, optional): name
            desc (str, optional): desc

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-osu-provider/{name}/srvc-desc/{desc}"

        return await self.delete(url)

    async def hotspot2_h2qp_wan_metrics_create_h2qp_wan_metrics_by_id_v1(
        self,
        name: str,
        enable: bool,
        link_status: str,
        enable_symm_link: bool,
        at_capacity: bool,
        uplink_speed: int,
        downlink_speed: int,
        uplink_load: int,
        downlink_load: int,
        load_duration: int,
    ) -> Response:
        """Create h2qp-wan-metrics by ID.

        Args:
            name (str): Profile name.
            enable (bool): Enable this profile
            link_status (str): Set H2QP WAN metrics symmetric link status  Valid Values: LINK_UP,
                LINK_DOWN, LINK_UNDER_TEST
            enable_symm_link (bool): Enable H2QP WAN metrics symmetric WAN link
            at_capacity (bool): Enable H2QP WAN metrics WAN link at capacity
            uplink_speed (int): H2QP WAN metrics uplink speed in Kbps
            downlink_speed (int): H2QP WAN metrics downlink speed in Kbps (range)
            uplink_load (int): H2QP WAN metrics uplink load (range)
            downlink_load (int): H2QP WAN metrics downlink load(range)
            load_duration (int): H2QP WAN metrics load measurement duration (range)

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/h2qp-wan-metrics"

        json_data = {
            'name': name,
            'enable': enable,
            'link_status': link_status,
            'enable_symm_link': enable_symm_link,
            'at_capacity': at_capacity,
            'uplink_speed': uplink_speed,
            'downlink_speed': downlink_speed,
            'uplink_load': uplink_load,
            'downlink_load': downlink_load,
            'load_duration': load_duration
        }

        return await self.post(url, json_data=json_data)

    async def hotspot2_h2qp_wan_metrics_read_h2qp_wan_metrics_v1(
        self,
    ) -> Response:
        """Get h2qp-wan-metrics.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/h2qp-wan-metrics"

        return await self.get(url)

    async def hotspot2_h2qp_wan_metrics_create_h2qp_wan_metrics_h2qp_wan_metrics_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create h2qp-wan-metrics-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-wan-metrics/{name}"

        return await self.post(url)

    async def hotspot2_h2qp_wan_metrics_read_h2qp_wan_metrics_h2qp_wan_metrics_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get h2qp-wan-metrics-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-wan-metrics/{name}"

        return await self.get(url)

    async def hotspot2_h2qp_wan_metrics_delete_h2qp_wan_metrics_h2qp_wan_metrics_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete h2qp-wan-metrics-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/h2qp-wan-metrics/{name}"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_by_id_v1(
        self,
        name: str,
        enable: bool,
        release_number: int,
        access_network_type: str,
        addtl_roam_cons_ois: int,
        anqp_domain_id: int,
        additional_access_steps: bool,
        comeback_mode: bool,
        gas_comeback_delay: int,
        group_frame_block: bool,
        homogeneous_essid: str,
        enable_internet_access: bool,
        osen: bool,
        osu_nai: str,
        osu_ssid: str,
        p2p_cross_connect: bool,
        p2p_dev_mgmt: bool,
        pame_bi: bool,
        qos_map_excp: str,
        qos_map_range: str,
        query_response_length_limit: int,
        radius_cui_disable: bool,
        radius_loc_data_disable: bool,
        roam_cons_oi_1: str,
        roam_cons_oi_2: str,
        roam_cons_oi_3: str,
        venue_group_type: str,
        advertisement_profile: list,
    ) -> Response:
        """Create hotspot2 by ID.

        Args:
            name (str): Profile name.
            enable (bool): Enable this profile
            release_number (int): Hotspot 2.0 Release Number
            access_network_type (str): Specifies the 802.11u network type  Valid Values: PRIVATE,
                PRIVATE_WITH_GUEST, CHARGEABLE_PUBLIC, FREE_PUBLIC, PERSONAL_DEVICE,
                EMERGENCY_SERVICES, TEST, WILDCARD
            addtl_roam_cons_ois (int): Additional roaming consortium organization identifiers
            anqp_domain_id (int): Number representing the ANQP Domain Id.  Zero means no domain.
            additional_access_steps (bool): Additional Steps required for Access
            comeback_mode (bool): By default, ANQP information is obtained from a GAS(Generic
                advertisement service) Request and Response.                                   If
                you enable the comebackmode option, advertisement information is obtained
                using a GAS Request and Response. as well as a Comeback-Request and Comeback-
                Response.                                   This option is disabled by default.
            gas_comeback_delay (int): GAS Comeback Delay in milliseconds
            group_frame_block (bool): Downstream Group Addressed Frames Forwarding(DGAF)
            homogeneous_essid (str): This optional parameter devices an AP's homogenous ESS
                identifier, which is that device's MAC address in colonseparated hexadecimal format.
            enable_internet_access (bool): Network Internet Access enabled
            osen (bool): Enable OSU Server-only authenticated layer 2 Encryption Network (OSEN)
            osu_nai (str): OSU NAI for OSEN
            osu_ssid (str): OSU SSID
            p2p_cross_connect (bool): P2P Cross Connect
            p2p_dev_mgmt (bool): P2P Device Management
            pame_bi (bool): Pre Association Message Exchange BSSID Independent
            qos_map_excp (str): Qos Map DSCP Exception fields (upto 21 sets)
            qos_map_range (str): Qos Map DSCP Ranges (total 8 sets <low>:<high>, <low> cannot be
                greater than <high>)
            query_response_length_limit (int): GAS Query Response Length Limit(1-6).
            radius_cui_disable (bool): Disable RADUIS Chargeable-User Identity (CUI) attribute
                defined by RFC 4372. Home                                        networks can use
                this attribute to identify a user for the
                roaming transactions that take place outside of that home network.
            radius_loc_data_disable (bool): Disable RADIUS Location Data attribute defined by RFC
                5580. Enabling this                                             parameter allows the
                RADIUS server to use location data.
            roam_cons_oi_1 (str): Roaming Consortium OI 1 value.
            roam_cons_oi_2 (str): Roaming Consortium OI 2 value.
            roam_cons_oi_3 (str): Roaming Consortium OI 3 value.
            venue_group_type (str): Network Venue Group  Valid Values: UNSPECIFIED_UNSPECIFIED,
                ASSEMBLY_UNSPECIFIED, ASSEMBLY_ARENA, ASSEMBLY_STADIUM, ASSEMBLY_PASSENGER_TERMINAL,
                ASSEMBLY_AMPHITHEATER, ASSEMBLY_AMUSEMENT_PARK, ASSEMBLY_PLACE_OF_WORSHIP,
                ASSEMBLY_CONVENTION_CENTER, ASSEMBLY_LIBRARY, ASSEMBLY_MUSEUM, ASSEMBLY_RESTAURANT,
                ASSEMBLY_THEATER, ASSEMBLY_BAR, ASSEMBLY_COFFEE_SHOP, ASSEMBLY_ZOO_OR_AQUARIUM,
                ASSEMBLY_EMERGENCY_CORD_CENTER, BUSINESS_UNSPECIFIED, BUSINESS_DOCTOR,
                BUSINESS_BANK, BUSINESS_FIRE_STATION, BUSINESS_POLICE_STATION, BUSINESS_POST_OFFICE,
                BUSINESS_PROFESSIONAL_OFFICE, BUSINESS_RESEARCH_AND_DEV_FACILITY,
                BUSINESS_ATTORNEY_OFFICE, EDUCATIONAL_UNSPECIFIED, EDUCATIONAL_SCHOOL_PRIMARY,
                EDUCATIONAL_SCHOOL_SECONDARY, EDUCATIONAL_UNIV_OR_COLLEGE,
                FACTORY_AND_INDUSTRIAL_UNSPECIFIED, FACTORY_AND_INDUSTRIAL_FACTORY,
                INSTITUTIONAL_UNSPECIFIED, INSTITUTIONAL_HOSPITAL, INSTITUTIONAL_LONG_TERM_CARE,
                INSTITUTIONAL_ALC_DRUG_REHAB, INSTITUTIONAL_GROUP_HOME,
                INSTITUTIONAL_PRISON_OR_JAIL, MERCANTILE_UNSPECIFIED, MERCANTILE_RETAIL_STORE,
                MERCANTILE_GROCERY_MARKET, MERCANTILE_AUTO_SERVICE_STATION,
                MERCANTILE_SHOPPING_MALL, MERCANTILE_GAS_STATION, RESIDENTIAL_UNSPECIFIED,
                RESIDENTIAL_PRIVATE_RESIDENCE, RESIDENTIAL_HOTEL, RESIDENTIAL_DORMITORY,
                RESIDENTIAL_BOARDING_HOUSE, STORAGE_UNSPECIFIED, UTILITY_AND_MISC_UNSPECIFIED,
                VEHICULAR_UNSPECIFIED, VEHICULAR_AUTOMOBILE_OR_TRUCK, VEHICULAR_AIRPLANE,
                VEHICULAR_BUS, VEHICULAR_FERRY, VEHICULAR_SHIP, VEHICULAR_TRAIN,
                VEHICULAR_MOTOR_BIKE, OUTDOOR_UNSPECIFIED, OUTDOOR_MUNI_MESH_NETWORK,
                OUTDOOR_CITY_PARK, OUTDOOR_REST_AREA, OUTDOOR_TRAFFIC_CONTROL, OUTDOOR_BUS_STOP,
                OUTDOOR_KIOSK
            advertisement_profile (list): Hotspot2.0 advertisement-profile configuration.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/hotspot2"

        json_data = {
            'name': name,
            'enable': enable,
            'release_number': release_number,
            'access_network_type': access_network_type,
            'addtl_roam_cons_ois': addtl_roam_cons_ois,
            'anqp_domain_id': anqp_domain_id,
            'additional_access_steps': additional_access_steps,
            'comeback_mode': comeback_mode,
            'gas_comeback_delay': gas_comeback_delay,
            'group_frame_block': group_frame_block,
            'homogeneous_essid': homogeneous_essid,
            'enable_internet_access': enable_internet_access,
            'osen': osen,
            'osu_nai': osu_nai,
            'osu_ssid': osu_ssid,
            'p2p_cross_connect': p2p_cross_connect,
            'p2p_dev_mgmt': p2p_dev_mgmt,
            'pame_bi': pame_bi,
            'qos_map_excp': qos_map_excp,
            'qos_map_range': qos_map_range,
            'query_response_length_limit': query_response_length_limit,
            'radius_cui_disable': radius_cui_disable,
            'radius_loc_data_disable': radius_loc_data_disable,
            'roam_cons_oi_1': roam_cons_oi_1,
            'roam_cons_oi_2': roam_cons_oi_2,
            'roam_cons_oi_3': roam_cons_oi_3,
            'venue_group_type': venue_group_type,
            'advertisement_profile': advertisement_profile
        }

        return await self.post(url, json_data=json_data)

    async def hotspot2_read_hotspot2_v1(
        self,
    ) -> Response:
        """Get hotspot2.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/hotspot2"

        return await self.get(url)

    async def hotspot2_create_hotspot2_hs_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create hs-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get hs-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete hs-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_hs_profile_advertisement_profile_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Create advertisement-profile by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_advertisement_profile_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Get advertisement-profile by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_advertisement_profile_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Delete advertisement-profile by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_hs_profile_advertisement_profile_anqp3gpp_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Create anqp-3gpp by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-3gpp"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_advertisement_profile_anqp3gpp_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Get anqp-3gpp by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-3gpp"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_advertisement_profile_anqp3gpp_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Delete anqp-3gpp by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-3gpp"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_hs_profile_advertisement_profile_anqp_domain_name_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Create anqp-domain-name by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-domain-name"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_advertisement_profile_anqp_domain_name_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Get anqp-domain-name by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-domain-name"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_advertisement_profile_anqp_domain_name_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Delete anqp-domain-name by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-domain-name"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_hs_profile_advertisement_profile_anqp_ip_addr_avail_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Create anqp-ip-addr-avail by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-ip-addr-avail"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_advertisement_profile_anqp_ip_addr_avail_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Get anqp-ip-addr-avail by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-ip-addr-avail"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_advertisement_profile_anqp_ip_addr_avail_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Delete anqp-ip-addr-avail by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-ip-addr-avail"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_hs_profile_advertisement_profile_anqp_nai_realm_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Create anqp-nai-realm by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-nai-realm"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_advertisement_profile_anqp_nai_realm_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Get anqp-nai-realm by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-nai-realm"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_advertisement_profile_anqp_nai_realm_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Delete anqp-nai-realm by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-nai-realm"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_hs_profile_advertisement_profile_anqp_nwk_auth_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Create anqp-nwk-auth by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-nwk-auth"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_advertisement_profile_anqp_nwk_auth_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Get anqp-nwk-auth by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-nwk-auth"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_advertisement_profile_anqp_nwk_auth_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Delete anqp-nwk-auth by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-nwk-auth"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_hs_profile_advertisement_profile_anqp_roam_cons_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Create anqp-roam-cons by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-roam-cons"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_advertisement_profile_anqp_roam_cons_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Get anqp-roam-cons by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-roam-cons"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_advertisement_profile_anqp_roam_cons_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Delete anqp-roam-cons by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-roam-cons"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_hs_profile_advertisement_profile_anqp_venue_name_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Create anqp-venue-name by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-venue-name"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_advertisement_profile_anqp_venue_name_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Get anqp-venue-name by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-venue-name"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_advertisement_profile_anqp_venue_name_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Delete anqp-venue-name by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/anqp-venue-name"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_hs_profile_advertisement_profile_h2qp_conn_cap_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Create h2qp-conn-cap by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-conn-cap"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_advertisement_profile_h2qp_conn_cap_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Get h2qp-conn-cap by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-conn-cap"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_advertisement_profile_h2qp_conn_cap_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Delete h2qp-conn-cap by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-conn-cap"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_hs_profile_advertisement_profile_h2qp_oper_class_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Create h2qp-oper-class by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-oper-class"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_advertisement_profile_h2qp_oper_class_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Get h2qp-oper-class by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-oper-class"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_advertisement_profile_h2qp_oper_class_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Delete h2qp-oper-class by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-oper-class"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_hs_profile_advertisement_profile_h2qp_oper_name_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Create h2qp-oper-name by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-oper-name"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_advertisement_profile_h2qp_oper_name_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Get h2qp-oper-name by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-oper-name"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_advertisement_profile_h2qp_oper_name_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Delete h2qp-oper-name by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-oper-name"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_hs_profile_advertisement_profile_h2qp_osu_provider_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Create h2qp-osu-provider by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-osu-provider"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_advertisement_profile_h2qp_osu_provider_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Get h2qp-osu-provider by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-osu-provider"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_advertisement_profile_h2qp_osu_provider_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Delete h2qp-osu-provider by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-osu-provider"

        return await self.delete(url)

    async def hotspot2_create_hotspot2_hs_profile_advertisement_profile_h2qp_wan_metrics_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Create h2qp-wan-metrics by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-wan-metrics"

        return await self.post(url)

    async def hotspot2_read_hotspot2_hs_profile_advertisement_profile_h2qp_wan_metrics_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Get h2qp-wan-metrics by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-wan-metrics"

        return await self.get(url)

    async def hotspot2_delete_hotspot2_hs_profile_advertisement_profile_h2qp_wan_metrics_by_id_v1(
        self,
        name: str = None,
        profile_type: str = None,
    ) -> Response:
        """Delete h2qp-wan-metrics by ID.

        Args:
            name (str, optional): name
            profile_type (str, optional): profileType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hotspot2/{name}/advertisement-profile/{profile_type}/h2qp-wan-metrics"

        return await self.delete(url)

    async def http_proxy_create_http_proxy_servers_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        address: str = None,
        port: int = None,
        username: str = None,
        password: str = None,
        vrf: str = None,
        exception_server: List[str] = None,
    ) -> Response:
        """Create http-proxy-servers by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): HTTP Proxy Server profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): HTTP Proxy Server profile name.
            description (str): HTTP Proxy Server profile description.
            address (str): HTTP Proxy server's IP address or domain name.
            port (int): Proxy server port number.
            username (str): Proxy server username.
            password (str): Proxy server password.
            vrf (str): Proxy server's VRF configutation.
            exception_server (List[str]): exception-server

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/http-proxy-servers"

        json_data = {
            'name': name,
            'description': description,
            'address': address,
            'port': port,
            'username': username,
            'password': password,
            'vrf': vrf,
            'exception_server': exception_server
        }

        return await self.post(url, json_data=json_data)

    async def http_proxy_read_http_proxy_servers_v1(
        self,
    ) -> Response:
        """Get http-proxy-servers.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/http-proxy-servers"

        return await self.get(url)

    async def http_proxy_create_http_proxy_servers_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/http-proxy-servers/{name}"

        return await self.post(url)

    async def http_proxy_read_http_proxy_servers_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/http-proxy-servers/{name}"

        return await self.get(url)

    async def http_proxy_delete_http_proxy_servers_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/http-proxy-servers/{name}"

        return await self.delete(url)

    async def http_proxy_create_http_proxy_servers_profile_exception_server_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create exception-server by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/http-proxy-servers/{name}/exception-server"

        return await self.post(url)

    async def http_proxy_read_http_proxy_servers_profile_exception_server_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get exception-server by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/http-proxy-servers/{name}/exception-server"

        return await self.get(url)

    async def http_proxy_delete_http_proxy_servers_profile_exception_server_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete exception-server by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/http-proxy-servers/{name}/exception-server"

        return await self.delete(url)

    async def ids_create_ids_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create ids by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): IDS Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): IDS Profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ids"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def ids_read_ids_v1(
        self,
    ) -> Response:
        """Get ids.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ids"

        return await self.get(url)

    async def ids_create_ids_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}"

        return await self.post(url)

    async def ids_read_ids_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}"

        return await self.get(url)

    async def ids_delete_ids_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}"

        return await self.delete(url)

    async def ids_create_ids_profile_client_detection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create client-detection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/client-detection"

        return await self.post(url)

    async def ids_read_ids_profile_client_detection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get client-detection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/client-detection"

        return await self.get(url)

    async def ids_delete_ids_profile_client_detection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete client-detection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/client-detection"

        return await self.delete(url)

    async def ids_create_ids_profile_client_protection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create client-protection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/client-protection"

        return await self.post(url)

    async def ids_read_ids_profile_client_protection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get client-protection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/client-protection"

        return await self.get(url)

    async def ids_delete_ids_profile_client_protection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete client-protection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/client-protection"

        return await self.delete(url)

    async def ids_create_ids_profile_infrastructure_detection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create infrastructure-detection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/infrastructure-detection"

        return await self.post(url)

    async def ids_read_ids_profile_infrastructure_detection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get infrastructure-detection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/infrastructure-detection"

        return await self.get(url)

    async def ids_delete_ids_profile_infrastructure_detection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete infrastructure-detection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/infrastructure-detection"

        return await self.delete(url)

    async def ids_create_ids_profile_infrastructure_protection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create infrastructure-protection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/infrastructure-protection"

        return await self.post(url)

    async def ids_read_ids_profile_infrastructure_protection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get infrastructure-protection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/infrastructure-protection"

        return await self.get(url)

    async def ids_delete_ids_profile_infrastructure_protection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete infrastructure-protection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/infrastructure-protection"

        return await self.delete(url)

    async def ids_create_ids_profile_ghosttunnel_client_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ghosttunnel-client by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/ghosttunnel-client"

        return await self.post(url)

    async def ids_read_ids_profile_ghosttunnel_client_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ghosttunnel-client by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/ghosttunnel-client"

        return await self.get(url)

    async def ids_create_ids_profile_ghosttunnel_server_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ghosttunnel-server by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/ghosttunnel-server"

        return await self.post(url)

    async def ids_read_ids_profile_ghosttunnel_server_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ghosttunnel-server by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/ghosttunnel-server"

        return await self.get(url)

    async def ids_create_ids_profile_wired_containment_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create wired-containment by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/wired-containment"

        return await self.post(url)

    async def ids_read_ids_profile_wired_containment_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get wired-containment by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/wired-containment"

        return await self.get(url)

    async def ids_create_ids_profile_wireless_containment_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create wireless-containment by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/wireless-containment"

        return await self.post(url)

    async def ids_read_ids_profile_wireless_containment_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get wireless-containment by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/wireless-containment"

        return await self.get(url)

    async def ids_create_ids_profile_vendor_ie_exclusion_by_id_v1(
        self,
        name: str = None,
        oui: str = None,
        type: str = None,
    ) -> Response:
        """Create vendor-ie-exclusion by ID.

        Args:
            name (str, optional): name
            oui (str, optional): oui
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/vendor-ie-exclusion/{oui}/{type}"

        return await self.post(url)

    async def ids_read_ids_profile_vendor_ie_exclusion_by_id_v1(
        self,
        name: str = None,
        oui: str = None,
        type: str = None,
    ) -> Response:
        """Get vendor-ie-exclusion by ID.

        Args:
            name (str, optional): name
            oui (str, optional): oui
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/vendor-ie-exclusion/{oui}/{type}"

        return await self.get(url)

    async def ids_delete_ids_profile_vendor_ie_exclusion_by_id_v1(
        self,
        name: str = None,
        oui: str = None,
        type: str = None,
    ) -> Response:
        """Delete vendor-ie-exclusion by ID.

        Args:
            name (str, optional): name
            oui (str, optional): oui
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/vendor-ie-exclusion/{oui}/{type}"

        return await self.delete(url)

    async def ids_create_ids_profile_wired_protection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create wired-protection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/wired-protection"

        return await self.post(url)

    async def ids_read_ids_profile_wired_protection_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get wired-protection by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ids/{name}/wired-protection"

        return await self.get(url)

    async def inbound_firewall_create_inbound_firewalls_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create inbound-firewalls by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of inbound-firewall profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of inbound-firewall profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/inbound-firewalls"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def inbound_firewall_read_inbound_firewalls_v1(
        self,
    ) -> Response:
        """Get inbound-firewalls.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/inbound-firewalls"

        return await self.get(url)

    async def inbound_firewall_create_inbound_firewalls_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}"

        return await self.post(url)

    async def inbound_firewall_read_inbound_firewalls_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}"

        return await self.get(url)

    async def inbound_firewall_delete_inbound_firewalls_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}"

        return await self.delete(url)

    async def inbound_firewall_create_inbound_firewalls_profile_inbound_firewall_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create inbound-firewall-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}/inbound-firewall-rule/{position}"

        return await self.post(url)

    async def inbound_firewall_read_inbound_firewalls_profile_inbound_firewall_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get inbound-firewall-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}/inbound-firewall-rule/{position}"

        return await self.get(url)

    async def inbound_firewall_delete_inbound_firewalls_profile_inbound_firewall_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Delete inbound-firewall-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}/inbound-firewall-rule/{position}"

        return await self.delete(url)

    async def inbound_firewall_create_inbound_firewalls_profile_inbound_firewall_rule_source_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create source by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}/inbound-firewall-rule/{position}/source"

        return await self.post(url)

    async def inbound_firewall_read_inbound_firewalls_profile_inbound_firewall_rule_source_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get source by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}/inbound-firewall-rule/{position}/source"

        return await self.get(url)

    async def inbound_firewall_create_inbound_firewalls_profile_inbound_firewall_rule_destination_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create destination by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}/inbound-firewall-rule/{position}/destination"

        return await self.post(url)

    async def inbound_firewall_read_inbound_firewalls_profile_inbound_firewall_rule_destination_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get destination by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}/inbound-firewall-rule/{position}/destination"

        return await self.get(url)

    async def inbound_firewall_create_inbound_firewalls_profile_inbound_firewall_rule_services_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create services by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}/inbound-firewall-rule/{position}/services"

        return await self.post(url)

    async def inbound_firewall_read_inbound_firewalls_profile_inbound_firewall_rule_services_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get services by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}/inbound-firewall-rule/{position}/services"

        return await self.get(url)

    async def inbound_firewall_create_inbound_firewalls_profile_inbound_firewall_rule_primary_actions_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create primary-actions by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}/inbound-firewall-rule/{position}/primary-actions"

        return await self.post(url)

    async def inbound_firewall_read_inbound_firewalls_profile_inbound_firewall_rule_primary_actions_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get primary-actions by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}/inbound-firewall-rule/{position}/primary-actions"

        return await self.get(url)

    async def inbound_firewall_create_inbound_firewalls_profile_inbound_firewall_rule_secondary_actions_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create secondary-actions by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}/inbound-firewall-rule/{position}/secondary-actions"

        return await self.post(url)

    async def inbound_firewall_read_inbound_firewalls_profile_inbound_firewall_rule_secondary_actions_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get secondary-actions by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/inbound-firewalls/{name}/inbound-firewall-rule/{position}/secondary-actions"

        return await self.get(url)

    async def intelligent_forwarding_create_aruba_intelligent_forwarding_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        fib_optimization_ageout_time: int = None,
        fib_optimization_host_route_ipv4: bool = None,
        fib_optimization_exclude_nexthop_ipv4: List[str] = None,
    ) -> Response:
        """Create aruba-intelligent-forwarding by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): All AIF (Aruba Intelligent Forwarding) Profile configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): AIF (Aruba Intelligent Forwarding) profile name.
            description (str): AIF (Aruba Intelligent Forwarding) profile description.
            fib_optimization_ageout_time (int): Configure FIB (Forwarding Information Base)
                Optimization route age-out time
            fib_optimization_host_route_ipv4 (bool): Enable FIB (Forwarding Information Base)
                optimization for IPV4 Routes
            fib_optimization_exclude_nexthop_ipv4 (List[str]): fib-optimization-exclude-nexthop-ipv4

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aruba-intelligent-forwarding"

        json_data = {
            'name': name,
            'description': description,
            'fib_optimization_ageout_time': fib_optimization_ageout_time,
            'fib_optimization_host_route_ipv4': fib_optimization_host_route_ipv4,
            'fib_optimization_exclude_nexthop_ipv4': fib_optimization_exclude_nexthop_ipv4
        }

        return await self.post(url, json_data=json_data)

    async def intelligent_forwarding_read_aruba_intelligent_forwarding_v1(
        self,
    ) -> Response:
        """Get aruba-intelligent-forwarding.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aruba-intelligent-forwarding"

        return await self.get(url)

    async def intelligent_forwarding_create_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.post(url)

    async def intelligent_forwarding_read_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.get(url)

    async def intelligent_forwarding_delete_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.delete(url)

    async def intelligent_forwarding_create_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.post(url)

    async def intelligent_forwarding_read_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.get(url)

    async def intelligent_forwarding_delete_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.delete(url)

    async def interface_ethernet_create_aruba_intelligent_forwarding_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        fib_optimization_ageout_time: int = None,
        fib_optimization_host_route_ipv4: bool = None,
        fib_optimization_exclude_nexthop_ipv4: List[str] = None,
    ) -> Response:
        """Create aruba-intelligent-forwarding by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): All AIF (Aruba Intelligent Forwarding) Profile configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): AIF (Aruba Intelligent Forwarding) profile name.
            description (str): AIF (Aruba Intelligent Forwarding) profile description.
            fib_optimization_ageout_time (int): Configure FIB (Forwarding Information Base)
                Optimization route age-out time
            fib_optimization_host_route_ipv4 (bool): Enable FIB (Forwarding Information Base)
                optimization for IPV4 Routes
            fib_optimization_exclude_nexthop_ipv4 (List[str]): fib-optimization-exclude-nexthop-ipv4

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aruba-intelligent-forwarding"

        json_data = {
            'name': name,
            'description': description,
            'fib_optimization_ageout_time': fib_optimization_ageout_time,
            'fib_optimization_host_route_ipv4': fib_optimization_host_route_ipv4,
            'fib_optimization_exclude_nexthop_ipv4': fib_optimization_exclude_nexthop_ipv4
        }

        return await self.post(url, json_data=json_data)

    async def interface_ethernet_read_aruba_intelligent_forwarding_v1(
        self,
    ) -> Response:
        """Get aruba-intelligent-forwarding.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aruba-intelligent-forwarding"

        return await self.get(url)

    async def interface_ethernet_create_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.post(url)

    async def interface_ethernet_read_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.get(url)

    async def interface_ethernet_delete_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.delete(url)

    async def interface_ethernet_create_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.post(url)

    async def interface_ethernet_read_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.get(url)

    async def interface_ethernet_delete_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.delete(url)

    async def interface_loopback_create_aruba_intelligent_forwarding_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        fib_optimization_ageout_time: int = None,
        fib_optimization_host_route_ipv4: bool = None,
        fib_optimization_exclude_nexthop_ipv4: List[str] = None,
    ) -> Response:
        """Create aruba-intelligent-forwarding by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): All AIF (Aruba Intelligent Forwarding) Profile configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): AIF (Aruba Intelligent Forwarding) profile name.
            description (str): AIF (Aruba Intelligent Forwarding) profile description.
            fib_optimization_ageout_time (int): Configure FIB (Forwarding Information Base)
                Optimization route age-out time
            fib_optimization_host_route_ipv4 (bool): Enable FIB (Forwarding Information Base)
                optimization for IPV4 Routes
            fib_optimization_exclude_nexthop_ipv4 (List[str]): fib-optimization-exclude-nexthop-ipv4

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aruba-intelligent-forwarding"

        json_data = {
            'name': name,
            'description': description,
            'fib_optimization_ageout_time': fib_optimization_ageout_time,
            'fib_optimization_host_route_ipv4': fib_optimization_host_route_ipv4,
            'fib_optimization_exclude_nexthop_ipv4': fib_optimization_exclude_nexthop_ipv4
        }

        return await self.post(url, json_data=json_data)

    async def interface_loopback_read_aruba_intelligent_forwarding_v1(
        self,
    ) -> Response:
        """Get aruba-intelligent-forwarding.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aruba-intelligent-forwarding"

        return await self.get(url)

    async def interface_loopback_create_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.post(url)

    async def interface_loopback_read_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.get(url)

    async def interface_loopback_delete_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.delete(url)

    async def interface_loopback_create_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.post(url)

    async def interface_loopback_read_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.get(url)

    async def interface_loopback_delete_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.delete(url)

    async def interface_management_create_aruba_intelligent_forwarding_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        fib_optimization_ageout_time: int = None,
        fib_optimization_host_route_ipv4: bool = None,
        fib_optimization_exclude_nexthop_ipv4: List[str] = None,
    ) -> Response:
        """Create aruba-intelligent-forwarding by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): All AIF (Aruba Intelligent Forwarding) Profile configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): AIF (Aruba Intelligent Forwarding) profile name.
            description (str): AIF (Aruba Intelligent Forwarding) profile description.
            fib_optimization_ageout_time (int): Configure FIB (Forwarding Information Base)
                Optimization route age-out time
            fib_optimization_host_route_ipv4 (bool): Enable FIB (Forwarding Information Base)
                optimization for IPV4 Routes
            fib_optimization_exclude_nexthop_ipv4 (List[str]): fib-optimization-exclude-nexthop-ipv4

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aruba-intelligent-forwarding"

        json_data = {
            'name': name,
            'description': description,
            'fib_optimization_ageout_time': fib_optimization_ageout_time,
            'fib_optimization_host_route_ipv4': fib_optimization_host_route_ipv4,
            'fib_optimization_exclude_nexthop_ipv4': fib_optimization_exclude_nexthop_ipv4
        }

        return await self.post(url, json_data=json_data)

    async def interface_management_read_aruba_intelligent_forwarding_v1(
        self,
    ) -> Response:
        """Get aruba-intelligent-forwarding.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aruba-intelligent-forwarding"

        return await self.get(url)

    async def interface_management_create_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.post(url)

    async def interface_management_read_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.get(url)

    async def interface_management_delete_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.delete(url)

    async def interface_management_create_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.post(url)

    async def interface_management_read_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.get(url)

    async def interface_management_delete_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.delete(url)

    async def interface_portchannel_create_aruba_intelligent_forwarding_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        fib_optimization_ageout_time: int = None,
        fib_optimization_host_route_ipv4: bool = None,
        fib_optimization_exclude_nexthop_ipv4: List[str] = None,
    ) -> Response:
        """Create aruba-intelligent-forwarding by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): All AIF (Aruba Intelligent Forwarding) Profile configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): AIF (Aruba Intelligent Forwarding) profile name.
            description (str): AIF (Aruba Intelligent Forwarding) profile description.
            fib_optimization_ageout_time (int): Configure FIB (Forwarding Information Base)
                Optimization route age-out time
            fib_optimization_host_route_ipv4 (bool): Enable FIB (Forwarding Information Base)
                optimization for IPV4 Routes
            fib_optimization_exclude_nexthop_ipv4 (List[str]): fib-optimization-exclude-nexthop-ipv4

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aruba-intelligent-forwarding"

        json_data = {
            'name': name,
            'description': description,
            'fib_optimization_ageout_time': fib_optimization_ageout_time,
            'fib_optimization_host_route_ipv4': fib_optimization_host_route_ipv4,
            'fib_optimization_exclude_nexthop_ipv4': fib_optimization_exclude_nexthop_ipv4
        }

        return await self.post(url, json_data=json_data)

    async def interface_portchannel_read_aruba_intelligent_forwarding_v1(
        self,
    ) -> Response:
        """Get aruba-intelligent-forwarding.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aruba-intelligent-forwarding"

        return await self.get(url)

    async def interface_portchannel_create_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.post(url)

    async def interface_portchannel_read_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.get(url)

    async def interface_portchannel_delete_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.delete(url)

    async def interface_portchannel_create_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.post(url)

    async def interface_portchannel_read_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.get(url)

    async def interface_portchannel_delete_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.delete(url)

    async def interface_subinterface_create_sub_interfaces_by_id_v1(
        self,
        interface: list,
    ) -> Response:
        """Create sub-interfaces by ID.

        Args:
            interface (list): Sub Interface

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/sub-interfaces"

        json_data = {
            'interface': interface
        }

        return await self.post(url, json_data=json_data)

    async def interface_subinterface_read_sub_interfaces_v1(
        self,
    ) -> Response:
        """Get sub-interfaces.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/sub-interfaces"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create interface by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get interface by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}"

        return await self.get(url)

    async def interface_subinterface_delete_sub_interfaces_interface_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Delete interface by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}"

        return await self.delete(url)

    async def interface_subinterface_create_sub_interfaces_interface_urpf_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create urpf by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/urpf"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_urpf_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get urpf by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/urpf"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_ip_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create ip by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ip"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_ip_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get ip by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ip"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_arp_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create arp by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/arp"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_arp_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get arp by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/arp"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_arp_neighbor_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        address: str = None,
    ) -> Response:
        """Create neighbor by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/arp/neighbor/{address}"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_arp_neighbor_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        address: str = None,
    ) -> Response:
        """Get neighbor by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/arp/neighbor/{address}"

        return await self.get(url)

    async def interface_subinterface_delete_sub_interfaces_interface_arp_neighbor_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        address: str = None,
    ) -> Response:
        """Delete neighbor by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/arp/neighbor/{address}"

        return await self.delete(url)

    async def interface_subinterface_create_sub_interfaces_interface_nd_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create nd by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/nd"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_nd_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get nd by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/nd"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_nd_neighbor_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        address: str = None,
    ) -> Response:
        """Create neighbor by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/nd/neighbor/{address}"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_nd_neighbor_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        address: str = None,
    ) -> Response:
        """Get neighbor by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/nd/neighbor/{address}"

        return await self.get(url)

    async def interface_subinterface_delete_sub_interfaces_interface_nd_neighbor_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        address: str = None,
    ) -> Response:
        """Delete neighbor by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/nd/neighbor/{address}"

        return await self.delete(url)

    async def interface_subinterface_create_sub_interfaces_interface_ipv4_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create ipv4 by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv4"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_ipv4_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get ipv4 by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv4"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_ipv4_secondary_ip_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create secondary-ip by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv4/secondary-ip"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_ipv4_secondary_ip_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get secondary-ip by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv4/secondary-ip"

        return await self.get(url)

    async def interface_subinterface_delete_sub_interfaces_interface_ipv4_secondary_ip_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Delete secondary-ip by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv4/secondary-ip"

        return await self.delete(url)

    async def interface_subinterface_create_sub_interfaces_interface_ipv4_helper_address_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create helper-address by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv4/helper-address"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_ipv4_helper_address_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get helper-address by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv4/helper-address"

        return await self.get(url)

    async def interface_subinterface_delete_sub_interfaces_interface_ipv4_helper_address_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Delete helper-address by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv4/helper-address"

        return await self.delete(url)

    async def interface_subinterface_create_sub_interfaces_interface_ipv6_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create ipv6 by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_ipv6_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get ipv6 by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_ipv6_addresses_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        address: str = None,
    ) -> Response:
        """Create addresses by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6/addresses/{address}"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_ipv6_addresses_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        address: str = None,
    ) -> Response:
        """Get addresses by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6/addresses/{address}"

        return await self.get(url)

    async def interface_subinterface_delete_sub_interfaces_interface_ipv6_addresses_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        address: str = None,
    ) -> Response:
        """Delete addresses by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6/addresses/{address}"

        return await self.delete(url)

    async def interface_subinterface_create_sub_interfaces_interface_ipv6_pd_address_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create pd-address by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6/pd-address"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_ipv6_pd_address_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get pd-address by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6/pd-address"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_ipv6_helper_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        address: str = None,
    ) -> Response:
        """Create helper by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6/helper/{address}"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_ipv6_helper_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        address: str = None,
    ) -> Response:
        """Get helper by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6/helper/{address}"

        return await self.get(url)

    async def interface_subinterface_delete_sub_interfaces_interface_ipv6_helper_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        address: str = None,
    ) -> Response:
        """Delete helper by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6/helper/{address}"

        return await self.delete(url)

    async def interface_subinterface_create_sub_interfaces_interface_ipv4_router_discovery_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create ipv4-router-discovery by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv4-router-discovery"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_ipv4_router_discovery_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get ipv4-router-discovery by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv4-router-discovery"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_ipv6_neighbor_discovery_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create ipv6-neighbor-discovery by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6-neighbor-discovery"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_ipv6_neighbor_discovery_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get ipv6-neighbor-discovery by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6-neighbor-discovery"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_ipv6_neighbor_discovery_router_advertisement_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create router-advertisement by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6-neighbor-discovery/router-advertisement"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_ipv6_neighbor_discovery_router_advertisement_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get router-advertisement by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/ipv6-neighbor-discovery/router-advertisement"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_pim_sparse_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create pim-sparse by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/pim-sparse"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_pim_sparse_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get pim-sparse by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/pim-sparse"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_pim6_sparse_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create pim6-sparse by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/pim6-sparse"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_pim6_sparse_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get pim6-sparse by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/pim6-sparse"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_pim_dense_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create pim-dense by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/pim-dense"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_pim_dense_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get pim-dense by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/pim-dense"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_pim6_dense_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create pim6-dense by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/pim6-dense"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_pim6_dense_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get pim6-dense by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/pim6-dense"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_igmp_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create igmp by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/igmp"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_igmp_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get igmp by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/igmp"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_igmp_static_group_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create static-group by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/igmp/static-group"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_igmp_static_group_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get static-group by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/igmp/static-group"

        return await self.get(url)

    async def interface_subinterface_delete_sub_interfaces_interface_igmp_static_group_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Delete static-group by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/igmp/static-group"

        return await self.delete(url)

    async def interface_subinterface_create_sub_interfaces_interface_mld_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create mld by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/mld"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_mld_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get mld by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/mld"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_mld_static_group_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create static-group by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/mld/static-group"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_mld_static_group_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get static-group by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/mld/static-group"

        return await self.get(url)

    async def interface_subinterface_delete_sub_interfaces_interface_mld_static_group_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Delete static-group by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/mld/static-group"

        return await self.delete(url)

    async def interface_subinterface_create_sub_interfaces_interface_vrrp_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Create vrrp by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/vrrp"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_vrrp_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
    ) -> Response:
        """Get vrrp by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/vrrp"

        return await self.get(url)

    async def interface_subinterface_create_sub_interfaces_interface_vrrp_virtual_router_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        router_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Create virtual-router by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            router_id (str, optional): routerId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/vrrp/virtual-router/{router_id}/{address_family}"

        return await self.post(url)

    async def interface_subinterface_read_sub_interfaces_interface_vrrp_virtual_router_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        router_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Get virtual-router by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            router_id (str, optional): routerId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/vrrp/virtual-router/{router_id}/{address_family}"

        return await self.get(url)

    async def interface_subinterface_delete_sub_interfaces_interface_vrrp_virtual_router_by_id_v1(
        self,
        name: str = None,
        parent_type: str = None,
        router_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete virtual-router by ID.

        Args:
            name (str, optional): name
            parent_type (str, optional): parentType
            router_id (str, optional): routerId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sub-interfaces/{name}/{parent_type}/vrrp/virtual-router/{router_id}/{address_family}"

        return await self.delete(url)

    async def interface_tunnel_group_create_tunnel_groups_by_id_v1(
        self,
        name: str,
        description: str,
        payload_type: str,
        tunnels: List[str],
        preemptive_failover: bool,
    ) -> Response:
        """Create tunnel-groups by ID.

        Args:
            name (str): Tunnel-Group name
            description (str): Tunnel-Group description
            payload_type (str): Payload type of member tunnels  Valid Values: L2, L3
            tunnels (List[str]): tunnels
            preemptive_failover (bool): Enable pre-emptive failover

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/tunnel-groups"

        json_data = {
            'name': name,
            'description': description,
            'payload_type': payload_type,
            'tunnels': tunnels,
            'preemptive_failover': preemptive_failover
        }

        return await self.post(url, json_data=json_data)

    async def interface_tunnel_group_read_tunnel_groups_v1(
        self,
    ) -> Response:
        """Get tunnel-groups.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/tunnel-groups"

        return await self.get(url)

    async def interface_tunnel_group_create_tunnel_groups_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel-groups/{name}"

        return await self.post(url)

    async def interface_tunnel_group_read_tunnel_groups_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel-groups/{name}"

        return await self.get(url)

    async def interface_tunnel_group_delete_tunnel_groups_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel-groups/{name}"

        return await self.delete(url)

    async def interface_tunnel_group_create_tunnel_groups_group_tunnels_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create tunnels by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel-groups/{name}/tunnels"

        return await self.post(url)

    async def interface_tunnel_group_read_tunnel_groups_group_tunnels_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get tunnels by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel-groups/{name}/tunnels"

        return await self.get(url)

    async def interface_tunnel_group_delete_tunnel_groups_group_tunnels_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete tunnels by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel-groups/{name}/tunnels"

        return await self.delete(url)

    async def interface_tunnel_create_tunnel_by_id_v1(
        self,
        interface: list,
    ) -> Response:
        """Create tunnel by ID.

        Args:
            interface (list): Tunnel Interface configuration.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/tunnel"

        json_data = {
            'interface': interface
        }

        return await self.post(url, json_data=json_data)

    async def interface_tunnel_read_tunnel_v1(
        self,
    ) -> Response:
        """Get tunnel.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/tunnel"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create interface by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get interface by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}"

        return await self.get(url)

    async def interface_tunnel_delete_tunnel_interface_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Delete interface by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}"

        return await self.delete(url)

    async def interface_tunnel_create_tunnel_interface_ipv6_address_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create ipv6-address by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipv6-address"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ipv6_address_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get ipv6-address by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipv6-address"

        return await self.get(url)

    async def interface_tunnel_delete_tunnel_interface_ipv6_address_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Delete ipv6-address by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipv6-address"

        return await self.delete(url)

    async def interface_tunnel_create_tunnel_interface_ipv6_prefix_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create ipv6-prefix by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipv6-prefix"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ipv6_prefix_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get ipv6-prefix by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipv6-prefix"

        return await self.get(url)

    async def interface_tunnel_delete_tunnel_interface_ipv6_prefix_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Delete ipv6-prefix by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipv6-prefix"

        return await self.delete(url)

    async def interface_tunnel_create_tunnel_interface_ttl_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create ttl by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ttl"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ttl_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get ttl by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ttl"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_ip_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create ip by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ip_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get ip by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_gre_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create gre by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_gre_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get gre by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_gre_trusted_vlans_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create trusted-vlans by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/trusted-vlans"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_gre_trusted_vlans_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get trusted-vlans by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/trusted-vlans"

        return await self.get(url)

    async def interface_tunnel_delete_tunnel_interface_gre_trusted_vlans_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Delete trusted-vlans by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/trusted-vlans"

        return await self.delete(url)

    async def interface_tunnel_create_tunnel_interface_gre_trusted_vlan_ranges_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create trusted-vlan-ranges by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/trusted-vlan-ranges"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_gre_trusted_vlan_ranges_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get trusted-vlan-ranges by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/trusted-vlan-ranges"

        return await self.get(url)

    async def interface_tunnel_delete_tunnel_interface_gre_trusted_vlan_ranges_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Delete trusted-vlan-ranges by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/trusted-vlan-ranges"

        return await self.delete(url)

    async def interface_tunnel_create_tunnel_interface_gre_allowed_vlan_ids_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create allowed-vlan-ids by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/allowed-vlan-ids"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_gre_allowed_vlan_ids_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get allowed-vlan-ids by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/allowed-vlan-ids"

        return await self.get(url)

    async def interface_tunnel_delete_tunnel_interface_gre_allowed_vlan_ids_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Delete allowed-vlan-ids by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/allowed-vlan-ids"

        return await self.delete(url)

    async def interface_tunnel_create_tunnel_interface_gre_allowed_vlan_ranges_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create allowed-vlan-ranges by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/allowed-vlan-ranges"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_gre_allowed_vlan_ranges_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get allowed-vlan-ranges by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/allowed-vlan-ranges"

        return await self.get(url)

    async def interface_tunnel_delete_tunnel_interface_gre_allowed_vlan_ranges_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Delete allowed-vlan-ranges by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/allowed-vlan-ranges"

        return await self.delete(url)

    async def interface_tunnel_create_tunnel_interface_gre_pim4_sparse_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create pim4-sparse by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/pim4-sparse"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_gre_pim4_sparse_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get pim4-sparse by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/pim4-sparse"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_gre_pim6_sparse_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create pim6-sparse by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/pim6-sparse"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_gre_pim6_sparse_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get pim6-sparse by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/pim6-sparse"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_gre_acl_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create acl by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/acl"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_gre_acl_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get acl by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/acl"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_gre_keepalive_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create keepalive by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/keepalive"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_gre_keepalive_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get keepalive by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/gre/keepalive"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_ip6in4_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create ip6in4 by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip6in4"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ip6in4_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get ip6in4 by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip6in4"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_ip6in4_tos_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create tos by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip6in4/tos"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ip6in4_tos_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get tos by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip6in4/tos"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_ip6in4_acl_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create acl by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip6in4/acl"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ip6in4_acl_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get acl by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip6in4/acl"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_ip6in4_ipv6_nd_ra_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create ipv6-nd-ra by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip6in4/ipv6-nd-ra"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ip6in4_ipv6_nd_ra_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get ipv6-nd-ra by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip6in4/ipv6-nd-ra"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_ip6in6_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create ip6in6 by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip6in6"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ip6in6_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get ip6in6 by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip6in6"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_ip6in6_pim6_sparse_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create pim6-sparse by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip6in6/pim6-sparse"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ip6in6_pim6_sparse_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get pim6-sparse by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ip6in6/pim6-sparse"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_vxlan_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create vxlan by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/vxlan"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_vxlan_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get vxlan by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/vxlan"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_vxlan_vni_list_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create vni-list by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/vxlan/vni-list"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_vxlan_vni_list_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get vni-list by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/vxlan/vni-list"

        return await self.get(url)

    async def interface_tunnel_delete_tunnel_interface_vxlan_vni_list_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Delete vni-list by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/vxlan/vni-list"

        return await self.delete(url)

    async def interface_tunnel_create_tunnel_interface_vxlan_loop_protect_vlans_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create loop-protect-vlans by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/vxlan/loop-protect-vlans"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_vxlan_loop_protect_vlans_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get loop-protect-vlans by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/vxlan/loop-protect-vlans"

        return await self.get(url)

    async def interface_tunnel_delete_tunnel_interface_vxlan_loop_protect_vlans_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Delete loop-protect-vlans by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/vxlan/loop-protect-vlans"

        return await self.delete(url)

    async def interface_tunnel_create_tunnel_interface_vxlan_mac_notify_traps_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create mac-notify-traps by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/vxlan/mac-notify-traps"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_vxlan_mac_notify_traps_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get mac-notify-traps by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/vxlan/mac-notify-traps"

        return await self.get(url)

    async def interface_tunnel_delete_tunnel_interface_vxlan_mac_notify_traps_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Delete mac-notify-traps by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/vxlan/mac-notify-traps"

        return await self.delete(url)

    async def interface_tunnel_create_tunnel_interface_ipsec_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create ipsec by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipsec"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ipsec_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get ipsec by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipsec"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_ipsec_ipsec_map_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create ipsec-map by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipsec/ipsec-map"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ipsec_ipsec_map_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get ipsec-map by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipsec/ipsec-map"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_ipsec_isakmp_ike_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create isakmp-ike by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipsec/isakmp-ike"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ipsec_isakmp_ike_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get isakmp-ike by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipsec/isakmp-ike"

        return await self.get(url)

    async def interface_tunnel_create_tunnel_interface_ipsec_pki_cert_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Create pki-cert by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipsec/pki-cert"

        return await self.post(url)

    async def interface_tunnel_read_tunnel_interface_ipsec_pki_cert_by_id_v1(
        self,
        id: str = None,
    ) -> Response:
        """Get pki-cert by ID.

        Args:
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel/{id}/ipsec/pki-cert"

        return await self.get(url)

    async def interface_vlan_create_aruba_intelligent_forwarding_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        fib_optimization_ageout_time: int = None,
        fib_optimization_host_route_ipv4: bool = None,
        fib_optimization_exclude_nexthop_ipv4: List[str] = None,
    ) -> Response:
        """Create aruba-intelligent-forwarding by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): All AIF (Aruba Intelligent Forwarding) Profile configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): AIF (Aruba Intelligent Forwarding) profile name.
            description (str): AIF (Aruba Intelligent Forwarding) profile description.
            fib_optimization_ageout_time (int): Configure FIB (Forwarding Information Base)
                Optimization route age-out time
            fib_optimization_host_route_ipv4 (bool): Enable FIB (Forwarding Information Base)
                optimization for IPV4 Routes
            fib_optimization_exclude_nexthop_ipv4 (List[str]): fib-optimization-exclude-nexthop-ipv4

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aruba-intelligent-forwarding"

        json_data = {
            'name': name,
            'description': description,
            'fib_optimization_ageout_time': fib_optimization_ageout_time,
            'fib_optimization_host_route_ipv4': fib_optimization_host_route_ipv4,
            'fib_optimization_exclude_nexthop_ipv4': fib_optimization_exclude_nexthop_ipv4
        }

        return await self.post(url, json_data=json_data)

    async def interface_vlan_read_aruba_intelligent_forwarding_v1(
        self,
    ) -> Response:
        """Get aruba-intelligent-forwarding.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/aruba-intelligent-forwarding"

        return await self.get(url)

    async def interface_vlan_create_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.post(url)

    async def interface_vlan_read_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.get(url)

    async def interface_vlan_delete_aruba_intelligent_forwarding_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}"

        return await self.delete(url)

    async def interface_vlan_create_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.post(url)

    async def interface_vlan_read_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.get(url)

    async def interface_vlan_delete_aruba_intelligent_forwarding_profile_fib_optimization_exclude_nexthop_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete fib-optimization-exclude-nexthop-ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/aruba-intelligent-forwarding/{name}/fib-optimization-exclude-nexthop-ipv4"

        return await self.delete(url)

    async def interface_vxlan_create_vxlan_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create vxlan by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for VxLAN parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Global profile for VxLAN parameters

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vxlan"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def interface_vxlan_read_vxlan_v1(
        self,
    ) -> Response:
        """Get vxlan.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vxlan"

        return await self.get(url)

    async def interface_vxlan_create_vxlan_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vxlan/{name}"

        return await self.post(url)

    async def interface_vxlan_read_vxlan_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vxlan/{name}"

        return await self.get(url)

    async def interface_vxlan_delete_vxlan_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vxlan/{name}"

        return await self.delete(url)

    async def interface_vxlan_create_vxlan_profile_vni_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Create vni by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vxlan/{name}/vni/{id}"

        return await self.post(url)

    async def interface_vxlan_read_vxlan_profile_vni_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Get vni by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vxlan/{name}/vni/{id}"

        return await self.get(url)

    async def interface_vxlan_delete_vxlan_profile_vni_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Delete vni by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vxlan/{name}/vni/{id}"

        return await self.delete(url)

    async def iot_create_iot_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        channel: int = None,
        server_name: str = None,
        server_ip: str = None,
        tls_auth: bool = False,
        tls_fqdn_verify: bool = False,
    ) -> Response:
        """Create iot by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for IoT parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            channel (int, optional): ESL channel
            server_name (str, optional): ESL server name
            server_ip (str, optional): ESL server ip addr
            tls_auth (bool, optional): Enable TLS authentication of the AP with the SES-Imagotag ESL
                server
            tls_fqdn_verify (bool, optional): Verify ESL TLS FQDN enable

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/iot"

        json_data = {
            'channel': channel,
            'server_name': server_name,
            'server_ip': server_ip,
            'tls_auth': tls_auth,
            'tls_fqdn_verify': tls_fqdn_verify
        }

        return await self.post(url, json_data=json_data)

    async def iot_read_iot_v1(
        self,
    ) -> Response:
        """Get iot.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/iot"

        return await self.get(url)

    async def iot_create_iot_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}"

        return await self.post(url)

    async def iot_read_iot_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}"

        return await self.get(url)

    async def iot_delete_iot_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}"

        return await self.delete(url)

    async def iot_create_iot_profile_radio_by_id_v1(
        self,
        name: str = None,
        radio_name: str = None,
    ) -> Response:
        """Create radio by ID.

        Args:
            name (str, optional): name
            radio_name (str, optional): radioName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/radio/{radio_name}"

        return await self.post(url)

    async def iot_read_iot_profile_radio_by_id_v1(
        self,
        name: str = None,
        radio_name: str = None,
    ) -> Response:
        """Get radio by ID.

        Args:
            name (str, optional): name
            radio_name (str, optional): radioName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/radio/{radio_name}"

        return await self.get(url)

    async def iot_delete_iot_profile_radio_by_id_v1(
        self,
        name: str = None,
        radio_name: str = None,
    ) -> Response:
        """Delete radio by ID.

        Args:
            name (str, optional): name
            radio_name (str, optional): radioName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/radio/{radio_name}"

        return await self.delete(url)

    async def iot_create_iot_profile_transport_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Create transport by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}"

        return await self.post(url)

    async def iot_read_iot_profile_transport_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Get transport by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}"

        return await self.get(url)

    async def iot_delete_iot_profile_transport_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Delete transport by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}"

        return await self.delete(url)

    async def iot_create_iot_profile_transport_zsd_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Create zsd-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/zsd-filter"

        return await self.post(url)

    async def iot_read_iot_profile_transport_zsd_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Get zsd-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/zsd-filter"

        return await self.get(url)

    async def iot_delete_iot_profile_transport_zsd_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Delete zsd-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/zsd-filter"

        return await self.delete(url)

    async def iot_create_iot_profile_transport_company_identifier_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Create company-identifier-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/company-identifier-filter"

        return await self.post(url)

    async def iot_read_iot_profile_transport_company_identifier_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Get company-identifier-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/company-identifier-filter"

        return await self.get(url)

    async def iot_delete_iot_profile_transport_company_identifier_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Delete company-identifier-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/company-identifier-filter"

        return await self.delete(url)

    async def iot_create_iot_profile_transport_data_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Create data-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/data-filter"

        return await self.post(url)

    async def iot_read_iot_profile_transport_data_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Get data-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/data-filter"

        return await self.get(url)

    async def iot_delete_iot_profile_transport_data_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Delete data-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/data-filter"

        return await self.delete(url)

    async def iot_create_iot_profile_transport_local_name_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Create local-name-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/local-name-filter"

        return await self.post(url)

    async def iot_read_iot_profile_transport_local_name_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Get local-name-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/local-name-filter"

        return await self.get(url)

    async def iot_delete_iot_profile_transport_local_name_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Delete local-name-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/local-name-filter"

        return await self.delete(url)

    async def iot_create_iot_profile_transport_mac_oui_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Create mac-oui-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/mac-oui-filter"

        return await self.post(url)

    async def iot_read_iot_profile_transport_mac_oui_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Get mac-oui-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/mac-oui-filter"

        return await self.get(url)

    async def iot_delete_iot_profile_transport_mac_oui_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Delete mac-oui-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/mac-oui-filter"

        return await self.delete(url)

    async def iot_create_iot_profile_transport_payload_content_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Create payload-content by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/payload-content"

        return await self.post(url)

    async def iot_read_iot_profile_transport_payload_content_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Get payload-content by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/payload-content"

        return await self.get(url)

    async def iot_delete_iot_profile_transport_payload_content_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Delete payload-content by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/payload-content"

        return await self.delete(url)

    async def iot_create_iot_profile_transport_proxyserver_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
        ip: str = None,
    ) -> Response:
        """Create proxyserver by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/proxyserver/{ip}"

        return await self.post(url)

    async def iot_read_iot_profile_transport_proxyserver_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
        ip: str = None,
    ) -> Response:
        """Get proxyserver by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/proxyserver/{ip}"

        return await self.get(url)

    async def iot_delete_iot_profile_transport_proxyserver_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
        ip: str = None,
    ) -> Response:
        """Delete proxyserver by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName
            ip (str, optional): ip

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/proxyserver/{ip}"

        return await self.delete(url)

    async def iot_create_iot_profile_transport_service_uuid_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Create service-uuid-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/service-uuid-filter"

        return await self.post(url)

    async def iot_read_iot_profile_transport_service_uuid_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Get service-uuid-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/service-uuid-filter"

        return await self.get(url)

    async def iot_delete_iot_profile_transport_service_uuid_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Delete service-uuid-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/service-uuid-filter"

        return await self.delete(url)

    async def iot_create_iot_profile_transport_uid_namespace_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Create uid-namespace-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/uid-namespace-filter"

        return await self.post(url)

    async def iot_read_iot_profile_transport_uid_namespace_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Get uid-namespace-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/uid-namespace-filter"

        return await self.get(url)

    async def iot_delete_iot_profile_transport_uid_namespace_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Delete uid-namespace-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/uid-namespace-filter"

        return await self.delete(url)

    async def iot_create_iot_profile_transport_url_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Create url-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/url-filter"

        return await self.post(url)

    async def iot_read_iot_profile_transport_url_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Get url-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/url-filter"

        return await self.get(url)

    async def iot_delete_iot_profile_transport_url_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Delete url-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/url-filter"

        return await self.delete(url)

    async def iot_create_iot_profile_transport_uuid_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Create uuid-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/uuid-filter"

        return await self.post(url)

    async def iot_read_iot_profile_transport_uuid_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Get uuid-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/uuid-filter"

        return await self.get(url)

    async def iot_delete_iot_profile_transport_uuid_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Delete uuid-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/uuid-filter"

        return await self.delete(url)

    async def iot_create_iot_profile_transport_vendor_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Create vendor-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/vendor-filter"

        return await self.post(url)

    async def iot_read_iot_profile_transport_vendor_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Get vendor-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/vendor-filter"

        return await self.get(url)

    async def iot_delete_iot_profile_transport_vendor_filter_by_id_v1(
        self,
        name: str = None,
        transport_name: str = None,
    ) -> Response:
        """Delete vendor-filter by ID.

        Args:
            name (str, optional): name
            transport_name (str, optional): transportName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/transport/{transport_name}/vendor-filter"

        return await self.delete(url)

    async def iot_create_iot_profile_ses_imagotag_esl_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ses-imagotag-esl by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/ses-imagotag-esl"

        return await self.post(url)

    async def iot_read_iot_profile_ses_imagotag_esl_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ses-imagotag-esl by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/ses-imagotag-esl"

        return await self.get(url)

    async def iot_create_iot_profile_zigbee_service_profile_by_id_v1(
        self,
        name: str = None,
        zsp_name: str = None,
    ) -> Response:
        """Create zigbee-service-profile by ID.

        Args:
            name (str, optional): name
            zsp_name (str, optional): zspName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/zigbee-service-profile/{zsp_name}"

        return await self.post(url)

    async def iot_read_iot_profile_zigbee_service_profile_by_id_v1(
        self,
        name: str = None,
        zsp_name: str = None,
    ) -> Response:
        """Get zigbee-service-profile by ID.

        Args:
            name (str, optional): name
            zsp_name (str, optional): zspName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/zigbee-service-profile/{zsp_name}"

        return await self.get(url)

    async def iot_delete_iot_profile_zigbee_service_profile_by_id_v1(
        self,
        name: str = None,
        zsp_name: str = None,
    ) -> Response:
        """Delete zigbee-service-profile by ID.

        Args:
            name (str, optional): name
            zsp_name (str, optional): zspName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/zigbee-service-profile/{zsp_name}"

        return await self.delete(url)

    async def iot_create_iot_profile_beacons_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create beacons by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/beacons"

        return await self.post(url)

    async def iot_read_iot_profile_beacons_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get beacons by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/beacons"

        return await self.get(url)

    async def iot_create_iot_profile_beacons_beacon_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Create beacon by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/beacons/beacon/{mac}"

        return await self.post(url)

    async def iot_read_iot_profile_beacons_beacon_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Get beacon by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/beacons/beacon/{mac}"

        return await self.get(url)

    async def iot_delete_iot_profile_beacons_beacon_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Delete beacon by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/iot/{name}/beacons/beacon/{mac}"

        return await self.delete(url)

    async def ip_binding_create_source_ip_bindings_by_id_v1(
        self,
        ip_version: str,
        client_address: str,
        link_local: str,
        mac: str,
        vlan: int,
        interface_types: str,
        interface_ethernet: str,
        interface_lag: str,
        out_of_resources_trap: bool,
    ) -> Response:
        """Create source-ip-bindings by ID.

        Args:
            ip_version (str): IPv4 or IPv6 version  Valid Values: UNKNOWN, IPV4, IPV6
            client_address (str): Client IP address. IPv4 or IPv6
            link_local (str): IPv6 Link Local Address
            mac (str): Client MAC address
            vlan (int): Client VLAN
            interface_types (str): Type of Interface  Valid Values: INTF_ETHERNET,
                INTF_SUBINTERFACE, INTF_VLAN, INTF_TUNNEL, INTF_PORT_CHANNEL, INTF_LOOPBACK,
                INTF_MANAGEMENT, INTF_USB
            interface_ethernet (str): Client connected ethernet interface
            interface_lag (str): Client connected lag interface
            out_of_resources_trap (bool): Trap for IP source binding out of resources.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/source-ip-bindings"

        json_data = {
            'ip_version': ip_version,
            'client_address': client_address,
            'link_local': link_local,
            'mac': mac,
            'vlan': vlan,
            'interface_types': interface_types,
            'interface_ethernet': interface_ethernet,
            'interface_lag': interface_lag,
            'out_of_resources_trap': out_of_resources_trap
        }

        return await self.post(url, json_data=json_data)

    async def ip_binding_read_source_ip_bindings_v1(
        self,
    ) -> Response:
        """Get source-ip-bindings.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/source-ip-bindings"

        return await self.get(url)

    async def ip_binding_create_source_ip_bindings_static_entry_by_id_v1(
        self,
        ip_version: str = None,
        vlan: str = None,
        client_address: str = None,
    ) -> Response:
        """Create static-entry by ID.

        Args:
            ip_version (str, optional): ipVersion
            vlan (str, optional): vlan
            client_address (str, optional): clientAddress

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/source-ip-bindings/{ip_version}/{vlan}/{client_address}"

        return await self.post(url)

    async def ip_binding_read_source_ip_bindings_static_entry_by_id_v1(
        self,
        ip_version: str = None,
        vlan: str = None,
        client_address: str = None,
    ) -> Response:
        """Get static-entry by ID.

        Args:
            ip_version (str, optional): ipVersion
            vlan (str, optional): vlan
            client_address (str, optional): clientAddress

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/source-ip-bindings/{ip_version}/{vlan}/{client_address}"

        return await self.get(url)

    async def ip_binding_delete_source_ip_bindings_static_entry_by_id_v1(
        self,
        ip_version: str = None,
        vlan: str = None,
        client_address: str = None,
    ) -> Response:
        """Delete static-entry by ID.

        Args:
            ip_version (str, optional): ipVersion
            vlan (str, optional): vlan
            client_address (str, optional): clientAddress

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/source-ip-bindings/{ip_version}/{vlan}/{client_address}"

        return await self.delete(url)

    async def ip_directed_broadcast_create_ip_directed_broadcast_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        access_policy: str = None,
    ) -> Response:
        """Create ip-directed-broadcast by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): IP Directed Broadcast Profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): IP Directed Broadcast profile name.
            description (str): User comment or description.
            enable (bool): Enable IP Directed Broadcast.
            access_policy (str): ACL to control IP Directed Broadcast forwarding
                for Wake-on-LAN support

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-directed-broadcast"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'access_policy': access_policy
        }

        return await self.post(url, json_data=json_data)

    async def ip_directed_broadcast_read_ip_directed_broadcast_v1(
        self,
    ) -> Response:
        """Get ip-directed-broadcast.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-directed-broadcast"

        return await self.get(url)

    async def ip_directed_broadcast_create_ip_directed_broadcast_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-directed-broadcast/{name}"

        return await self.post(url)

    async def ip_directed_broadcast_read_ip_directed_broadcast_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-directed-broadcast/{name}"

        return await self.get(url)

    async def ip_directed_broadcast_delete_ip_directed_broadcast_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-directed-broadcast/{name}"

        return await self.delete(url)

    async def ip_icmp_tcp_create_ip_icmp_tcp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create ip-icmp-tcp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for IP ICMP and TCP Configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Global profile for IP ICMP and TCP Configurations

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-icmp-tcp"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def ip_icmp_tcp_read_ip_icmp_tcp_v1(
        self,
    ) -> Response:
        """Get ip-icmp-tcp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-icmp-tcp"

        return await self.get(url)

    async def ip_icmp_tcp_create_ip_icmp_tcp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-icmp-tcp/{name}"

        return await self.post(url)

    async def ip_icmp_tcp_read_ip_icmp_tcp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-icmp-tcp/{name}"

        return await self.get(url)

    async def ip_icmp_tcp_delete_ip_icmp_tcp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-icmp-tcp/{name}"

        return await self.delete(url)

    async def ip_icmp_tcp_create_ip_icmp_tcp_profile_ip_icmp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ip-icmp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-icmp-tcp/{name}/ip-icmp"

        return await self.post(url)

    async def ip_icmp_tcp_read_ip_icmp_tcp_profile_ip_icmp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ip-icmp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-icmp-tcp/{name}/ip-icmp"

        return await self.get(url)

    async def ip_icmp_tcp_create_ip_icmp_tcp_profile_ip_tcp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ip-tcp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-icmp-tcp/{name}/ip-tcp"

        return await self.post(url)

    async def ip_icmp_tcp_read_ip_icmp_tcp_profile_ip_tcp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ip-tcp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-icmp-tcp/{name}/ip-tcp"

        return await self.get(url)

    async def ip_lockdown_interface_create_ip_source_lockdown_interface_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create ip-source-lockdown-interface by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): IP source lockdown interface profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): IP source lockdown interface profile

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-source-lockdown-interface"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def ip_lockdown_interface_read_ip_source_lockdown_interface_v1(
        self,
    ) -> Response:
        """Get ip-source-lockdown-interface.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-source-lockdown-interface"

        return await self.get(url)

    async def ip_lockdown_interface_create_ip_source_lockdown_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-lockdown-interface/{name}"

        return await self.post(url)

    async def ip_lockdown_interface_read_ip_source_lockdown_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-lockdown-interface/{name}"

        return await self.get(url)

    async def ip_lockdown_interface_delete_ip_source_lockdown_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-lockdown-interface/{name}"

        return await self.delete(url)

    async def ip_lockdown_interface_create_ip_source_lockdown_interface_profile_ip_source_lockdown_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ip-source-lockdown by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-lockdown-interface/{name}/ip-source-lockdown"

        return await self.post(url)

    async def ip_lockdown_interface_read_ip_source_lockdown_interface_profile_ip_source_lockdown_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ip-source-lockdown by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-lockdown-interface/{name}/ip-source-lockdown"

        return await self.get(url)

    async def ip_lockdown_create_ip_source_lockdown_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        ipv4_source_lockdown: bool = None,
        ipv6_source_lockdown: bool = None,
        ip_source_lockdown_resource_extended: bool = None,
    ) -> Response:
        """Create ip-source-lockdown by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): IP source lockdown profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): IP source lockdown profile name
            description (str): IP source lockdown profile description
            ipv4_source_lockdown (bool): Enable IPv4 source lockdown globally
            ipv6_source_lockdown (bool): Enable IPv6 source lockdown globally
            ip_source_lockdown_resource_extended (bool): Set extended hardware resources for IP
                Lockdown

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-source-lockdown"

        json_data = {
            'name': name,
            'description': description,
            'ipv4_source_lockdown': ipv4_source_lockdown,
            'ipv6_source_lockdown': ipv6_source_lockdown,
            'ip_source_lockdown_resource_extended': ip_source_lockdown_resource_extended
        }

        return await self.post(url, json_data=json_data)

    async def ip_lockdown_read_ip_source_lockdown_v1(
        self,
    ) -> Response:
        """Get ip-source-lockdown.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-source-lockdown"

        return await self.get(url)

    async def ip_lockdown_create_ip_source_lockdown_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-lockdown/{name}"

        return await self.post(url)

    async def ip_lockdown_read_ip_source_lockdown_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-lockdown/{name}"

        return await self.get(url)

    async def ip_lockdown_delete_ip_source_lockdown_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-lockdown/{name}"

        return await self.delete(url)

    async def ip_nat_create_ip_nat_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        mapping: list = None,
    ) -> Response:
        """Create ip-nat by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of IP NAT profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            mapping (list, optional): List of one-to-one NAT mappings

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-nat"

        json_data = {
            'mapping': mapping
        }

        return await self.post(url, json_data=json_data)

    async def ip_nat_read_ip_nat_v1(
        self,
    ) -> Response:
        """Get ip-nat.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-nat"

        return await self.get(url)

    async def ip_nat_create_ip_nat_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-nat/{name}"

        return await self.post(url)

    async def ip_nat_read_ip_nat_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-nat/{name}"

        return await self.get(url)

    async def ip_nat_delete_ip_nat_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-nat/{name}"

        return await self.delete(url)

    async def ip_nat_create_ip_nat_profile_static_map_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create static-map by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-nat/{name}/static-map"

        return await self.post(url)

    async def ip_nat_read_ip_nat_profile_static_map_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get static-map by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-nat/{name}/static-map"

        return await self.get(url)

    async def ip_nat_create_ip_nat_profile_static_map_mapping_by_id_v1(
        self,
        name: str = None,
        internal: str = None,
        external: str = None,
    ) -> Response:
        """Create mapping by ID.

        Args:
            name (str, optional): name
            internal (str, optional): internal
            external (str, optional): external

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-nat/{name}/static-map/mapping/{internal}/{external}"

        return await self.post(url)

    async def ip_nat_read_ip_nat_profile_static_map_mapping_by_id_v1(
        self,
        name: str = None,
        internal: str = None,
        external: str = None,
    ) -> Response:
        """Get mapping by ID.

        Args:
            name (str, optional): name
            internal (str, optional): internal
            external (str, optional): external

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-nat/{name}/static-map/mapping/{internal}/{external}"

        return await self.get(url)

    async def ip_nat_delete_ip_nat_profile_static_map_mapping_by_id_v1(
        self,
        name: str = None,
        internal: str = None,
        external: str = None,
    ) -> Response:
        """Delete mapping by ID.

        Args:
            name (str, optional): name
            internal (str, optional): internal
            external (str, optional): external

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-nat/{name}/static-map/mapping/{internal}/{external}"

        return await self.delete(url)

    async def ip_nat_create_ip_nat_profile_nat_pool_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create nat-pool by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-nat/{name}/nat-pool"

        return await self.post(url)

    async def ip_nat_read_ip_nat_profile_nat_pool_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get nat-pool by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-nat/{name}/nat-pool"

        return await self.get(url)

    async def ip_nat_create_ip_nat_profile_nat_pool_pool_by_id_v1(
        self,
        name: str = None,
        pool_name: str = None,
    ) -> Response:
        """Create pool by ID.

        Args:
            name (str, optional): name
            pool_name (str, optional): poolName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-nat/{name}/nat-pool/pool/{pool_name}"

        return await self.post(url)

    async def ip_nat_read_ip_nat_profile_nat_pool_pool_by_id_v1(
        self,
        name: str = None,
        pool_name: str = None,
    ) -> Response:
        """Get pool by ID.

        Args:
            name (str, optional): name
            pool_name (str, optional): poolName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-nat/{name}/nat-pool/pool/{pool_name}"

        return await self.get(url)

    async def ip_nat_delete_ip_nat_profile_nat_pool_pool_by_id_v1(
        self,
        name: str = None,
        pool_name: str = None,
    ) -> Response:
        """Delete pool by ID.

        Args:
            name (str, optional): name
            pool_name (str, optional): poolName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-nat/{name}/nat-pool/pool/{pool_name}"

        return await self.delete(url)

    async def ip_routing_create_ip_routing_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        enable_lb_dst_ip: bool = True,
        enable_lb_dst_port: bool = True,
        enable_lb_src_ip: bool = True,
        enable_lb_src_port: bool = True,
    ) -> Response:
        """Create ip-routing by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): IP routing profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            enable_lb_dst_ip (bool, optional): Enable load balancing by destination IP
            enable_lb_dst_port (bool, optional): Enable load balancing by destination port
            enable_lb_src_ip (bool, optional): Enable load balancing by source IP
            enable_lb_src_port (bool, optional): Enable load balancing by source port

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-routing"

        json_data = {
            'enable_lb_dst_ip': enable_lb_dst_ip,
            'enable_lb_dst_port': enable_lb_dst_port,
            'enable_lb_src_ip': enable_lb_src_ip,
            'enable_lb_src_port': enable_lb_src_port
        }

        return await self.post(url, json_data=json_data)

    async def ip_routing_read_ip_routing_v1(
        self,
    ) -> Response:
        """Get ip-routing.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-routing"

        return await self.get(url)

    async def ip_routing_create_ip_routing_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-routing/{name}"

        return await self.post(url)

    async def ip_routing_read_ip_routing_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-routing/{name}"

        return await self.get(url)

    async def ip_routing_delete_ip_routing_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-routing/{name}"

        return await self.delete(url)

    async def ip_routing_create_ip_routing_profile_ip_ecmp_params_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ip-ecmp-params by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-routing/{name}/ip-ecmp-params"

        return await self.post(url)

    async def ip_routing_read_ip_routing_profile_ip_ecmp_params_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ip-ecmp-params by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-routing/{name}/ip-ecmp-params"

        return await self.get(url)

    async def ip_routing_create_ip_routing_profile_ip_ecmp_params_ip_ecmp_hash_params_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ip-ecmp-hash-params by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-routing/{name}/ip-ecmp-params/ip-ecmp-hash-params"

        return await self.post(url)

    async def ip_routing_read_ip_routing_profile_ip_ecmp_params_ip_ecmp_hash_params_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ip-ecmp-hash-params by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-routing/{name}/ip-ecmp-params/ip-ecmp-hash-params"

        return await self.get(url)

    async def ip_routing_create_ip_routing_profile_ip_ecmp_params_ip_ecmp_dynamic_load_balance_params_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ip-ecmp-dynamic-load-balance-params by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-routing/{name}/ip-ecmp-params/ip-ecmp-dynamic-load-balance-params"

        return await self.post(url)

    async def ip_routing_read_ip_routing_profile_ip_ecmp_params_ip_ecmp_dynamic_load_balance_params_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ip-ecmp-dynamic-load-balance-params by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-routing/{name}/ip-ecmp-params/ip-ecmp-dynamic-load-balance-params"

        return await self.get(url)

    async def ip_source_interface_create_ip_source_interfaces_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create ip-source-interfaces by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for IP Source Interface Configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Global profile for IP Source Interface Configurations

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-source-interfaces"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def ip_source_interface_read_ip_source_interfaces_v1(
        self,
    ) -> Response:
        """Get ip-source-interfaces.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-source-interfaces"

        return await self.get(url)

    async def ip_source_interface_create_ip_source_interfaces_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-interfaces/{name}"

        return await self.post(url)

    async def ip_source_interface_read_ip_source_interfaces_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-interfaces/{name}"

        return await self.get(url)

    async def ip_source_interface_delete_ip_source_interfaces_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-interfaces/{name}"

        return await self.delete(url)

    async def ip_source_interface_create_ip_source_interfaces_profile_ip_source_by_id_v1(
        self,
        name: str = None,
        ip_version: str = None,
        ip_protocol: str = None,
        vrf: str = None,
    ) -> Response:
        """Create ip-source by ID.

        Args:
            name (str, optional): name
            ip_version (str, optional): ipVersion
            ip_protocol (str, optional): ipProtocol
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-interfaces/{name}/ip-source/{ip_version}/{ip_protocol}/{vrf}"

        return await self.post(url)

    async def ip_source_interface_read_ip_source_interfaces_profile_ip_source_by_id_v1(
        self,
        name: str = None,
        ip_version: str = None,
        ip_protocol: str = None,
        vrf: str = None,
    ) -> Response:
        """Get ip-source by ID.

        Args:
            name (str, optional): name
            ip_version (str, optional): ipVersion
            ip_protocol (str, optional): ipProtocol
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-interfaces/{name}/ip-source/{ip_version}/{ip_protocol}/{vrf}"

        return await self.get(url)

    async def ip_source_interface_delete_ip_source_interfaces_profile_ip_source_by_id_v1(
        self,
        name: str = None,
        ip_version: str = None,
        ip_protocol: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete ip-source by ID.

        Args:
            name (str, optional): name
            ip_version (str, optional): ipVersion
            ip_protocol (str, optional): ipProtocol
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-source-interfaces/{name}/ip-source/{ip_version}/{ip_protocol}/{vrf}"

        return await self.delete(url)

    async def ipclassification_create_ip_classification_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        prof_name: str = None,
        description: str = None,
        enable: bool = None,
        deny_inbound_connections: bool = None,
        deny_outbound_connections: bool = None,
        ip_allowlist: list = None,
    ) -> Response:
        """Create ip-classification by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for IP Classification parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            prof_name (str): IP Classification profile name.
            description (str): IP Classification description.
            enable (bool): Enable IP reputation/geolocation classification (Need to configure IP
                name server)
            deny_inbound_connections (bool): Deny inbound connections from IP addresses with
                malicious reputation.
            deny_outbound_connections (bool): Deny outbound connections from IP addresses with
                malicious reputation.
            ip_allowlist (list): Configuration to allowlist any trusted IP address or a range of IP
                addresses                                  that may be misclassified as malicious IP
                addresses.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-classification"

        json_data = {
            'prof_name': prof_name,
            'description': description,
            'enable': enable,
            'deny_inbound_connections': deny_inbound_connections,
            'deny_outbound_connections': deny_outbound_connections,
            'ip_allowlist': ip_allowlist
        }

        return await self.post(url, json_data=json_data)

    async def ipclassification_read_ip_classification_v1(
        self,
    ) -> Response:
        """Get ip-classification.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ip-classification"

        return await self.get(url)

    async def ipclassification_create_ip_classification_profile_by_id_v1(
        self,
        prof_name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            prof_name (str, optional): profName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-classification/{prof_name}"

        return await self.post(url)

    async def ipclassification_read_ip_classification_profile_by_id_v1(
        self,
        prof_name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            prof_name (str, optional): profName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-classification/{prof_name}"

        return await self.get(url)

    async def ipclassification_delete_ip_classification_profile_by_id_v1(
        self,
        prof_name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            prof_name (str, optional): profName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-classification/{prof_name}"

        return await self.delete(url)

    async def ipclassification_create_ip_classification_profile_ip_allowlist_by_id_v1(
        self,
        prof_name: str = None,
        range_name: str = None,
    ) -> Response:
        """Create ip-allowlist by ID.

        Args:
            prof_name (str, optional): profName
            range_name (str, optional): rangeName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-classification/{prof_name}/ip-allowlist/{range_name}"

        return await self.post(url)

    async def ipclassification_read_ip_classification_profile_ip_allowlist_by_id_v1(
        self,
        prof_name: str = None,
        range_name: str = None,
    ) -> Response:
        """Get ip-allowlist by ID.

        Args:
            prof_name (str, optional): profName
            range_name (str, optional): rangeName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-classification/{prof_name}/ip-allowlist/{range_name}"

        return await self.get(url)

    async def ipclassification_delete_ip_classification_profile_ip_allowlist_by_id_v1(
        self,
        prof_name: str = None,
        range_name: str = None,
    ) -> Response:
        """Delete ip-allowlist by ID.

        Args:
            prof_name (str, optional): profName
            range_name (str, optional): rangeName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ip-classification/{prof_name}/ip-allowlist/{range_name}"

        return await self.delete(url)

    async def ipfix_create_ipfix_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        record: list = None,
        exporter: list = None,
        monitor: list = None,
    ) -> Response:
        """Create ipfix by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for IPFIX Configuration
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): IPFIX profile name.
            description (str): IPFIX profile description.
            record (list): Define a Flow Record
            exporter (list): Define a Flow Exporter
            monitor (list): Define a Flow Monitor

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ipfix"

        json_data = {
            'name': name,
            'description': description,
            'record': record,
            'exporter': exporter,
            'monitor': monitor
        }

        return await self.post(url, json_data=json_data)

    async def ipfix_read_ipfix_v1(
        self,
    ) -> Response:
        """Get ipfix.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ipfix"

        return await self.get(url)

    async def ipfix_create_ipfix_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}"

        return await self.post(url)

    async def ipfix_read_ipfix_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}"

        return await self.get(url)

    async def ipfix_delete_ipfix_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}"

        return await self.delete(url)

    async def ipfix_create_ipfix_profile_record_by_id_v1(
        self,
        name: str = None,
        record_name: str = None,
    ) -> Response:
        """Create record by ID.

        Args:
            name (str, optional): name
            record_name (str, optional): record_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/record/{record_name}"

        return await self.post(url)

    async def ipfix_read_ipfix_profile_record_by_id_v1(
        self,
        name: str = None,
        record_name: str = None,
    ) -> Response:
        """Get record by ID.

        Args:
            name (str, optional): name
            record_name (str, optional): record_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/record/{record_name}"

        return await self.get(url)

    async def ipfix_delete_ipfix_profile_record_by_id_v1(
        self,
        name: str = None,
        record_name: str = None,
    ) -> Response:
        """Delete record by ID.

        Args:
            name (str, optional): name
            record_name (str, optional): record_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/record/{record_name}"

        return await self.delete(url)

    async def ipfix_create_ipfix_profile_record_common_ip_match_by_id_v1(
        self,
        name: str = None,
        record_name: str = None,
    ) -> Response:
        """Create common-ip-match by ID.

        Args:
            name (str, optional): name
            record_name (str, optional): record_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/record/{record_name}/common-ip-match"

        return await self.post(url)

    async def ipfix_read_ipfix_profile_record_common_ip_match_by_id_v1(
        self,
        name: str = None,
        record_name: str = None,
    ) -> Response:
        """Get common-ip-match by ID.

        Args:
            name (str, optional): name
            record_name (str, optional): record_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/record/{record_name}/common-ip-match"

        return await self.get(url)

    async def ipfix_create_ipfix_profile_record_transport_match_by_id_v1(
        self,
        name: str = None,
        record_name: str = None,
    ) -> Response:
        """Create transport-match by ID.

        Args:
            name (str, optional): name
            record_name (str, optional): record_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/record/{record_name}/transport-match"

        return await self.post(url)

    async def ipfix_read_ipfix_profile_record_transport_match_by_id_v1(
        self,
        name: str = None,
        record_name: str = None,
    ) -> Response:
        """Get transport-match by ID.

        Args:
            name (str, optional): name
            record_name (str, optional): record_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/record/{record_name}/transport-match"

        return await self.get(url)

    async def ipfix_create_ipfix_profile_record_application_by_id_v1(
        self,
        name: str = None,
        record_name: str = None,
    ) -> Response:
        """Create application by ID.

        Args:
            name (str, optional): name
            record_name (str, optional): record_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/record/{record_name}/application"

        return await self.post(url)

    async def ipfix_read_ipfix_profile_record_application_by_id_v1(
        self,
        name: str = None,
        record_name: str = None,
    ) -> Response:
        """Get application by ID.

        Args:
            name (str, optional): name
            record_name (str, optional): record_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/record/{record_name}/application"

        return await self.get(url)

    async def ipfix_create_ipfix_profile_exporter_by_id_v1(
        self,
        name: str = None,
        exporter_name: str = None,
    ) -> Response:
        """Create exporter by ID.

        Args:
            name (str, optional): name
            exporter_name (str, optional): exporter_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/exporter/{exporter_name}"

        return await self.post(url)

    async def ipfix_read_ipfix_profile_exporter_by_id_v1(
        self,
        name: str = None,
        exporter_name: str = None,
    ) -> Response:
        """Get exporter by ID.

        Args:
            name (str, optional): name
            exporter_name (str, optional): exporter_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/exporter/{exporter_name}"

        return await self.get(url)

    async def ipfix_delete_ipfix_profile_exporter_by_id_v1(
        self,
        name: str = None,
        exporter_name: str = None,
    ) -> Response:
        """Delete exporter by ID.

        Args:
            name (str, optional): name
            exporter_name (str, optional): exporter_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/exporter/{exporter_name}"

        return await self.delete(url)

    async def ipfix_create_ipfix_profile_monitor_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
    ) -> Response:
        """Create monitor by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitor_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/monitor/{monitor_name}"

        return await self.post(url)

    async def ipfix_read_ipfix_profile_monitor_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
    ) -> Response:
        """Get monitor by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitor_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/monitor/{monitor_name}"

        return await self.get(url)

    async def ipfix_delete_ipfix_profile_monitor_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
    ) -> Response:
        """Delete monitor by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitor_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/monitor/{monitor_name}"

        return await self.delete(url)

    async def ipfix_create_ipfix_profile_monitor_exporter_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
    ) -> Response:
        """Create exporter by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitor_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/monitor/{monitor_name}/exporter"

        return await self.post(url)

    async def ipfix_read_ipfix_profile_monitor_exporter_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
    ) -> Response:
        """Get exporter by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitor_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/monitor/{monitor_name}/exporter"

        return await self.get(url)

    async def ipfix_delete_ipfix_profile_monitor_exporter_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
    ) -> Response:
        """Delete exporter by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitor_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipfix/{name}/monitor/{monitor_name}/exporter"

        return await self.delete(url)

    async def ipm_create_ipm_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        steps: list = None,
    ) -> Response:
        """Create ipm by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): IPM profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): IPM profile name.
            description (str): IPM profile description.
            enable (bool): Enables IPM(Intelligent Power Management) on the AP
            steps (list): IPM step list with priority

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ipm"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'steps': steps
        }

        return await self.post(url, json_data=json_data)

    async def ipm_read_ipm_v1(
        self,
    ) -> Response:
        """Get ipm.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ipm"

        return await self.get(url)

    async def ipm_create_ipm_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipm/{name}"

        return await self.post(url)

    async def ipm_read_ipm_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipm/{name}"

        return await self.get(url)

    async def ipm_delete_ipm_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipm/{name}"

        return await self.delete(url)

    async def ipm_create_ipm_profile_steps_by_id_v1(
        self,
        name: str = None,
        step: str = None,
    ) -> Response:
        """Create steps by ID.

        Args:
            name (str, optional): name
            step (str, optional): step

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipm/{name}/steps/{step}"

        return await self.post(url)

    async def ipm_read_ipm_profile_steps_by_id_v1(
        self,
        name: str = None,
        step: str = None,
    ) -> Response:
        """Get steps by ID.

        Args:
            name (str, optional): name
            step (str, optional): step

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipm/{name}/steps/{step}"

        return await self.get(url)

    async def ipm_delete_ipm_profile_steps_by_id_v1(
        self,
        name: str = None,
        step: str = None,
    ) -> Response:
        """Delete steps by ID.

        Args:
            name (str, optional): name
            step (str, optional): step

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipm/{name}/steps/{step}"

        return await self.delete(url)

    async def ipsec_create_crypto_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create crypto by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of crypro profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): List of crypro profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/crypto"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def ipsec_read_crypto_v1(
        self,
    ) -> Response:
        """Get crypto.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/crypto"

        return await self.get(url)

    async def ipsec_create_crypto_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}"

        return await self.post(url)

    async def ipsec_read_crypto_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}"

        return await self.get(url)

    async def ipsec_delete_crypto_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}"

        return await self.delete(url)

    async def ipsec_create_crypto_profile_dynamic_maps_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create dynamic-maps by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/dynamic-maps"

        return await self.post(url)

    async def ipsec_read_crypto_profile_dynamic_maps_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get dynamic-maps by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/dynamic-maps"

        return await self.get(url)

    async def ipsec_create_crypto_profile_dynamic_maps_map_by_id_v1(
        self,
        name: str = None,
        map_name: str = None,
        number: str = None,
    ) -> Response:
        """Create map by ID.

        Args:
            name (str, optional): name
            map_name (str, optional): map_name
            number (str, optional): number

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/dynamic-maps/map/{map_name}/{number}"

        return await self.post(url)

    async def ipsec_read_crypto_profile_dynamic_maps_map_by_id_v1(
        self,
        name: str = None,
        map_name: str = None,
        number: str = None,
    ) -> Response:
        """Get map by ID.

        Args:
            name (str, optional): name
            map_name (str, optional): map_name
            number (str, optional): number

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/dynamic-maps/map/{map_name}/{number}"

        return await self.get(url)

    async def ipsec_delete_crypto_profile_dynamic_maps_map_by_id_v1(
        self,
        name: str = None,
        map_name: str = None,
        number: str = None,
    ) -> Response:
        """Delete map by ID.

        Args:
            name (str, optional): name
            map_name (str, optional): map_name
            number (str, optional): number

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/dynamic-maps/map/{map_name}/{number}"

        return await self.delete(url)

    async def ipsec_create_crypto_profile_ipsec_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ipsec by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/ipsec"

        return await self.post(url)

    async def ipsec_read_crypto_profile_ipsec_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ipsec by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/ipsec"

        return await self.get(url)

    async def ipsec_create_crypto_profile_ipsec_transform_set_by_id_v1(
        self,
        name: str = None,
        transform_set_name: str = None,
    ) -> Response:
        """Create transform-set by ID.

        Args:
            name (str, optional): name
            transform_set_name (str, optional): transform-set_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/ipsec/transform-set/{transform_set_name}"

        return await self.post(url)

    async def ipsec_read_crypto_profile_ipsec_transform_set_by_id_v1(
        self,
        name: str = None,
        transform_set_name: str = None,
    ) -> Response:
        """Get transform-set by ID.

        Args:
            name (str, optional): name
            transform_set_name (str, optional): transform-set_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/ipsec/transform-set/{transform_set_name}"

        return await self.get(url)

    async def ipsec_delete_crypto_profile_ipsec_transform_set_by_id_v1(
        self,
        name: str = None,
        transform_set_name: str = None,
    ) -> Response:
        """Delete transform-set by ID.

        Args:
            name (str, optional): name
            transform_set_name (str, optional): transform-set_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/ipsec/transform-set/{transform_set_name}"

        return await self.delete(url)

    async def ipsec_create_crypto_profile_isakmp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create isakmp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/isakmp"

        return await self.post(url)

    async def ipsec_read_crypto_profile_isakmp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get isakmp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/isakmp"

        return await self.get(url)

    async def ipsec_create_crypto_profile_isakmp_psk_key_by_id_v1(
        self,
        name: str = None,
        peer_address: str = None,
    ) -> Response:
        """Create psk-key by ID.

        Args:
            name (str, optional): name
            peer_address (str, optional): peerAddress

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/isakmp/psk-key/{peer_address}"

        return await self.post(url)

    async def ipsec_read_crypto_profile_isakmp_psk_key_by_id_v1(
        self,
        name: str = None,
        peer_address: str = None,
    ) -> Response:
        """Get psk-key by ID.

        Args:
            name (str, optional): name
            peer_address (str, optional): peerAddress

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/isakmp/psk-key/{peer_address}"

        return await self.get(url)

    async def ipsec_delete_crypto_profile_isakmp_psk_key_by_id_v1(
        self,
        name: str = None,
        peer_address: str = None,
    ) -> Response:
        """Delete psk-key by ID.

        Args:
            name (str, optional): name
            peer_address (str, optional): peerAddress

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/isakmp/psk-key/{peer_address}"

        return await self.delete(url)

    async def ipsec_create_crypto_profile_isakmp_policy_by_id_v1(
        self,
        name: str = None,
        priority: str = None,
    ) -> Response:
        """Create policy by ID.

        Args:
            name (str, optional): name
            priority (str, optional): priority

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/isakmp/policy/{priority}"

        return await self.post(url)

    async def ipsec_read_crypto_profile_isakmp_policy_by_id_v1(
        self,
        name: str = None,
        priority: str = None,
    ) -> Response:
        """Get policy by ID.

        Args:
            name (str, optional): name
            priority (str, optional): priority

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/isakmp/policy/{priority}"

        return await self.get(url)

    async def ipsec_delete_crypto_profile_isakmp_policy_by_id_v1(
        self,
        name: str = None,
        priority: str = None,
    ) -> Response:
        """Delete policy by ID.

        Args:
            name (str, optional): name
            priority (str, optional): priority

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/crypto/{name}/isakmp/policy/{priority}"

        return await self.delete(url)

    async def ipsla_create_ipsla_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create ipsla by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): IPSLA Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): IPSLA Profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ipsla"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def ipsla_read_ipsla_v1(
        self,
    ) -> Response:
        """Get ipsla.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ipsla"

        return await self.get(url)

    async def ipsla_create_ipsla_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}"

        return await self.post(url)

    async def ipsla_read_ipsla_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}"

        return await self.get(url)

    async def ipsla_delete_ipsla_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}"

        return await self.delete(url)

    async def ipsla_create_ipsla_profile_responder_sessions_by_id_v1(
        self,
        name: str = None,
        responder_name: str = None,
    ) -> Response:
        """Create responder-sessions by ID.

        Args:
            name (str, optional): name
            responder_name (str, optional): responderName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/responder-sessions/{responder_name}"

        return await self.post(url)

    async def ipsla_read_ipsla_profile_responder_sessions_by_id_v1(
        self,
        name: str = None,
        responder_name: str = None,
    ) -> Response:
        """Get responder-sessions by ID.

        Args:
            name (str, optional): name
            responder_name (str, optional): responderName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/responder-sessions/{responder_name}"

        return await self.get(url)

    async def ipsla_delete_ipsla_profile_responder_sessions_by_id_v1(
        self,
        name: str = None,
        responder_name: str = None,
    ) -> Response:
        """Delete responder-sessions by ID.

        Args:
            name (str, optional): name
            responder_name (str, optional): responderName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/responder-sessions/{responder_name}"

        return await self.delete(url)

    async def ipsla_create_ipsla_profile_responder_sessions_responder_source_by_id_v1(
        self,
        name: str = None,
        responder_name: str = None,
    ) -> Response:
        """Create responder-source by ID.

        Args:
            name (str, optional): name
            responder_name (str, optional): responderName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/responder-sessions/{responder_name}/responder-source"

        return await self.post(url)

    async def ipsla_read_ipsla_profile_responder_sessions_responder_source_by_id_v1(
        self,
        name: str = None,
        responder_name: str = None,
    ) -> Response:
        """Get responder-source by ID.

        Args:
            name (str, optional): name
            responder_name (str, optional): responderName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/responder-sessions/{responder_name}/responder-source"

        return await self.get(url)

    async def ipsla_create_ipsla_profile_source_sessions_by_id_v1(
        self,
        name: str = None,
        source_name: str = None,
    ) -> Response:
        """Create source-sessions by ID.

        Args:
            name (str, optional): name
            source_name (str, optional): sourceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/source-sessions/{source_name}"

        return await self.post(url)

    async def ipsla_read_ipsla_profile_source_sessions_by_id_v1(
        self,
        name: str = None,
        source_name: str = None,
    ) -> Response:
        """Get source-sessions by ID.

        Args:
            name (str, optional): name
            source_name (str, optional): sourceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/source-sessions/{source_name}"

        return await self.get(url)

    async def ipsla_delete_ipsla_profile_source_sessions_by_id_v1(
        self,
        name: str = None,
        source_name: str = None,
    ) -> Response:
        """Delete source-sessions by ID.

        Args:
            name (str, optional): name
            source_name (str, optional): sourceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/source-sessions/{source_name}"

        return await self.delete(url)

    async def ipsla_create_ipsla_profile_source_sessions_source_by_id_v1(
        self,
        name: str = None,
        source_name: str = None,
    ) -> Response:
        """Create source by ID.

        Args:
            name (str, optional): name
            source_name (str, optional): sourceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/source-sessions/{source_name}/source"

        return await self.post(url)

    async def ipsla_read_ipsla_profile_source_sessions_source_by_id_v1(
        self,
        name: str = None,
        source_name: str = None,
    ) -> Response:
        """Get source by ID.

        Args:
            name (str, optional): name
            source_name (str, optional): sourceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/source-sessions/{source_name}/source"

        return await self.get(url)

    async def ipsla_create_ipsla_profile_source_sessions_http_by_id_v1(
        self,
        name: str = None,
        source_name: str = None,
    ) -> Response:
        """Create http by ID.

        Args:
            name (str, optional): name
            source_name (str, optional): sourceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/source-sessions/{source_name}/http"

        return await self.post(url)

    async def ipsla_read_ipsla_profile_source_sessions_http_by_id_v1(
        self,
        name: str = None,
        source_name: str = None,
    ) -> Response:
        """Get http by ID.

        Args:
            name (str, optional): name
            source_name (str, optional): sourceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/source-sessions/{source_name}/http"

        return await self.get(url)

    async def ipsla_create_ipsla_profile_source_sessions_schedule_by_id_v1(
        self,
        name: str = None,
        source_name: str = None,
    ) -> Response:
        """Create schedule by ID.

        Args:
            name (str, optional): name
            source_name (str, optional): sourceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/source-sessions/{source_name}/schedule"

        return await self.post(url)

    async def ipsla_read_ipsla_profile_source_sessions_schedule_by_id_v1(
        self,
        name: str = None,
        source_name: str = None,
    ) -> Response:
        """Get schedule by ID.

        Args:
            name (str, optional): name
            source_name (str, optional): sourceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/source-sessions/{source_name}/schedule"

        return await self.get(url)

    async def ipsla_create_ipsla_profile_source_sessions_threshold_by_id_v1(
        self,
        name: str = None,
        source_name: str = None,
    ) -> Response:
        """Create threshold by ID.

        Args:
            name (str, optional): name
            source_name (str, optional): sourceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/source-sessions/{source_name}/threshold"

        return await self.post(url)

    async def ipsla_read_ipsla_profile_source_sessions_threshold_by_id_v1(
        self,
        name: str = None,
        source_name: str = None,
    ) -> Response:
        """Get threshold by ID.

        Args:
            name (str, optional): name
            source_name (str, optional): sourceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/source-sessions/{source_name}/threshold"

        return await self.get(url)

    async def ipsla_create_ipsla_profile_source_sessions_voip_by_id_v1(
        self,
        name: str = None,
        source_name: str = None,
    ) -> Response:
        """Create voip by ID.

        Args:
            name (str, optional): name
            source_name (str, optional): sourceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/source-sessions/{source_name}/voip"

        return await self.post(url)

    async def ipsla_read_ipsla_profile_source_sessions_voip_by_id_v1(
        self,
        name: str = None,
        source_name: str = None,
    ) -> Response:
        """Get voip by ID.

        Args:
            name (str, optional): name
            source_name (str, optional): sourceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/source-sessions/{source_name}/voip"

        return await self.get(url)

    async def ipsla_create_ipsla_profile_wan_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create wan by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/wan"

        return await self.post(url)

    async def ipsla_read_ipsla_profile_wan_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get wan by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/wan"

        return await self.get(url)

    async def ipsla_create_ipsla_profile_wan_probe_destination_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create probe-destination by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/wan/probe-destination"

        return await self.post(url)

    async def ipsla_read_ipsla_profile_wan_probe_destination_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get probe-destination by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ipsla/{name}/wan/probe-destination"

        return await self.get(url)

    async def job_scheduler_create_job_scheduler_by_id_v1(
        self,
        schedule: list,
    ) -> Response:
        """Create job-scheduler by ID.

        Args:
            schedule (list): Scheduling entry parameters.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/job-scheduler"

        json_data = {
            'schedule': schedule
        }

        return await self.post(url, json_data=json_data)

    async def job_scheduler_read_job_scheduler_v1(
        self,
    ) -> Response:
        """Get job-scheduler.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/job-scheduler"

        return await self.get(url)

    async def job_scheduler_create_job_scheduler_schedule_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create schedule by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}"

        return await self.post(url)

    async def job_scheduler_read_job_scheduler_schedule_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get schedule by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}"

        return await self.get(url)

    async def job_scheduler_delete_job_scheduler_schedule_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete schedule by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}"

        return await self.delete(url)

    async def job_scheduler_create_job_scheduler_schedule_schedule_entry_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Create schedule-entry by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}/schedule-entry/{sequence_number}"

        return await self.post(url)

    async def job_scheduler_read_job_scheduler_schedule_schedule_entry_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Get schedule-entry by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}/schedule-entry/{sequence_number}"

        return await self.get(url)

    async def job_scheduler_delete_job_scheduler_schedule_schedule_entry_by_id_v1(
        self,
        name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Delete schedule-entry by ID.

        Args:
            name (str, optional): name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}/schedule-entry/{sequence_number}"

        return await self.delete(url)

    async def job_scheduler_create_job_scheduler_schedule_job_by_id_v1(
        self,
        name: str = None,
        job_name: str = None,
    ) -> Response:
        """Create job by ID.

        Args:
            name (str, optional): name
            job_name (str, optional): jobName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}/job/{job_name}"

        return await self.post(url)

    async def job_scheduler_read_job_scheduler_schedule_job_by_id_v1(
        self,
        name: str = None,
        job_name: str = None,
    ) -> Response:
        """Get job by ID.

        Args:
            name (str, optional): name
            job_name (str, optional): jobName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}/job/{job_name}"

        return await self.get(url)

    async def job_scheduler_delete_job_scheduler_schedule_job_by_id_v1(
        self,
        name: str = None,
        job_name: str = None,
    ) -> Response:
        """Delete job by ID.

        Args:
            name (str, optional): name
            job_name (str, optional): jobName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}/job/{job_name}"

        return await self.delete(url)

    async def job_scheduler_create_job_scheduler_schedule_job_entry_by_id_v1(
        self,
        name: str = None,
        job_name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Create entry by ID.

        Args:
            name (str, optional): name
            job_name (str, optional): jobName
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}/job/{job_name}/entry/{sequence_number}"

        return await self.post(url)

    async def job_scheduler_read_job_scheduler_schedule_job_entry_by_id_v1(
        self,
        name: str = None,
        job_name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Get entry by ID.

        Args:
            name (str, optional): name
            job_name (str, optional): jobName
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}/job/{job_name}/entry/{sequence_number}"

        return await self.get(url)

    async def job_scheduler_delete_job_scheduler_schedule_job_entry_by_id_v1(
        self,
        name: str = None,
        job_name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Delete entry by ID.

        Args:
            name (str, optional): name
            job_name (str, optional): jobName
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}/job/{job_name}/entry/{sequence_number}"

        return await self.delete(url)

    async def job_scheduler_create_job_scheduler_schedule_days_of_the_week_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create days-of-the-week by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}/days-of-the-week"

        return await self.post(url)

    async def job_scheduler_read_job_scheduler_schedule_days_of_the_week_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get days-of-the-week by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}/days-of-the-week"

        return await self.get(url)

    async def job_scheduler_delete_job_scheduler_schedule_days_of_the_week_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete days-of-the-week by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/job-scheduler/{name}/days-of-the-week"

        return await self.delete(url)

    async def keychain_create_keychains_by_id_v1(
        self,
        keychain: list,
    ) -> Response:
        """Create keychains by ID.

        Args:
            keychain (list): List of all keychains.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/keychains"

        json_data = {
            'keychain': keychain
        }

        return await self.post(url, json_data=json_data)

    async def keychain_read_keychains_v1(
        self,
    ) -> Response:
        """Get keychains.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/keychains"

        return await self.get(url)

    async def keychain_create_keychains_keychain_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create keychain by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/keychains/{name}"

        return await self.post(url)

    async def keychain_read_keychains_keychain_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get keychain by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/keychains/{name}"

        return await self.get(url)

    async def keychain_delete_keychains_keychain_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete keychain by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/keychains/{name}"

        return await self.delete(url)

    async def keychain_create_keychains_keychain_keys_by_id_v1(
        self,
        name: str = None,
        key_id: str = None,
    ) -> Response:
        """Create keys by ID.

        Args:
            name (str, optional): name
            key_id (str, optional): keyId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/keychains/{name}/keys/{key_id}"

        return await self.post(url)

    async def keychain_read_keychains_keychain_keys_by_id_v1(
        self,
        name: str = None,
        key_id: str = None,
    ) -> Response:
        """Get keys by ID.

        Args:
            name (str, optional): name
            key_id (str, optional): keyId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/keychains/{name}/keys/{key_id}"

        return await self.get(url)

    async def keychain_delete_keychains_keychain_keys_by_id_v1(
        self,
        name: str = None,
        key_id: str = None,
    ) -> Response:
        """Delete keys by ID.

        Args:
            name (str, optional): name
            key_id (str, optional): keyId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/keychains/{name}/keys/{key_id}"

        return await self.delete(url)

    async def l2tp_pool_create_pools_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        ipv4_pool: list = None,
        ipv6_pool: list = None,
    ) -> Response:
        """Create pools by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): L2TP Pool profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): L2TP Pool profile name.
            ipv4_pool (list): IPv4 L2TP Pool list
            ipv6_pool (list): IPv6 L2TP Pool list

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/pools"

        json_data = {
            'name': name,
            'ipv4_pool': ipv4_pool,
            'ipv6_pool': ipv6_pool
        }

        return await self.post(url, json_data=json_data)

    async def l2tp_pool_read_pools_v1(
        self,
    ) -> Response:
        """Get pools.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/pools"

        return await self.get(url)

    async def l2tp_pool_create_pools_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pools/{name}"

        return await self.post(url)

    async def l2tp_pool_read_pools_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pools/{name}"

        return await self.get(url)

    async def l2tp_pool_delete_pools_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pools/{name}"

        return await self.delete(url)

    async def l2tp_pool_create_pools_profile_ipv4_pool_by_id_v1(
        self,
        name: str = None,
        ipv4_poo_lname: str = None,
    ) -> Response:
        """Create ipv4-pool by ID.

        Args:
            name (str, optional): name
            ipv4_poo_lname (str, optional): ipv4PoolName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pools/{name}/ipv4-pool/{ipv4_poo_lname}"

        return await self.post(url)

    async def l2tp_pool_read_pools_profile_ipv4_pool_by_id_v1(
        self,
        name: str = None,
        ipv4_poo_lname: str = None,
    ) -> Response:
        """Get ipv4-pool by ID.

        Args:
            name (str, optional): name
            ipv4_poo_lname (str, optional): ipv4PoolName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pools/{name}/ipv4-pool/{ipv4_poo_lname}"

        return await self.get(url)

    async def l2tp_pool_delete_pools_profile_ipv4_pool_by_id_v1(
        self,
        name: str = None,
        ipv4_poo_lname: str = None,
    ) -> Response:
        """Delete ipv4-pool by ID.

        Args:
            name (str, optional): name
            ipv4_poo_lname (str, optional): ipv4PoolName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pools/{name}/ipv4-pool/{ipv4_poo_lname}"

        return await self.delete(url)

    async def l2tp_pool_create_pools_profile_ipv6_pool_by_id_v1(
        self,
        name: str = None,
        ipv6_poo_lname: str = None,
    ) -> Response:
        """Create ipv6-pool by ID.

        Args:
            name (str, optional): name
            ipv6_poo_lname (str, optional): ipv6PoolName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pools/{name}/ipv6-pool/{ipv6_poo_lname}"

        return await self.post(url)

    async def l2tp_pool_read_pools_profile_ipv6_pool_by_id_v1(
        self,
        name: str = None,
        ipv6_poo_lname: str = None,
    ) -> Response:
        """Get ipv6-pool by ID.

        Args:
            name (str, optional): name
            ipv6_poo_lname (str, optional): ipv6PoolName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pools/{name}/ipv6-pool/{ipv6_poo_lname}"

        return await self.get(url)

    async def l2tp_pool_delete_pools_profile_ipv6_pool_by_id_v1(
        self,
        name: str = None,
        ipv6_poo_lname: str = None,
    ) -> Response:
        """Delete ipv6-pool by ID.

        Args:
            name (str, optional): name
            ipv6_poo_lname (str, optional): ipv6PoolName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pools/{name}/ipv6-pool/{ipv6_poo_lname}"

        return await self.delete(url)

    async def l2tp_create_l2tp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create l2tp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): L2TP profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): L2TP profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/l2tp"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def l2tp_read_l2tp_v1(
        self,
    ) -> Response:
        """Get l2tp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/l2tp"

        return await self.get(url)

    async def l2tp_create_l2tp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/l2tp/{name}"

        return await self.post(url)

    async def l2tp_read_l2tp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/l2tp/{name}"

        return await self.get(url)

    async def l2tp_delete_l2tp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/l2tp/{name}"

        return await self.delete(url)

    async def l3_route_create_l3_route_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        route_redistribute: bool = None,
        graceful_restart: bool = None,
    ) -> Response:
        """Create l3-route by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): L3 route profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): L3 route profile name
            description (str): L3 route profile description.
            route_redistribute (bool): Enable global route redistribute filter
            graceful_restart (bool): Graceful restart enable

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/l3-route"

        json_data = {
            'name': name,
            'description': description,
            'route_redistribute': route_redistribute,
            'graceful_restart': graceful_restart
        }

        return await self.post(url, json_data=json_data)

    async def l3_route_read_l3_route_v1(
        self,
    ) -> Response:
        """Get l3-route.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/l3-route"

        return await self.get(url)

    async def l3_route_create_l3_route_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/l3-route/{name}"

        return await self.post(url)

    async def l3_route_read_l3_route_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/l3-route/{name}"

        return await self.get(url)

    async def l3_route_delete_l3_route_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/l3-route/{name}"

        return await self.delete(url)

    async def lacp_create_lacp_by_id_v1(
        self,
        system_priority: int,
    ) -> Response:
        """Create lacp by ID.

        Args:
            system_priority (int): System priority used in LACP negotiation.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lacp"

        json_data = {
            'system_priority': system_priority
        }

        return await self.post(url, json_data=json_data)

    async def lacp_read_lacp_v1(
        self,
    ) -> Response:
        """Get lacp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lacp"

        return await self.get(url)

    async def lib_reference_info_read_lib_ref_summary_v1(
        self,
    ) -> Response:
        """Get lib-ref-summary.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lib-ref-summary"

        return await self.get(url)

    async def lib_reference_info_read_lib_ref_summary_references_by_id_v1(
        self,
    ) -> Response:
        """Get references by ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lib-ref-summary/references"

        return await self.get(url)

    async def lib_reference_info_read_lib_ref_summary_references_referred_v1(
        self,
    ) -> Response:
        """Get referred.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lib-ref-summary/references/referred"

        return await self.get(url)

    async def lib_reference_info_read_lib_ref_summary_references_referred_resource_v1(
        self,
    ) -> Response:
        """Get resource.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lib-ref-summary/references/referred/resource"

        return await self.get(url)

    async def lib_reference_info_read_lib_ref_summary_references_referred_referring_resources_by_id_v1(
        self,
    ) -> Response:
        """Get referring-resources by ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lib-ref-summary/references/referred/referring-resources"

        return await self.get(url)

    async def lib_reference_info_read_lib_ref_summary_references_referred_referring_resources_resource_v1(
        self,
    ) -> Response:
        """Get resource.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lib-ref-summary/references/referred/referring-resources/resource"

        return await self.get(url)

    async def lib_reference_info_read_lib_ref_summary_references_referring_v1(
        self,
    ) -> Response:
        """Get referring.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lib-ref-summary/references/referring"

        return await self.get(url)

    async def lib_reference_info_read_lib_ref_summary_references_referring_resource_v1(
        self,
    ) -> Response:
        """Get resource.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lib-ref-summary/references/referring/resource"

        return await self.get(url)

    async def lib_reference_info_read_lib_ref_summary_references_referring_referred_resources_by_id_v1(
        self,
    ) -> Response:
        """Get referred-resources by ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lib-ref-summary/references/referring/referred-resources"

        return await self.get(url)

    async def lib_reference_info_read_lib_ref_summary_references_referring_referred_resources_resource_v1(
        self,
    ) -> Response:
        """Get resource.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lib-ref-summary/references/referring/referred-resources/resource"

        return await self.get(url)

    async def library_cfg_meta_create_library_cfg_metas_by_id_v1(
        self,
        cfg_uuid: str,
        inst_key: str,
        module_name: str,
        ns_uuid: str,
        is_default_cfg: bool,
        allowed_personas: List[str],
    ) -> Response:
        """Create library-cfg-metas by ID.

        Args:
            cfg_uuid (str): UUID for config in DB
            inst_key (str): instance name
            module_name (str): Module name
            ns_uuid (str): name space uuid
            is_default_cfg (bool): Indicates if config is default configuration
            allowed_personas (List[str]): allowed-personas

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/library-cfg-metas"

        json_data = {
            'cfg_uuid': cfg_uuid,
            'inst_key': inst_key,
            'module_name': module_name,
            'ns_uuid': ns_uuid,
            'is_default_cfg': is_default_cfg,
            'allowed_personas': allowed_personas
        }

        return await self.post(url, json_data=json_data)

    async def library_cfg_meta_read_library_cfg_metas_v1(
        self,
    ) -> Response:
        """Get library-cfg-metas.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/library-cfg-metas"

        return await self.get(url)

    async def library_cfg_meta_create_library_cfg_metas_lib_cfg_meta_by_id_v1(
        self,
        module_name: str = None,
        inst_key: str = None,
    ) -> Response:
        """Create lib-cfg-meta by ID.

        Args:
            module_name (str, optional): moduleName
            inst_key (str, optional): instKey

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/library-cfg-metas/{module_name}/{inst_key}"

        return await self.post(url)

    async def library_cfg_meta_read_library_cfg_metas_lib_cfg_meta_by_id_v1(
        self,
        module_name: str = None,
        inst_key: str = None,
    ) -> Response:
        """Get lib-cfg-meta by ID.

        Args:
            module_name (str, optional): moduleName
            inst_key (str, optional): instKey

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/library-cfg-metas/{module_name}/{inst_key}"

        return await self.get(url)

    async def library_cfg_meta_delete_library_cfg_metas_lib_cfg_meta_by_id_v1(
        self,
        module_name: str = None,
        inst_key: str = None,
    ) -> Response:
        """Delete lib-cfg-meta by ID.

        Args:
            module_name (str, optional): moduleName
            inst_key (str, optional): instKey

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/library-cfg-metas/{module_name}/{inst_key}"

        return await self.delete(url)

    async def library_cfg_meta_create_library_cfg_metas_lib_cfg_meta_allowed_personas_by_id_v1(
        self,
        module_name: str = None,
        inst_key: str = None,
    ) -> Response:
        """Create allowed-personas by ID.

        Args:
            module_name (str, optional): moduleName
            inst_key (str, optional): instKey

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/library-cfg-metas/{module_name}/{inst_key}/allowed-personas"

        return await self.post(url)

    async def library_cfg_meta_read_library_cfg_metas_lib_cfg_meta_allowed_personas_by_id_v1(
        self,
        module_name: str = None,
        inst_key: str = None,
    ) -> Response:
        """Get allowed-personas by ID.

        Args:
            module_name (str, optional): moduleName
            inst_key (str, optional): instKey

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/library-cfg-metas/{module_name}/{inst_key}/allowed-personas"

        return await self.get(url)

    async def library_cfg_meta_delete_library_cfg_metas_lib_cfg_meta_allowed_personas_by_id_v1(
        self,
        module_name: str = None,
        inst_key: str = None,
    ) -> Response:
        """Delete allowed-personas by ID.

        Args:
            module_name (str, optional): moduleName
            inst_key (str, optional): instKey

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/library-cfg-metas/{module_name}/{inst_key}/allowed-personas"

        return await self.delete(url)

    async def library_references_create_library_refs_by_id_v1(
        self,
        ref_from_cfg_uuid: str,
        ref_from_xpath: str,
        ref_to_cfg_uuid: str,
        ref_to_xpath: str,
    ) -> Response:
        """Create library-refs by ID.

        Args:
            ref_from_cfg_uuid (str): UUID for referring config in DB
            ref_from_xpath (str): referring config leaf xpath
            ref_to_cfg_uuid (str): UUID for referred config in DB
            ref_to_xpath (str): xpath of config being referred

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/library-refs"

        json_data = {
            'ref_from_cfg_uuid': ref_from_cfg_uuid,
            'ref_from_xpath': ref_from_xpath,
            'ref_to_cfg_uuid': ref_to_cfg_uuid,
            'ref_to_xpath': ref_to_xpath
        }

        return await self.post(url, json_data=json_data)

    async def library_references_read_library_refs_v1(
        self,
    ) -> Response:
        """Get library-refs.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/library-refs"

        return await self.get(url)

    async def library_references_create_library_refs_lib_refs_by_id_v1(
        self,
        ref_fro_mc_fguuid: str = None,
        ref_fro_mxpath: str = None,
    ) -> Response:
        """Create lib-refs by ID.

        Args:
            ref_fro_mc_fguuid (str, optional): refFromCfgUuid
            ref_fro_mxpath (str, optional): refFromXpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/library-refs/{ref_fro_mc_fguuid}/{ref_fro_mxpath}"

        return await self.post(url)

    async def library_references_read_library_refs_lib_refs_by_id_v1(
        self,
        ref_fro_mc_fguuid: str = None,
        ref_fro_mxpath: str = None,
    ) -> Response:
        """Get lib-refs by ID.

        Args:
            ref_fro_mc_fguuid (str, optional): refFromCfgUuid
            ref_fro_mxpath (str, optional): refFromXpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/library-refs/{ref_fro_mc_fguuid}/{ref_fro_mxpath}"

        return await self.get(url)

    async def library_references_delete_library_refs_lib_refs_by_id_v1(
        self,
        ref_fro_mc_fguuid: str = None,
        ref_fro_mxpath: str = None,
    ) -> Response:
        """Delete lib-refs by ID.

        Args:
            ref_fro_mc_fguuid (str, optional): refFromCfgUuid
            ref_fro_mxpath (str, optional): refFromXpath

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/library-refs/{ref_fro_mc_fguuid}/{ref_fro_mxpath}"

        return await self.delete(url)

    async def lldp_create_lldp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create lldp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): LLDP Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): LLDP Profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lldp"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def lldp_read_lldp_v1(
        self,
    ) -> Response:
        """Get lldp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lldp"

        return await self.get(url)

    async def lldp_create_lldp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}"

        return await self.post(url)

    async def lldp_read_lldp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}"

        return await self.get(url)

    async def lldp_delete_lldp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}"

        return await self.delete(url)

    async def lldp_create_lldp_profile_auto_provision_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create auto-provision by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/auto-provision"

        return await self.post(url)

    async def lldp_read_lldp_profile_auto_provision_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get auto-provision by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/auto-provision"

        return await self.get(url)

    async def lldp_create_lldp_profile_tlv_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create tlv by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv"

        return await self.post(url)

    async def lldp_read_lldp_profile_tlv_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get tlv by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv"

        return await self.get(url)

    async def lldp_create_lldp_profile_tlv_basic_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create basic by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv/basic"

        return await self.post(url)

    async def lldp_read_lldp_profile_tlv_basic_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get basic by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv/basic"

        return await self.get(url)

    async def lldp_create_lldp_profile_tlv_dot1_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create dot1 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv/dot1"

        return await self.post(url)

    async def lldp_read_lldp_profile_tlv_dot1_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get dot1 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv/dot1"

        return await self.get(url)

    async def lldp_create_lldp_profile_tlv_dcbx_app_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create tlv-dcbx-app by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv-dcbx-app"

        return await self.post(url)

    async def lldp_read_lldp_profile_tlv_dcbx_app_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get tlv-dcbx-app by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv-dcbx-app"

        return await self.get(url)

    async def lldp_create_lldp_profile_tlv_dcbx_app_app_tlv_by_id_v1(
        self,
        name: str = None,
        protocol: str = None,
        port_number: str = None,
    ) -> Response:
        """Create app-tlv by ID.

        Args:
            name (str, optional): name
            protocol (str, optional): protocol
            port_number (str, optional): portNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv-dcbx-app/app-tlv/{protocol}/{port_number}"

        return await self.post(url)

    async def lldp_read_lldp_profile_tlv_dcbx_app_app_tlv_by_id_v1(
        self,
        name: str = None,
        protocol: str = None,
        port_number: str = None,
    ) -> Response:
        """Get app-tlv by ID.

        Args:
            name (str, optional): name
            protocol (str, optional): protocol
            port_number (str, optional): portNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv-dcbx-app/app-tlv/{protocol}/{port_number}"

        return await self.get(url)

    async def lldp_delete_lldp_profile_tlv_dcbx_app_app_tlv_by_id_v1(
        self,
        name: str = None,
        protocol: str = None,
        port_number: str = None,
    ) -> Response:
        """Delete app-tlv by ID.

        Args:
            name (str, optional): name
            protocol (str, optional): protocol
            port_number (str, optional): portNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv-dcbx-app/app-tlv/{protocol}/{port_number}"

        return await self.delete(url)

    async def local_management_create_lldp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create lldp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): LLDP Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): LLDP Profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lldp"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def local_management_read_lldp_v1(
        self,
    ) -> Response:
        """Get lldp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/lldp"

        return await self.get(url)

    async def local_management_create_lldp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}"

        return await self.post(url)

    async def local_management_read_lldp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}"

        return await self.get(url)

    async def local_management_delete_lldp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}"

        return await self.delete(url)

    async def local_management_create_lldp_profile_auto_provision_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create auto-provision by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/auto-provision"

        return await self.post(url)

    async def local_management_read_lldp_profile_auto_provision_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get auto-provision by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/auto-provision"

        return await self.get(url)

    async def local_management_create_lldp_profile_tlv_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create tlv by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv"

        return await self.post(url)

    async def local_management_read_lldp_profile_tlv_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get tlv by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv"

        return await self.get(url)

    async def local_management_create_lldp_profile_tlv_basic_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create basic by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv/basic"

        return await self.post(url)

    async def local_management_read_lldp_profile_tlv_basic_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get basic by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv/basic"

        return await self.get(url)

    async def local_management_create_lldp_profile_tlv_dot1_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create dot1 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv/dot1"

        return await self.post(url)

    async def local_management_read_lldp_profile_tlv_dot1_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get dot1 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv/dot1"

        return await self.get(url)

    async def local_management_create_lldp_profile_tlv_dcbx_app_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create tlv-dcbx-app by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv-dcbx-app"

        return await self.post(url)

    async def local_management_read_lldp_profile_tlv_dcbx_app_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get tlv-dcbx-app by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv-dcbx-app"

        return await self.get(url)

    async def local_management_create_lldp_profile_tlv_dcbx_app_app_tlv_by_id_v1(
        self,
        name: str = None,
        protocol: str = None,
        port_number: str = None,
    ) -> Response:
        """Create app-tlv by ID.

        Args:
            name (str, optional): name
            protocol (str, optional): protocol
            port_number (str, optional): portNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv-dcbx-app/app-tlv/{protocol}/{port_number}"

        return await self.post(url)

    async def local_management_read_lldp_profile_tlv_dcbx_app_app_tlv_by_id_v1(
        self,
        name: str = None,
        protocol: str = None,
        port_number: str = None,
    ) -> Response:
        """Get app-tlv by ID.

        Args:
            name (str, optional): name
            protocol (str, optional): protocol
            port_number (str, optional): portNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv-dcbx-app/app-tlv/{protocol}/{port_number}"

        return await self.get(url)

    async def local_management_delete_lldp_profile_tlv_dcbx_app_app_tlv_by_id_v1(
        self,
        name: str = None,
        protocol: str = None,
        port_number: str = None,
    ) -> Response:
        """Delete app-tlv by ID.

        Args:
            name (str, optional): name
            protocol (str, optional): protocol
            port_number (str, optional): portNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/lldp/{name}/tlv-dcbx-app/app-tlv/{protocol}/{port_number}"

        return await self.delete(url)

    async def location_create_location_by_id_v1(
        self,
        latitude: int,
        longitude: int,
        altitude_type: str,
        altitude: int,
        datum: str,
    ) -> Response:
        """Create location by ID.

        Args:
            latitude (int): LCI latitude.
            longitude (int): LCI longitude.
            altitude_type (str): LCI altitude type.  Valid Values: UNKNOWN, METERS, FLOORS
            altitude (int): LCI altitude.
            datum (str): Real world coordinate systems.  Valid Values: WGS88_2, NAD83_NAVD88_3,
                NAD83_MLLW

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/location"

        json_data = {
            'latitude': latitude,
            'longitude': longitude,
            'altitude_type': altitude_type,
            'altitude': altitude,
            'datum': datum
        }

        return await self.post(url, json_data=json_data)

    async def location_read_location_v1(
        self,
    ) -> Response:
        """Get location.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/location"

        return await self.get(url)

    async def location_create_location_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}"

        return await self.post(url)

    async def location_read_location_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}"

        return await self.get(url)

    async def location_delete_location_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}"

        return await self.delete(url)

    async def location_create_location_profile_gps_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create gps by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/gps"

        return await self.post(url)

    async def location_read_location_profile_gps_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get gps by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/gps"

        return await self.get(url)

    async def location_create_location_profile_rssi_report_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create rssi-report by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/rssi-report"

        return await self.post(url)

    async def location_read_location_profile_rssi_report_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get rssi-report by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/rssi-report"

        return await self.get(url)

    async def location_create_location_profile_rtls_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create rtls by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/rtls"

        return await self.post(url)

    async def location_read_location_profile_rtls_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get rtls by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/rtls"

        return await self.get(url)

    async def location_create_location_profile_rtls_aeroscout_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create aeroscout by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/rtls/aeroscout"

        return await self.post(url)

    async def location_read_location_profile_rtls_aeroscout_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get aeroscout by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/rtls/aeroscout"

        return await self.get(url)

    async def location_create_location_profile_rtls_report_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create report by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/rtls/report"

        return await self.post(url)

    async def location_read_location_profile_rtls_report_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get report by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/rtls/report"

        return await self.get(url)

    async def location_create_location_profile_rtls_airwave_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create airwave by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/rtls/airwave"

        return await self.post(url)

    async def location_read_location_profile_rtls_airwave_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get airwave by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/rtls/airwave"

        return await self.get(url)

    async def location_create_location_profile_ale_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ale by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/ale"

        return await self.post(url)

    async def location_read_location_profile_ale_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ale by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/ale"

        return await self.get(url)

    async def location_create_location_profile_lci_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create lci by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/lci"

        return await self.post(url)

    async def location_read_location_profile_lci_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get lci by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/lci"

        return await self.get(url)

    async def location_create_location_profile_lci_location_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create location by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/lci/location"

        return await self.post(url)

    async def location_read_location_profile_lci_location_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get location by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/lci/location"

        return await self.get(url)

    async def location_create_location_profile_lci_uncertainty_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create uncertainty by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/lci/uncertainty"

        return await self.post(url)

    async def location_read_location_profile_lci_uncertainty_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get uncertainty by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/lci/uncertainty"

        return await self.get(url)

    async def location_create_location_profile_lci_floor_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create floor by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/lci/floor"

        return await self.post(url)

    async def location_read_location_profile_lci_floor_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get floor by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/location/{name}/lci/floor"

        return await self.get(url)

    async def logging_create_logging_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create logging by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): event is related to high level functionality of device.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): event is related to high level functionality of device.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/logging"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def logging_read_logging_v1(
        self,
    ) -> Response:
        """Get logging.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/logging"

        return await self.get(url)

    async def logging_create_logging_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}"

        return await self.post(url)

    async def logging_read_logging_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}"

        return await self.get(url)

    async def logging_delete_logging_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}"

        return await self.delete(url)

    async def logging_create_logging_profile_module_by_id_v1(
        self,
        name: str = None,
        type: str = None,
        process: str = None,
        subcategory: str = None,
    ) -> Response:
        """Create module by ID.

        Args:
            name (str, optional): name
            type (str, optional): type
            process (str, optional): process
            subcategory (str, optional): subcategory

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/module/{type}/{process}/{subcategory}"

        return await self.post(url)

    async def logging_read_logging_profile_module_by_id_v1(
        self,
        name: str = None,
        type: str = None,
        process: str = None,
        subcategory: str = None,
    ) -> Response:
        """Get module by ID.

        Args:
            name (str, optional): name
            type (str, optional): type
            process (str, optional): process
            subcategory (str, optional): subcategory

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/module/{type}/{process}/{subcategory}"

        return await self.get(url)

    async def logging_delete_logging_profile_module_by_id_v1(
        self,
        name: str = None,
        type: str = None,
        process: str = None,
        subcategory: str = None,
    ) -> Response:
        """Delete module by ID.

        Args:
            name (str, optional): name
            type (str, optional): type
            process (str, optional): process
            subcategory (str, optional): subcategory

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/module/{type}/{process}/{subcategory}"

        return await self.delete(url)

    async def logging_create_logging_profile_module_entities_by_id_v1(
        self,
        name: str = None,
        type: str = None,
        process: str = None,
        subcategory: str = None,
    ) -> Response:
        """Create entities by ID.

        Args:
            name (str, optional): name
            type (str, optional): type
            process (str, optional): process
            subcategory (str, optional): subcategory

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/module/{type}/{process}/{subcategory}/entities"

        return await self.post(url)

    async def logging_read_logging_profile_module_entities_by_id_v1(
        self,
        name: str = None,
        type: str = None,
        process: str = None,
        subcategory: str = None,
    ) -> Response:
        """Get entities by ID.

        Args:
            name (str, optional): name
            type (str, optional): type
            process (str, optional): process
            subcategory (str, optional): subcategory

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/module/{type}/{process}/{subcategory}/entities"

        return await self.get(url)

    async def logging_create_logging_profile_remote_syslog_by_id_v1(
        self,
        name: str = None,
        host: str = None,
    ) -> Response:
        """Create remote-syslog by ID.

        Args:
            name (str, optional): name
            host (str, optional): host

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/remote-syslog/{host}"

        return await self.post(url)

    async def logging_read_logging_profile_remote_syslog_by_id_v1(
        self,
        name: str = None,
        host: str = None,
    ) -> Response:
        """Get remote-syslog by ID.

        Args:
            name (str, optional): name
            host (str, optional): host

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/remote-syslog/{host}"

        return await self.get(url)

    async def logging_delete_logging_profile_remote_syslog_by_id_v1(
        self,
        name: str = None,
        host: str = None,
    ) -> Response:
        """Delete remote-syslog by ID.

        Args:
            name (str, optional): name
            host (str, optional): host

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/remote-syslog/{host}"

        return await self.delete(url)

    async def logging_create_logging_profile_remote_syslog_rate_limit_by_id_v1(
        self,
        name: str = None,
        host: str = None,
    ) -> Response:
        """Create rate-limit by ID.

        Args:
            name (str, optional): name
            host (str, optional): host

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/remote-syslog/{host}/rate-limit"

        return await self.post(url)

    async def logging_read_logging_profile_remote_syslog_rate_limit_by_id_v1(
        self,
        name: str = None,
        host: str = None,
    ) -> Response:
        """Get rate-limit by ID.

        Args:
            name (str, optional): name
            host (str, optional): host

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/remote-syslog/{host}/rate-limit"

        return await self.get(url)

    async def logging_create_logging_profile_remote_syslog_entry_by_id_v1(
        self,
        name: str = None,
        host: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Create entry by ID.

        Args:
            name (str, optional): name
            host (str, optional): host
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/remote-syslog/{host}/entry/{sequence_number}"

        return await self.post(url)

    async def logging_read_logging_profile_remote_syslog_entry_by_id_v1(
        self,
        name: str = None,
        host: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Get entry by ID.

        Args:
            name (str, optional): name
            host (str, optional): host
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/remote-syslog/{host}/entry/{sequence_number}"

        return await self.get(url)

    async def logging_delete_logging_profile_remote_syslog_entry_by_id_v1(
        self,
        name: str = None,
        host: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Delete entry by ID.

        Args:
            name (str, optional): name
            host (str, optional): host
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/remote-syslog/{host}/entry/{sequence_number}"

        return await self.delete(url)

    async def logging_create_logging_profile_console_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create console by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/console"

        return await self.post(url)

    async def logging_read_logging_profile_console_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get console by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/console"

        return await self.get(url)

    async def logging_create_logging_profile_local_file_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create local-file by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/local-file"

        return await self.post(url)

    async def logging_read_logging_profile_local_file_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get local-file by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/local-file"

        return await self.get(url)

    async def logging_create_logging_profile_local_file_persistent_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create persistent-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/local-file/persistent-storage"

        return await self.post(url)

    async def logging_read_logging_profile_local_file_persistent_storage_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get persistent-storage by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/local-file/persistent-storage"

        return await self.get(url)

    async def logging_create_logging_profile_local_file_rotation_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create rotation by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/local-file/rotation"

        return await self.post(url)

    async def logging_read_logging_profile_local_file_rotation_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get rotation by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/local-file/rotation"

        return await self.get(url)

    async def logging_create_logging_profile_filter_by_id_v1(
        self,
        name: str = None,
        filter_name: str = None,
    ) -> Response:
        """Create filter by ID.

        Args:
            name (str, optional): name
            filter_name (str, optional): filter_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/filter/{filter_name}"

        return await self.post(url)

    async def logging_read_logging_profile_filter_by_id_v1(
        self,
        name: str = None,
        filter_name: str = None,
    ) -> Response:
        """Get filter by ID.

        Args:
            name (str, optional): name
            filter_name (str, optional): filter_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/filter/{filter_name}"

        return await self.get(url)

    async def logging_delete_logging_profile_filter_by_id_v1(
        self,
        name: str = None,
        filter_name: str = None,
    ) -> Response:
        """Delete filter by ID.

        Args:
            name (str, optional): name
            filter_name (str, optional): filter_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/filter/{filter_name}"

        return await self.delete(url)

    async def logging_create_logging_profile_filter_entry_by_id_v1(
        self,
        name: str = None,
        filter_name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Create entry by ID.

        Args:
            name (str, optional): name
            filter_name (str, optional): filter_name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/filter/{filter_name}/entry/{sequence_number}"

        return await self.post(url)

    async def logging_read_logging_profile_filter_entry_by_id_v1(
        self,
        name: str = None,
        filter_name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Get entry by ID.

        Args:
            name (str, optional): name
            filter_name (str, optional): filter_name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/filter/{filter_name}/entry/{sequence_number}"

        return await self.get(url)

    async def logging_delete_logging_profile_filter_entry_by_id_v1(
        self,
        name: str = None,
        filter_name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Delete entry by ID.

        Args:
            name (str, optional): name
            filter_name (str, optional): filter_name
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/filter/{filter_name}/entry/{sequence_number}"

        return await self.delete(url)

    async def logging_create_logging_profile_notification_threshold_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create notification-threshold by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/notification-threshold"

        return await self.post(url)

    async def logging_read_logging_profile_notification_threshold_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get notification-threshold by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/logging/{name}/notification-threshold"

        return await self.get(url)

    async def loop_protect_create_loop_protect_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create loop-protect by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Profile for Loop Protect.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Profile for Loop Protect.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/loop-protect"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def loop_protect_read_loop_protect_v1(
        self,
    ) -> Response:
        """Get loop-protect.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/loop-protect"

        return await self.get(url)

    async def loop_protect_create_loop_protect_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/loop-protect/{name}"

        return await self.post(url)

    async def loop_protect_read_loop_protect_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/loop-protect/{name}"

        return await self.get(url)

    async def loop_protect_delete_loop_protect_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/loop-protect/{name}"

        return await self.delete(url)

    async def loop_protect_create_loop_protect_profile_vlans_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create vlans by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/loop-protect/{name}/vlans"

        return await self.post(url)

    async def loop_protect_read_loop_protect_profile_vlans_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get vlans by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/loop-protect/{name}/vlans"

        return await self.get(url)

    async def loop_protect_delete_loop_protect_profile_vlans_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete vlans by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/loop-protect/{name}/vlans"

        return await self.delete(url)

    async def mac_lockout_create_mac_lockout_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create mac-lockout by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): MAC lockout profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): MAC lockout profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mac-lockout"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def mac_lockout_read_mac_lockout_v1(
        self,
    ) -> Response:
        """Get mac-lockout.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mac-lockout"

        return await self.get(url)

    async def mac_lockout_create_mac_lockout_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mac-lockout/{name}"

        return await self.post(url)

    async def mac_lockout_read_mac_lockout_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mac-lockout/{name}"

        return await self.get(url)

    async def mac_lockout_delete_mac_lockout_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mac-lockout/{name}"

        return await self.delete(url)

    async def mac_lockout_create_mac_lockout_profile_address_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Create address by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mac-lockout/{name}/address/{mac}"

        return await self.post(url)

    async def mac_lockout_read_mac_lockout_profile_address_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Get address by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mac-lockout/{name}/address/{mac}"

        return await self.get(url)

    async def mac_lockout_delete_mac_lockout_profile_address_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
    ) -> Response:
        """Delete address by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mac-lockout/{name}/address/{mac}"

        return await self.delete(url)

    async def macsec_create_macsec_by_id_v1(
        self,
        policy: list,
    ) -> Response:
        """Create macsec by ID.

        Args:
            policy (list): List of MACsec policies.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/macsec"

        json_data = {
            'policy': policy
        }

        return await self.post(url, json_data=json_data)

    async def macsec_read_macsec_v1(
        self,
    ) -> Response:
        """Get macsec.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/macsec"

        return await self.get(url)

    async def macsec_create_macsec_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/macsec/{name}"

        return await self.post(url)

    async def macsec_read_macsec_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/macsec/{name}"

        return await self.get(url)

    async def macsec_delete_macsec_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/macsec/{name}"

        return await self.delete(url)

    async def macsec_create_macsec_policy_cipher_suites_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create cipher-suites by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/macsec/{name}/cipher-suites"

        return await self.post(url)

    async def macsec_read_macsec_policy_cipher_suites_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get cipher-suites by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/macsec/{name}/cipher-suites"

        return await self.get(url)

    async def macsec_delete_macsec_policy_cipher_suites_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete cipher-suites by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/macsec/{name}/cipher-suites"

        return await self.delete(url)

    async def macsec_create_macsec_policy_bypass_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create bypass-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/macsec/{name}/bypass-list"

        return await self.post(url)

    async def macsec_read_macsec_policy_bypass_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get bypass-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/macsec/{name}/bypass-list"

        return await self.get(url)

    async def macsec_delete_macsec_policy_bypass_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete bypass-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/macsec/{name}/bypass-list"

        return await self.delete(url)

    async def management_user_group_create_management_user_groups_by_id_v1(
        self,
        user_group: list,
    ) -> Response:
        """Create management-user-groups by ID.

        Args:
            user_group (list): Management user group list

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/management-user_groups"

        json_data = {
            'user_group': user_group
        }

        return await self.post(url, json_data=json_data)

    async def management_user_group_read_management_user_groups_v1(
        self,
    ) -> Response:
        """Get management-user-groups.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/management-user-groups"

        return await self.get(url)

    async def management_user_group_create_management_user_groups_user_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create user-group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-user-groups/{name}"

        return await self.post(url)

    async def management_user_group_read_management_user_groups_user_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get user-group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-user-groups/{name}"

        return await self.get(url)

    async def management_user_group_delete_management_user_groups_user_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete user-group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-user-groups/{name}"

        return await self.delete(url)

    async def management_user_group_create_management_user_groups_user_group_rule_by_id_v1(
        self,
        name: str = None,
        seq_number: str = None,
    ) -> Response:
        """Create rule by ID.

        Args:
            name (str, optional): name
            seq_number (str, optional): seqNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-user-groups/{name}/rule/{seq_number}"

        return await self.post(url)

    async def management_user_group_read_management_user_groups_user_group_rule_by_id_v1(
        self,
        name: str = None,
        seq_number: str = None,
    ) -> Response:
        """Get rule by ID.

        Args:
            name (str, optional): name
            seq_number (str, optional): seqNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-user-groups/{name}/rule/{seq_number}"

        return await self.get(url)

    async def management_user_group_delete_management_user_groups_user_group_rule_by_id_v1(
        self,
        name: str = None,
        seq_number: str = None,
    ) -> Response:
        """Delete rule by ID.

        Args:
            name (str, optional): name
            seq_number (str, optional): seqNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-user-groups/{name}/rule/{seq_number}"

        return await self.delete(url)

    async def management_user_group_create_management_user_groups_user_group_rule_rbac_by_id_v1(
        self,
        name: str = None,
        seq_number: str = None,
    ) -> Response:
        """Create rbac by ID.

        Args:
            name (str, optional): name
            seq_number (str, optional): seqNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-user-groups/{name}/rule/{seq_number}/rbac"

        return await self.post(url)

    async def management_user_group_read_management_user_groups_user_group_rule_rbac_by_id_v1(
        self,
        name: str = None,
        seq_number: str = None,
    ) -> Response:
        """Get rbac by ID.

        Args:
            name (str, optional): name
            seq_number (str, optional): seqNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-user-groups/{name}/rule/{seq_number}/rbac"

        return await self.get(url)

    async def management_user_group_create_management_user_groups_user_group_rest_rule_by_id_v1(
        self,
        name: str = None,
        seq_number: str = None,
    ) -> Response:
        """Create rest-rule by ID.

        Args:
            name (str, optional): name
            seq_number (str, optional): seqNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-user-groups/{name}/rest-rule/{seq_number}"

        return await self.post(url)

    async def management_user_group_read_management_user_groups_user_group_rest_rule_by_id_v1(
        self,
        name: str = None,
        seq_number: str = None,
    ) -> Response:
        """Get rest-rule by ID.

        Args:
            name (str, optional): name
            seq_number (str, optional): seqNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-user-groups/{name}/rest-rule/{seq_number}"

        return await self.get(url)

    async def management_user_group_delete_management_user_groups_user_group_rest_rule_by_id_v1(
        self,
        name: str = None,
        seq_number: str = None,
    ) -> Response:
        """Delete rest-rule by ID.

        Args:
            name (str, optional): name
            seq_number (str, optional): seqNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-user-groups/{name}/rest-rule/{seq_number}"

        return await self.delete(url)

    async def management_user_group_create_management_user_groups_user_group_rest_rule_rbac_by_id_v1(
        self,
        name: str = None,
        seq_number: str = None,
    ) -> Response:
        """Create rbac by ID.

        Args:
            name (str, optional): name
            seq_number (str, optional): seqNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-user-groups/{name}/rest-rule/{seq_number}/rbac"

        return await self.post(url)

    async def management_user_group_read_management_user_groups_user_group_rest_rule_rbac_by_id_v1(
        self,
        name: str = None,
        seq_number: str = None,
    ) -> Response:
        """Get rbac by ID.

        Args:
            name (str, optional): name
            seq_number (str, optional): seqNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-user-groups/{name}/rest-rule/{seq_number}/rbac"

        return await self.get(url)

    async def management_user_create_management_users_by_id_v1(
        self,
        ssh: bool = True,
        telnet: bool = True,
        https_server: bool = True,
        console: bool = True,
    ) -> Response:
        """Create management-users by ID.

        Args:
            ssh (bool, optional): Allow SSH login for the user.
            telnet (bool, optional): Allow Telnet login for the user.
            https_server (bool, optional): Allow REST and WebUI login for the user.
            console (bool, optional): Allow console login for the user.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/management-users"

        json_data = {
            'ssh': ssh,
            'telnet': telnet,
            'https_server': https_server,
            'console': console
        }

        return await self.post(url, json_data=json_data)

    async def management_user_read_management_users_v1(
        self,
    ) -> Response:
        """Get management-users.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/management-users"

        return await self.get(url)

    async def management_user_create_management_users_user_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create user by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-users/{name}"

        return await self.post(url)

    async def management_user_read_management_users_user_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get user by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-users/{name}"

        return await self.get(url)

    async def management_user_delete_management_users_user_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete user by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-users/{name}"

        return await self.delete(url)

    async def management_user_create_management_users_user_interface_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create interface by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-users/{name}/interface"

        return await self.post(url)

    async def management_user_read_management_users_user_interface_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get interface by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-users/{name}/interface"

        return await self.get(url)

    async def management_user_create_management_users_user_authorized_key_by_id_v1(
        self,
        name: str = None,
        public_key: str = None,
    ) -> Response:
        """Create authorized-key by ID.

        Args:
            name (str, optional): name
            public_key (str, optional): publicKey

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-users/{name}/authorized-key/{public_key}"

        return await self.post(url)

    async def management_user_read_management_users_user_authorized_key_by_id_v1(
        self,
        name: str = None,
        public_key: str = None,
    ) -> Response:
        """Get authorized-key by ID.

        Args:
            name (str, optional): name
            public_key (str, optional): publicKey

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-users/{name}/authorized-key/{public_key}"

        return await self.get(url)

    async def management_user_delete_management_users_user_authorized_key_by_id_v1(
        self,
        name: str = None,
        public_key: str = None,
    ) -> Response:
        """Delete authorized-key by ID.

        Args:
            name (str, optional): name
            public_key (str, optional): publicKey

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-users/{name}/authorized-key/{public_key}"

        return await self.delete(url)

    async def management_webui_user_create_management_webui_users_by_id_v1(
        self,
        certificate_name: str,
        username: str,
        rolename: str,
        max_concurrent_sessions: int,
        serial: str,
    ) -> Response:
        """Create management-webui-users by ID.

        Args:
            certificate_name (str): The client certificate for authenticating administrative users
                using the Web UI.
            username (str): Name of the user.
            rolename (str): User role. For example, user with read-only
                privilege or the guest management user  Valid Values: ROOT, GUEST_PROVISIONING,
                NETWORK_OPERATIONS, READ_ONLY, LOCATION_API_MGMT, NBAPI_MGMT, AP_PROVISIONING,
                STANDARD, LOCAL
            max_concurrent_sessions (int): Maximum concurrent session for this management user.
                Max 32. 0 will unset it.
            serial (str): Serial number of user's certificate in hexadecimal

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/management-webui-users"

        json_data = {
            'certificate_name': certificate_name,
            'username': username,
            'rolename': rolename,
            'max_concurrent_sessions': max_concurrent_sessions,
            'serial': serial
        }

        return await self.post(url, json_data=json_data)

    async def management_webui_user_read_management_webui_users_v1(
        self,
    ) -> Response:
        """Get management-webui-users.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/management-webui-users"

        return await self.get(url)

    async def management_webui_user_create_management_webui_users_web_ui_user_by_id_v1(
        self,
        certificate_name: str = None,
    ) -> Response:
        """Create web-ui-user by ID.

        Args:
            certificate_name (str, optional): certificateName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-webui-users/{certificate_name}"

        return await self.post(url)

    async def management_webui_user_read_management_webui_users_web_ui_user_by_id_v1(
        self,
        certificate_name: str = None,
    ) -> Response:
        """Get web-ui-user by ID.

        Args:
            certificate_name (str, optional): certificateName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-webui-users/{certificate_name}"

        return await self.get(url)

    async def management_webui_user_delete_management_webui_users_web_ui_user_by_id_v1(
        self,
        certificate_name: str = None,
    ) -> Response:
        """Delete web-ui-user by ID.

        Args:
            certificate_name (str, optional): certificateName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/management-webui-users/{certificate_name}"

        return await self.delete(url)

    async def mesh_create_mesh_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        cluster: list = None,
        role: str = None,
        band: str = None,
        recovery: str = None,
        split5g_band_range: str = None,
        topology_algorithm: str = None,
        mobility: str = None,
        a_tx_rates: List[str] = None,
        max_children: int = None,
        heartbeat_threshold: int = None,
        hop_count: int = None,
        link_threshold: int = None,
        max_retries: int = None,
        mobility_beacon_miss: int = None,
        private_vlan: int = None,
        metric_algorithm: str = None,
        optimize_scan_interval: int = None,
        prefer_uplink_radio: str = None,
        reselection_mode: str = None,
    ) -> Response:
        """Create mesh by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Mesh profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Mesh profile name.
            description (str): Mesh profile description.
            cluster (list): List of Mesh clusters.
            role (str): Mesh role  Valid Values: AUTO, PORTAL, POINT
            band (str): Configures the radio band used for mesh link. When configured, the mesh link
                is established in the defined radio band.  Valid Values: BAND_TYPE_24GHZ,
                BAND_TYPE_5GHZ, BAND_TYPE_6GHZ, BAND_TYPE_ALL
            recovery (str): A function to allow mesh point connection using a backup general configs
                when configured profile can not establish mesh link
            split5g_band_range (str): Configures the 5 GHz radio used for the mesh link. Use this
                command to configure the 5 GHz radio that should be used as the mesh link. This
                setting only takes effect when split 5 GHz or dual 5 GHz radio is enabled on the AP.
                Valid Values: FULL, LOWER, UPPER, FIRST
            topology_algorithm (str): Mesh  topology algorithm  Valid Values: LOCAL, CENTRAL
            mobility (str): Configures enabled fast roaming on a mesh point
            a_tx_rates (List[str]): a-tx-rates
            max_children (int): Maximum number of mesh children APs that can be connected to the
                AP.Range: 1-64 Default: 8
            heartbeat_threshold (int): Heartbeat threshold for mesh neighbor APs. The AP will drop
                connection with the neighboring AP when the missed heartbeat count exceeds the
                defined threshold.                                        Range: 1-255  Default: 10
            hop_count (int): Maximum number of hop counts allowed between the AP and the mesh
                portal. The parent mesh AP will be dynamically selected on the number of number of
                hop counts allowed.                              Range: 1-32  Default: 2
            link_threshold (int): Threshold RSSI value below which mesh links incur a metric
                penalty. Range: 10-90  Default: 12
            max_retries (int): Maximum number of scans the Instant AP performs on a particular
                channel to identify neighboring mesh APs before moving on to the next channel.
                Range: 1-15 Default: 4
            mobility_beacon_miss (int): Number of consecutive missed Beacon frames after which mesh
                roaming it triggered on the AP. Applies to mesh points with mobility enabled.
                Range: 10-25   Default: 16
            private_vlan (int): Mesh private VLAN ID for control traffic between a remote mesh
                portal and mesh node. Range: 0-4094  Default: 0
            metric_algorithm (str): Metric algorithm used for path selection to the mesh portal AP.
                Range: distributed-tree-rssi, best-link-rssi  Default: distributed-tree-rssi  Valid
                Values: BEST_LINK_RSSI, DISTRIBUTED_TREE_RSSI
            optimize_scan_interval (int): Time interval between scans to identify better mesh
                neighbor APs for topology optimization. The value is defined in hours. Range: 1-100
                hours  Default: 24
            prefer_uplink_radio (str): The preferred 5 GHz radio for mesh links. Mesh link neighbors
                identified in this radio band will be prioritized over other neighbors identified in
                the other radio band. This parameter will only take effect when dual 5 GHz or split
                5 GHz radio is enabled on the AP and mesh-split5g-radio-band is set to full.
                Range: none, 5g-lower, 5g-upper    Default: none  Valid Values: NONE,
                UPLINK_5G_LOWER, UPLINK_5G_UPPER
            reselection_mode (str): Reselection mode of operation.  Range: never, subthreshold,
                startup-subthreshold, anytime   Default: startup-subthreshold  Valid Values: NEVER,
                SUBTHRESHOLD, STARTUP_SUBTHRESHOLD, ANYTIME

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mesh"

        json_data = {
            'name': name,
            'description': description,
            'cluster': cluster,
            'role': role,
            'band': band,
            'recovery': recovery,
            'split5g_band_range': split5g_band_range,
            'topology_algorithm': topology_algorithm,
            'mobility': mobility,
            'a_tx_rates': a_tx_rates,
            'max_children': max_children,
            'heartbeat_threshold': heartbeat_threshold,
            'hop_count': hop_count,
            'link_threshold': link_threshold,
            'max_retries': max_retries,
            'mobility_beacon_miss': mobility_beacon_miss,
            'private_vlan': private_vlan,
            'metric_algorithm': metric_algorithm,
            'optimize_scan_interval': optimize_scan_interval,
            'prefer_uplink_radio': prefer_uplink_radio,
            'reselection_mode': reselection_mode
        }

        return await self.post(url, json_data=json_data)

    async def mesh_read_mesh_v1(
        self,
    ) -> Response:
        """Get mesh.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mesh"

        return await self.get(url)

    async def mesh_create_mesh_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mesh/{name}"

        return await self.post(url)

    async def mesh_read_mesh_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mesh/{name}"

        return await self.get(url)

    async def mesh_delete_mesh_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mesh/{name}"

        return await self.delete(url)

    async def mesh_create_mesh_profile_cluster_by_id_v1(
        self,
        name: str = None,
        mc_name: str = None,
    ) -> Response:
        """Create cluster by ID.

        Args:
            name (str, optional): name
            mc_name (str, optional): mcName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mesh/{name}/cluster/{mc_name}"

        return await self.post(url)

    async def mesh_read_mesh_profile_cluster_by_id_v1(
        self,
        name: str = None,
        mc_name: str = None,
    ) -> Response:
        """Get cluster by ID.

        Args:
            name (str, optional): name
            mc_name (str, optional): mcName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mesh/{name}/cluster/{mc_name}"

        return await self.get(url)

    async def mesh_delete_mesh_profile_cluster_by_id_v1(
        self,
        name: str = None,
        mc_name: str = None,
    ) -> Response:
        """Delete cluster by ID.

        Args:
            name (str, optional): name
            mc_name (str, optional): mcName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mesh/{name}/cluster/{mc_name}"

        return await self.delete(url)

    async def mesh_create_mesh_profile_a_tx_rates_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create a-tx-rates by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mesh/{name}/a-tx-rates"

        return await self.post(url)

    async def mesh_read_mesh_profile_a_tx_rates_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get a-tx-rates by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mesh/{name}/a-tx-rates"

        return await self.get(url)

    async def mesh_delete_mesh_profile_a_tx_rates_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete a-tx-rates by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mesh/{name}/a-tx-rates"

        return await self.delete(url)

    async def mgmd_create_mgmd_global_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        eth_ports: List[str] = None,
        lag_ports: List[str] = None,
        all_ports: bool = False,
    ) -> Response:
        """Create mgmd-global by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): MGMD Profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            eth_ports (List[str], optional): eth-ports
            lag_ports (List[str], optional): lag-ports
            all_ports (bool, optional): Enable fastlearn on all ports.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mgmd-global"

        json_data = {
            'eth_ports': eth_ports,
            'lag_ports': lag_ports,
            'all_ports': all_ports
        }

        return await self.post(url, json_data=json_data)

    async def mgmd_read_mgmd_global_v1(
        self,
    ) -> Response:
        """Get mgmd-global.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mgmd-global"

        return await self.get(url)

    async def mgmd_create_mgmd_global_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}"

        return await self.post(url)

    async def mgmd_read_mgmd_global_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}"

        return await self.get(url)

    async def mgmd_delete_mgmd_global_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}"

        return await self.delete(url)

    async def mgmd_create_mgmd_global_profile_igmp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create igmp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}/igmp"

        return await self.post(url)

    async def mgmd_read_mgmd_global_profile_igmp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get igmp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}/igmp"

        return await self.get(url)

    async def mgmd_create_mgmd_global_profile_igmp_proxy_domains_by_id_v1(
        self,
        name: str = None,
        proxy_domains_name: str = None,
    ) -> Response:
        """Create proxy-domains by ID.

        Args:
            name (str, optional): name
            proxy_domains_name (str, optional): proxy-domains_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}/igmp/proxy-domains/{proxy_domains_name}"

        return await self.post(url)

    async def mgmd_read_mgmd_global_profile_igmp_proxy_domains_by_id_v1(
        self,
        name: str = None,
        proxy_domains_name: str = None,
    ) -> Response:
        """Get proxy-domains by ID.

        Args:
            name (str, optional): name
            proxy_domains_name (str, optional): proxy-domains_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}/igmp/proxy-domains/{proxy_domains_name}"

        return await self.get(url)

    async def mgmd_delete_mgmd_global_profile_igmp_proxy_domains_by_id_v1(
        self,
        name: str = None,
        proxy_domains_name: str = None,
    ) -> Response:
        """Delete proxy-domains by ID.

        Args:
            name (str, optional): name
            proxy_domains_name (str, optional): proxy-domains_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}/igmp/proxy-domains/{proxy_domains_name}"

        return await self.delete(url)

    async def mgmd_create_mgmd_global_profile_igmp_fastlearn_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create fastlearn by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}/igmp/fastlearn"

        return await self.post(url)

    async def mgmd_read_mgmd_global_profile_igmp_fastlearn_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get fastlearn by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}/igmp/fastlearn"

        return await self.get(url)

    async def mgmd_create_mgmd_global_profile_mld_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create mld by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}/mld"

        return await self.post(url)

    async def mgmd_read_mgmd_global_profile_mld_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get mld by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}/mld"

        return await self.get(url)

    async def mgmd_create_mgmd_global_profile_mld_fastlearn_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create fastlearn by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}/mld/fastlearn"

        return await self.post(url)

    async def mgmd_read_mgmd_global_profile_mld_fastlearn_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get fastlearn by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmd-global/{name}/mld/fastlearn"

        return await self.get(url)

    async def mgmt_subnet_create_mgmt_subnet_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        restricted_access: list = None,
    ) -> Response:
        """Create mgmt-subnet by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Management subnets profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Management subnets profile name.
            description (str): Management subnets profile description.
            restricted_access (list): Restricted management configuration.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mgmt-subnet"

        json_data = {
            'name': name,
            'description': description,
            'restricted_access': restricted_access
        }

        return await self.post(url, json_data=json_data)

    async def mgmt_subnet_read_mgmt_subnet_v1(
        self,
    ) -> Response:
        """Get mgmt-subnet.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mgmt-subnet"

        return await self.get(url)

    async def mgmt_subnet_create_mgmt_subnet_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmt-subnet/{name}"

        return await self.post(url)

    async def mgmt_subnet_read_mgmt_subnet_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmt-subnet/{name}"

        return await self.get(url)

    async def mgmt_subnet_delete_mgmt_subnet_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmt-subnet/{name}"

        return await self.delete(url)

    async def mgmt_subnet_create_mgmt_subnet_profile_restricted_access_by_id_v1(
        self,
        name: str = None,
        subnet: str = None,
    ) -> Response:
        """Create restricted-access by ID.

        Args:
            name (str, optional): name
            subnet (str, optional): subnet

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmt-subnet/{name}/restricted-access/{subnet}"

        return await self.post(url)

    async def mgmt_subnet_read_mgmt_subnet_profile_restricted_access_by_id_v1(
        self,
        name: str = None,
        subnet: str = None,
    ) -> Response:
        """Get restricted-access by ID.

        Args:
            name (str, optional): name
            subnet (str, optional): subnet

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmt-subnet/{name}/restricted-access/{subnet}"

        return await self.get(url)

    async def mgmt_subnet_delete_mgmt_subnet_profile_restricted_access_by_id_v1(
        self,
        name: str = None,
        subnet: str = None,
    ) -> Response:
        """Delete restricted-access by ID.

        Args:
            name (str, optional): name
            subnet (str, optional): subnet

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mgmt-subnet/{name}/restricted-access/{subnet}"

        return await self.delete(url)

    async def microbranch_ap_firmware_create_microbranch_ap_firmware_by_id_v1(
        self,
        upgrade_mode: str,
        version: str,
        rollback: str,
    ) -> Response:
        """Create microbranch-ap-firmware by ID.

        Args:
            upgrade_mode (str): Live upgrade or regular upgrade  Valid Values: AOS_REGULAR, AOS_LIVE
            version (str): Desired firmware version
            rollback (str): INTERNAL - firmware version to rollback to

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/microbranch-ap-firmware"

        json_data = {
            'upgrade_mode': upgrade_mode,
            'version': version,
            'rollback': rollback
        }

        return await self.post(url, json_data=json_data)

    async def microbranch_ap_firmware_read_microbranch_ap_firmware_v1(
        self,
    ) -> Response:
        """Get microbranch-ap-firmware.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/microbranch-ap-firmware"

        return await self.get(url)

    async def microbranch_tunnel_create_microbranch_tunnel_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        inner_ip: str = None,
    ) -> Response:
        """Create microbranch-tunnel by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of Microbranch Tunnel Profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Microbranch Tunnel Profile name.
            description (str): Microbranch Tunnel profile description.
            enable (bool): Enable microbranch tunnel
            inner_ip (str): Inner IP address.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/microbranch-tunnel"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'inner_ip': inner_ip
        }

        return await self.post(url, json_data=json_data)

    async def microbranch_tunnel_read_microbranch_tunnel_v1(
        self,
    ) -> Response:
        """Get microbranch-tunnel.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/microbranch-tunnel"

        return await self.get(url)

    async def microbranch_tunnel_create_microbranch_tunnel_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/microbranch-tunnel/{name}"

        return await self.post(url)

    async def microbranch_tunnel_read_microbranch_tunnel_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/microbranch-tunnel/{name}"

        return await self.get(url)

    async def microbranch_tunnel_delete_microbranch_tunnel_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/microbranch-tunnel/{name}"

        return await self.delete(url)

    async def mirror_create_mirrors_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        sessions: list = None,
    ) -> Response:
        """Create mirrors by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Mirror Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Mirror profile name.
            description (str): Mirror profile description.
            sessions (list): List of configured mirror sessions

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mirrors"

        json_data = {
            'name': name,
            'description': description,
            'sessions': sessions
        }

        return await self.post(url, json_data=json_data)

    async def mirror_read_mirrors_v1(
        self,
    ) -> Response:
        """Get mirrors.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mirrors"

        return await self.get(url)

    async def mirror_create_mirrors_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mirrors/{name}"

        return await self.post(url)

    async def mirror_read_mirrors_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mirrors/{name}"

        return await self.get(url)

    async def mirror_delete_mirrors_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mirrors/{name}"

        return await self.delete(url)

    async def mirror_create_mirrors_profile_sessions_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
    ) -> Response:
        """Create sessions by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mirrors/{name}/sessions/{session_id}"

        return await self.post(url)

    async def mirror_read_mirrors_profile_sessions_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
    ) -> Response:
        """Get sessions by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mirrors/{name}/sessions/{session_id}"

        return await self.get(url)

    async def mirror_delete_mirrors_profile_sessions_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
    ) -> Response:
        """Delete sessions by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mirrors/{name}/sessions/{session_id}"

        return await self.delete(url)

    async def mirror_create_mirrors_profile_sessions_session_sources_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
    ) -> Response:
        """Create session-sources by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mirrors/{name}/sessions/{session_id}/session-sources"

        return await self.post(url)

    async def mirror_read_mirrors_profile_sessions_session_sources_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
    ) -> Response:
        """Get session-sources by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mirrors/{name}/sessions/{session_id}/session-sources"

        return await self.get(url)

    async def mirror_create_mirrors_profile_sessions_session_destination_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
    ) -> Response:
        """Create session-destination by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mirrors/{name}/sessions/{session_id}/session-destination"

        return await self.post(url)

    async def mirror_read_mirrors_profile_sessions_session_destination_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
    ) -> Response:
        """Get session-destination by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mirrors/{name}/sessions/{session_id}/session-destination"

        return await self.get(url)

    async def mka_create_mka_by_id_v1(
        self,
        policy: list,
    ) -> Response:
        """Create mka by ID.

        Args:
            policy (list): List of MKA policies.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mka"

        json_data = {
            'policy': policy
        }

        return await self.post(url, json_data=json_data)

    async def mka_read_mka_v1(
        self,
    ) -> Response:
        """Get mka.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mka"

        return await self.get(url)

    async def mka_create_mka_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mka/{name}"

        return await self.post(url)

    async def mka_read_mka_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mka/{name}"

        return await self.get(url)

    async def mka_delete_mka_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mka/{name}"

        return await self.delete(url)

    async def mobility_gateway_firmware_create_mobility_gateway_firmware_by_id_v1(
        self,
        upgrade_mode: str,
        version: str,
        rollback: str,
        active_partition: str,
        auto_reboot: bool,
    ) -> Response:
        """Create mobility-gateway-firmware by ID.

        Args:
            upgrade_mode (str): Live upgrade or regular upgrade  Valid Values: AOS_REGULAR, AOS_LIVE
            version (str): Desired firmware version
            rollback (str): INTERNAL - firmware version to rollback to
            active_partition (str): Partition to upgrade  Valid Values: PRIMARY, SECONDARY
            auto_reboot (bool): Automatically reboot after upgrade or not

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mobility-gateway-firmware"

        json_data = {
            'upgrade_mode': upgrade_mode,
            'version': version,
            'rollback': rollback,
            'active_partition': active_partition,
            'auto_reboot': auto_reboot
        }

        return await self.post(url, json_data=json_data)

    async def mobility_gateway_firmware_read_mobility_gateway_firmware_v1(
        self,
    ) -> Response:
        """Get mobility-gateway-firmware.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mobility-gateway-firmware"

        return await self.get(url)

    async def mpls_create_mpls_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create mpls by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): MPLS profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): MPLS profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mpls"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def mpls_read_mpls_v1(
        self,
    ) -> Response:
        """Get mpls.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mpls"

        return await self.get(url)

    async def mpls_create_mpls_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpls/{name}"

        return await self.post(url)

    async def mpls_read_mpls_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpls/{name}"

        return await self.get(url)

    async def mpls_delete_mpls_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpls/{name}"

        return await self.delete(url)

    async def mpls_create_mpls_profile_static_lsp_by_id_v1(
        self,
        name: str = None,
        role: str = None,
    ) -> Response:
        """Create static-lsp by ID.

        Args:
            name (str, optional): name
            role (str, optional): role

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpls/{name}/static-lsp/{role}"

        return await self.post(url)

    async def mpls_read_mpls_profile_static_lsp_by_id_v1(
        self,
        name: str = None,
        role: str = None,
    ) -> Response:
        """Get static-lsp by ID.

        Args:
            name (str, optional): name
            role (str, optional): role

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpls/{name}/static-lsp/{role}"

        return await self.get(url)

    async def mpls_delete_mpls_profile_static_lsp_by_id_v1(
        self,
        name: str = None,
        role: str = None,
    ) -> Response:
        """Delete static-lsp by ID.

        Args:
            name (str, optional): name
            role (str, optional): role

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpls/{name}/static-lsp/{role}"

        return await self.delete(url)

    async def mpls_create_mpls_profile_ldp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ldp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpls/{name}/ldp"

        return await self.post(url)

    async def mpls_read_mpls_profile_ldp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ldp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpls/{name}/ldp"

        return await self.get(url)

    async def mpsk_local_create_mpsk_local_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        passphrase_list: list = None,
    ) -> Response:
        """Create mpsk-local by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of MPSK Local profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Profile name.
            description (str): Profile description.
            passphrase_list (list): Passphrase list.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mpsk-local"

        json_data = {
            'name': name,
            'description': description,
            'passphrase_list': passphrase_list
        }

        return await self.post(url, json_data=json_data)

    async def mpsk_local_read_mpsk_local_v1(
        self,
    ) -> Response:
        """Get mpsk-local.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mpsk-local"

        return await self.get(url)

    async def mpsk_local_create_mpsk_local_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpsk-local/{name}"

        return await self.post(url)

    async def mpsk_local_read_mpsk_local_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpsk-local/{name}"

        return await self.get(url)

    async def mpsk_local_delete_mpsk_local_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpsk-local/{name}"

        return await self.delete(url)

    async def mpsk_local_create_mpsk_local_profile_passphrase_list_by_id_v1(
        self,
        name: str = None,
        passname: str = None,
    ) -> Response:
        """Create passphrase-list by ID.

        Args:
            name (str, optional): name
            passname (str, optional): passname

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpsk-local/{name}/passphrase-list/{passname}"

        return await self.post(url)

    async def mpsk_local_read_mpsk_local_profile_passphrase_list_by_id_v1(
        self,
        name: str = None,
        passname: str = None,
    ) -> Response:
        """Get passphrase-list by ID.

        Args:
            name (str, optional): name
            passname (str, optional): passname

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpsk-local/{name}/passphrase-list/{passname}"

        return await self.get(url)

    async def mpsk_local_delete_mpsk_local_profile_passphrase_list_by_id_v1(
        self,
        name: str = None,
        passname: str = None,
    ) -> Response:
        """Delete passphrase-list by ID.

        Args:
            name (str, optional): name
            passname (str, optional): passname

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mpsk-local/{name}/passphrase-list/{passname}"

        return await self.delete(url)

    async def msdp_create_msdp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        router: list = None,
    ) -> Response:
        """Create msdp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): MSDP profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): MSDP profile name.
            description (str): MSDP profile description.
            router (list): The list of all the MSDP Router instances

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/msdp"

        json_data = {
            'name': name,
            'description': description,
            'router': router
        }

        return await self.post(url, json_data=json_data)

    async def msdp_read_msdp_v1(
        self,
    ) -> Response:
        """Get msdp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/msdp"

        return await self.get(url)

    async def msdp_create_msdp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/msdp/{name}"

        return await self.post(url)

    async def msdp_read_msdp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/msdp/{name}"

        return await self.get(url)

    async def msdp_delete_msdp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/msdp/{name}"

        return await self.delete(url)

    async def msdp_create_msdp_profile_router_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create router by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/msdp/{name}/router/{vrf}"

        return await self.post(url)

    async def msdp_read_msdp_profile_router_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get router by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/msdp/{name}/router/{vrf}"

        return await self.get(url)

    async def msdp_delete_msdp_profile_router_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete router by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/msdp/{name}/router/{vrf}"

        return await self.delete(url)

    async def msdp_create_msdp_profile_router_peer_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address: str = None,
    ) -> Response:
        """Create peer by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/msdp/{name}/router/{vrf}/peer/{address}"

        return await self.post(url)

    async def msdp_read_msdp_profile_router_peer_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address: str = None,
    ) -> Response:
        """Get peer by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/msdp/{name}/router/{vrf}/peer/{address}"

        return await self.get(url)

    async def msdp_delete_msdp_profile_router_peer_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address: str = None,
    ) -> Response:
        """Delete peer by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/msdp/{name}/router/{vrf}/peer/{address}"

        return await self.delete(url)

    async def multicast_dns_create_multicast_dns_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        service_discovery_rule_set: list = None,
        service_discovery_service: list = None,
        filter_in_action: str = None,
        filter_out_action: str = None,
        gateway_vlans: List[str] = None,
    ) -> Response:
        """Create multicast-dns by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Multicast DNS profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Multicast DNS profile name.
            description (str): User comment or description.
            enable (bool): Enable Multicast DNS Service Discovery
            service_discovery_rule_set (list): Configure multicast DNS Service Discovery Profile
                rule-set
            service_discovery_service (list): Configure multicast DNS Service Discovery service
            filter_in_action (str): mDNS filter action by matching inbound traffic  Valid Values:
                PERMIT, DENY
            filter_out_action (str): mDNS filter action by matching outbound traffic  Valid Values:
                PERMIT, DENY
            gateway_vlans (List[str]): gateway-vlans

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/multicast-dns"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'service_discovery_rule_set': service_discovery_rule_set,
            'service_discovery_service': service_discovery_service,
            'filter_in_action': filter_in_action,
            'filter_out_action': filter_out_action,
            'gateway_vlans': gateway_vlans
        }

        return await self.post(url, json_data=json_data)

    async def multicast_dns_read_multicast_dns_v1(
        self,
    ) -> Response:
        """Get multicast-dns.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/multicast-dns"

        return await self.get(url)

    async def multicast_dns_create_multicast_dns_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}"

        return await self.post(url)

    async def multicast_dns_read_multicast_dns_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}"

        return await self.get(url)

    async def multicast_dns_delete_multicast_dns_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}"

        return await self.delete(url)

    async def multicast_dns_create_multicast_dns_profile_service_discovery_rule_set_by_id_v1(
        self,
        name: str = None,
        profile_name: str = None,
    ) -> Response:
        """Create service-discovery-rule-set by ID.

        Args:
            name (str, optional): name
            profile_name (str, optional): profileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-rule-set/{profile_name}"

        return await self.post(url)

    async def multicast_dns_read_multicast_dns_profile_service_discovery_rule_set_by_id_v1(
        self,
        name: str = None,
        profile_name: str = None,
    ) -> Response:
        """Get service-discovery-rule-set by ID.

        Args:
            name (str, optional): name
            profile_name (str, optional): profileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-rule-set/{profile_name}"

        return await self.get(url)

    async def multicast_dns_delete_multicast_dns_profile_service_discovery_rule_set_by_id_v1(
        self,
        name: str = None,
        profile_name: str = None,
    ) -> Response:
        """Delete service-discovery-rule-set by ID.

        Args:
            name (str, optional): name
            profile_name (str, optional): profileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-rule-set/{profile_name}"

        return await self.delete(url)

    async def multicast_dns_create_multicast_dns_profile_service_discovery_rule_set_filter_rule_by_id_v1(
        self,
        name: str = None,
        profile_name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Create filter-rule by ID.

        Args:
            name (str, optional): name
            profile_name (str, optional): profileName
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-rule-set/{profile_name}/filter-rule/{sequence_number}"

        return await self.post(url)

    async def multicast_dns_read_multicast_dns_profile_service_discovery_rule_set_filter_rule_by_id_v1(
        self,
        name: str = None,
        profile_name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Get filter-rule by ID.

        Args:
            name (str, optional): name
            profile_name (str, optional): profileName
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-rule-set/{profile_name}/filter-rule/{sequence_number}"

        return await self.get(url)

    async def multicast_dns_delete_multicast_dns_profile_service_discovery_rule_set_filter_rule_by_id_v1(
        self,
        name: str = None,
        profile_name: str = None,
        sequence_number: str = None,
    ) -> Response:
        """Delete filter-rule by ID.

        Args:
            name (str, optional): name
            profile_name (str, optional): profileName
            sequence_number (str, optional): sequenceNumber

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-rule-set/{profile_name}/filter-rule/{sequence_number}"

        return await self.delete(url)

    async def multicast_dns_create_multicast_dns_profile_service_discovery_rule_set_sd_gateway_vlans_by_id_v1(
        self,
        name: str = None,
        profile_name: str = None,
    ) -> Response:
        """Create sd-gateway-vlans by ID.

        Args:
            name (str, optional): name
            profile_name (str, optional): profileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-rule-set/{profile_name}/sd-gateway-vlans"

        return await self.post(url)

    async def multicast_dns_read_multicast_dns_profile_service_discovery_rule_set_sd_gateway_vlans_by_id_v1(
        self,
        name: str = None,
        profile_name: str = None,
    ) -> Response:
        """Get sd-gateway-vlans by ID.

        Args:
            name (str, optional): name
            profile_name (str, optional): profileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-rule-set/{profile_name}/sd-gateway-vlans"

        return await self.get(url)

    async def multicast_dns_delete_multicast_dns_profile_service_discovery_rule_set_sd_gateway_vlans_by_id_v1(
        self,
        name: str = None,
        profile_name: str = None,
    ) -> Response:
        """Delete sd-gateway-vlans by ID.

        Args:
            name (str, optional): name
            profile_name (str, optional): profileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-rule-set/{profile_name}/sd-gateway-vlans"

        return await self.delete(url)

    async def multicast_dns_create_multicast_dns_profile_service_discovery_service_by_id_v1(
        self,
        name: str = None,
        sd_name: str = None,
    ) -> Response:
        """Create service-discovery-service by ID.

        Args:
            name (str, optional): name
            sd_name (str, optional): sdName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-service/{sd_name}"

        return await self.post(url)

    async def multicast_dns_read_multicast_dns_profile_service_discovery_service_by_id_v1(
        self,
        name: str = None,
        sd_name: str = None,
    ) -> Response:
        """Get service-discovery-service by ID.

        Args:
            name (str, optional): name
            sd_name (str, optional): sdName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-service/{sd_name}"

        return await self.get(url)

    async def multicast_dns_delete_multicast_dns_profile_service_discovery_service_by_id_v1(
        self,
        name: str = None,
        sd_name: str = None,
    ) -> Response:
        """Delete service-discovery-service by ID.

        Args:
            name (str, optional): name
            sd_name (str, optional): sdName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-service/{sd_name}"

        return await self.delete(url)

    async def multicast_dns_create_multicast_dns_profile_service_discovery_service_identifiers_container_by_id_v1(
        self,
        name: str = None,
        sd_name: str = None,
    ) -> Response:
        """Create identifiers-container by ID.

        Args:
            name (str, optional): name
            sd_name (str, optional): sdName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-service/{sd_name}/identifiers-container"

        return await self.post(url)

    async def multicast_dns_read_multicast_dns_profile_service_discovery_service_identifiers_container_by_id_v1(
        self,
        name: str = None,
        sd_name: str = None,
    ) -> Response:
        """Get identifiers-container by ID.

        Args:
            name (str, optional): name
            sd_name (str, optional): sdName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/service-discovery-service/{sd_name}/identifiers-container"

        return await self.get(url)

    async def multicast_dns_create_multicast_dns_profile_gateway_vlans_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create gateway-vlans by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/gateway-vlans"

        return await self.post(url)

    async def multicast_dns_read_multicast_dns_profile_gateway_vlans_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get gateway-vlans by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/gateway-vlans"

        return await self.get(url)

    async def multicast_dns_delete_multicast_dns_profile_gateway_vlans_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete gateway-vlans by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-dns/{name}/gateway-vlans"

        return await self.delete(url)

    async def multicast_static_route_create_multicast_static_route_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        ipv4: list = None,
        ipv6: list = None,
    ) -> Response:
        """Create multicast-static-route by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Multicast-static-route profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Multicast-static-route profile name.
            description (str): Multicast-static-route profile description.
            ipv4 (list): Configure IPV4 multicast route
            ipv6 (list): Configure IPV6 multicast route

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/multicast-static-route"

        json_data = {
            'name': name,
            'description': description,
            'ipv4': ipv4,
            'ipv6': ipv6
        }

        return await self.post(url, json_data=json_data)

    async def multicast_static_route_read_multicast_static_route_v1(
        self,
    ) -> Response:
        """Get multicast-static-route.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/multicast-static-route"

        return await self.get(url)

    async def multicast_static_route_create_multicast_static_route_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}"

        return await self.post(url)

    async def multicast_static_route_read_multicast_static_route_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}"

        return await self.get(url)

    async def multicast_static_route_delete_multicast_static_route_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}"

        return await self.delete(url)

    async def multicast_static_route_create_multicast_static_route_profile_ipv4_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        source_address: str = None,
        group_address: str = None,
        upstream_interface: str = None,
    ) -> Response:
        """Create ipv4 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            source_address (str, optional): sourceAddress
            group_address (str, optional): groupAddress
            upstream_interface (str, optional): upstreamInterface

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}/ipv4/{vrf}/{source_address}/{group_address}/{upstream_interface}"

        return await self.post(url)

    async def multicast_static_route_read_multicast_static_route_profile_ipv4_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        source_address: str = None,
        group_address: str = None,
        upstream_interface: str = None,
    ) -> Response:
        """Get ipv4 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            source_address (str, optional): sourceAddress
            group_address (str, optional): groupAddress
            upstream_interface (str, optional): upstreamInterface

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}/ipv4/{vrf}/{source_address}/{group_address}/{upstream_interface}"

        return await self.get(url)

    async def multicast_static_route_delete_multicast_static_route_profile_ipv4_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        source_address: str = None,
        group_address: str = None,
        upstream_interface: str = None,
    ) -> Response:
        """Delete ipv4 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            source_address (str, optional): sourceAddress
            group_address (str, optional): groupAddress
            upstream_interface (str, optional): upstreamInterface

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}/ipv4/{vrf}/{source_address}/{group_address}/{upstream_interface}"

        return await self.delete(url)

    async def multicast_static_route_create_multicast_static_route_profile_ipv4_outgoing_interfaces_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        source_address: str = None,
        group_address: str = None,
        upstream_interface: str = None,
    ) -> Response:
        """Create outgoing-interfaces by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            source_address (str, optional): sourceAddress
            group_address (str, optional): groupAddress
            upstream_interface (str, optional): upstreamInterface

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}/ipv4/{vrf}/{source_address}/{group_address}/{upstream_interface}/outgoing-interfaces"

        return await self.post(url)

    async def multicast_static_route_read_multicast_static_route_profile_ipv4_outgoing_interfaces_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        source_address: str = None,
        group_address: str = None,
        upstream_interface: str = None,
    ) -> Response:
        """Get outgoing-interfaces by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            source_address (str, optional): sourceAddress
            group_address (str, optional): groupAddress
            upstream_interface (str, optional): upstreamInterface

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}/ipv4/{vrf}/{source_address}/{group_address}/{upstream_interface}/outgoing-interfaces"

        return await self.get(url)

    async def multicast_static_route_delete_multicast_static_route_profile_ipv4_outgoing_interfaces_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        source_address: str = None,
        group_address: str = None,
        upstream_interface: str = None,
    ) -> Response:
        """Delete outgoing-interfaces by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            source_address (str, optional): sourceAddress
            group_address (str, optional): groupAddress
            upstream_interface (str, optional): upstreamInterface

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}/ipv4/{vrf}/{source_address}/{group_address}/{upstream_interface}/outgoing-interfaces"

        return await self.delete(url)

    async def multicast_static_route_create_multicast_static_route_profile_ipv6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        source_address: str = None,
        group_address: str = None,
        upstream_interface: str = None,
    ) -> Response:
        """Create ipv6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            source_address (str, optional): sourceAddress
            group_address (str, optional): groupAddress
            upstream_interface (str, optional): upstreamInterface

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}/ipv6/{vrf}/{source_address}/{group_address}/{upstream_interface}"

        return await self.post(url)

    async def multicast_static_route_read_multicast_static_route_profile_ipv6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        source_address: str = None,
        group_address: str = None,
        upstream_interface: str = None,
    ) -> Response:
        """Get ipv6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            source_address (str, optional): sourceAddress
            group_address (str, optional): groupAddress
            upstream_interface (str, optional): upstreamInterface

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}/ipv6/{vrf}/{source_address}/{group_address}/{upstream_interface}"

        return await self.get(url)

    async def multicast_static_route_delete_multicast_static_route_profile_ipv6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        source_address: str = None,
        group_address: str = None,
        upstream_interface: str = None,
    ) -> Response:
        """Delete ipv6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            source_address (str, optional): sourceAddress
            group_address (str, optional): groupAddress
            upstream_interface (str, optional): upstreamInterface

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}/ipv6/{vrf}/{source_address}/{group_address}/{upstream_interface}"

        return await self.delete(url)

    async def multicast_static_route_create_multicast_static_route_profile_ipv6_outgoing_interfaces_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        source_address: str = None,
        group_address: str = None,
        upstream_interface: str = None,
    ) -> Response:
        """Create outgoing-interfaces by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            source_address (str, optional): sourceAddress
            group_address (str, optional): groupAddress
            upstream_interface (str, optional): upstreamInterface

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}/ipv6/{vrf}/{source_address}/{group_address}/{upstream_interface}/outgoing-interfaces"

        return await self.post(url)

    async def multicast_static_route_read_multicast_static_route_profile_ipv6_outgoing_interfaces_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        source_address: str = None,
        group_address: str = None,
        upstream_interface: str = None,
    ) -> Response:
        """Get outgoing-interfaces by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            source_address (str, optional): sourceAddress
            group_address (str, optional): groupAddress
            upstream_interface (str, optional): upstreamInterface

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}/ipv6/{vrf}/{source_address}/{group_address}/{upstream_interface}/outgoing-interfaces"

        return await self.get(url)

    async def multicast_static_route_delete_multicast_static_route_profile_ipv6_outgoing_interfaces_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        source_address: str = None,
        group_address: str = None,
        upstream_interface: str = None,
    ) -> Response:
        """Delete outgoing-interfaces by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            source_address (str, optional): sourceAddress
            group_address (str, optional): groupAddress
            upstream_interface (str, optional): upstreamInterface

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-static-route/{name}/ipv6/{vrf}/{source_address}/{group_address}/{upstream_interface}/outgoing-interfaces"

        return await self.delete(url)

    async def multicast_create_multicast_global_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        multi_fabric_border_ipv4: bool = None,
        multi_fabric_border_ipv6: bool = None,
        multi_fabric_identifier_ipv4: int = None,
        multi_fabric_identifier_ipv6: int = None,
        l3vni_source_ipv4: str = None,
        l3vni_source_ipv6: str = None,
        multipath_hash_ipv4: str = None,
        multipath_hash_ipv6: str = None,
    ) -> Response:
        """Create multicast-global by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Multicast Profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Multicast profile name.
            description (str): User comment or description.
            enable (bool): Enable/disable IP multicast routing.
            multi_fabric_border_ipv4 (bool): Configure as a IPv4 Multicast Border Router
            multi_fabric_border_ipv6 (bool): Configure as a IPv6 Multicast Border Router
            multi_fabric_identifier_ipv4 (int): IPv4 Multicast Multi-fabric Identifier
            multi_fabric_identifier_ipv6 (int): IPv6 Multicast Multi-fabric Identifier
            l3vni_source_ipv4 (str): Overlay IPv4 address used as the
                primary IP of PIM's L3VNI interface
            l3vni_source_ipv6 (str): Overlay IPv6 address used as the
                primary IP of PIM's L3VNI interface
            multipath_hash_ipv4 (str): Hashing algorithm used to decide
                the nexthop to reach a given                                        ipv4 source
                address  Valid Values: SRC_HASH, SRC_GRP_HASH
            multipath_hash_ipv6 (str): Hashing algorithm used to decide
                the nexthop to reach a given                                        ipv6 source
                address  Valid Values: SRC_HASH, SRC_GRP_HASH

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/multicast-global"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'multi_fabric_border_ipv4': multi_fabric_border_ipv4,
            'multi_fabric_border_ipv6': multi_fabric_border_ipv6,
            'multi_fabric_identifier_ipv4': multi_fabric_identifier_ipv4,
            'multi_fabric_identifier_ipv6': multi_fabric_identifier_ipv6,
            'l3vni_source_ipv4': l3vni_source_ipv4,
            'l3vni_source_ipv6': l3vni_source_ipv6,
            'multipath_hash_ipv4': multipath_hash_ipv4,
            'multipath_hash_ipv6': multipath_hash_ipv6
        }

        return await self.post(url, json_data=json_data)

    async def multicast_read_multicast_global_v1(
        self,
    ) -> Response:
        """Get multicast-global.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/multicast-global"

        return await self.get(url)

    async def multicast_create_multicast_global_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-global/{name}"

        return await self.post(url)

    async def multicast_read_multicast_global_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-global/{name}"

        return await self.get(url)

    async def multicast_delete_multicast_global_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/multicast-global/{name}"

        return await self.delete(url)

    async def mvrp_create_mvrp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
    ) -> Response:
        """Create mvrp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): MVRP profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): MVRP profile name.
            description (str): MVRP profile description.
            enable (bool): Enables Multiple VLAN Registration Protocol (MVRP).

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mvrp"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable
        }

        return await self.post(url, json_data=json_data)

    async def mvrp_read_mvrp_v1(
        self,
    ) -> Response:
        """Get mvrp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/mvrp"

        return await self.get(url)

    async def mvrp_create_mvrp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mvrp/{name}"

        return await self.post(url)

    async def mvrp_read_mvrp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mvrp/{name}"

        return await self.get(url)

    async def mvrp_delete_mvrp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/mvrp/{name}"

        return await self.delete(url)

    async def nae_lite_create_nae_lite_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create nae-lite by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): NAE Lite parameters.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): NAE Lite parameters.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/nae-lite"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def nae_lite_read_nae_lite_v1(
        self,
    ) -> Response:
        """Get nae-lite.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/nae-lite"

        return await self.get(url)

    async def nae_lite_create_nae_lite_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}"

        return await self.post(url)

    async def nae_lite_read_nae_lite_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}"

        return await self.get(url)

    async def nae_lite_delete_nae_lite_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}"

        return await self.delete(url)

    async def nae_lite_create_nae_lite_profile_tags_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create tags by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/tags"

        return await self.post(url)

    async def nae_lite_read_nae_lite_profile_tags_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get tags by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/tags"

        return await self.get(url)

    async def nae_lite_delete_nae_lite_profile_tags_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete tags by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/tags"

        return await self.delete(url)

    async def nae_lite_create_nae_lite_profile_watches_by_id_v1(
        self,
        name: str = None,
        watch_name: str = None,
    ) -> Response:
        """Create watches by ID.

        Args:
            name (str, optional): name
            watch_name (str, optional): watchName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/watches/{watch_name}"

        return await self.post(url)

    async def nae_lite_read_nae_lite_profile_watches_by_id_v1(
        self,
        name: str = None,
        watch_name: str = None,
    ) -> Response:
        """Get watches by ID.

        Args:
            name (str, optional): name
            watch_name (str, optional): watchName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/watches/{watch_name}"

        return await self.get(url)

    async def nae_lite_delete_nae_lite_profile_watches_by_id_v1(
        self,
        name: str = None,
        watch_name: str = None,
    ) -> Response:
        """Delete watches by ID.

        Args:
            name (str, optional): name
            watch_name (str, optional): watchName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/watches/{watch_name}"

        return await self.delete(url)

    async def nae_lite_create_nae_lite_profile_monitors_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
    ) -> Response:
        """Create monitors by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitorName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/monitors/{monitor_name}"

        return await self.post(url)

    async def nae_lite_read_nae_lite_profile_monitors_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
    ) -> Response:
        """Get monitors by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitorName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/monitors/{monitor_name}"

        return await self.get(url)

    async def nae_lite_delete_nae_lite_profile_monitors_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
    ) -> Response:
        """Delete monitors by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitorName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/monitors/{monitor_name}"

        return await self.delete(url)

    async def nae_lite_create_nae_lite_profile_conditions_by_id_v1(
        self,
        name: str = None,
        name_condition: str = None,
    ) -> Response:
        """Create conditions by ID.

        Args:
            name (str, optional): name
            name_condition (str, optional): nameCondition

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/conditions/{name_condition}"

        return await self.post(url)

    async def nae_lite_read_nae_lite_profile_conditions_by_id_v1(
        self,
        name: str = None,
        name_condition: str = None,
    ) -> Response:
        """Get conditions by ID.

        Args:
            name (str, optional): name
            name_condition (str, optional): nameCondition

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/conditions/{name_condition}"

        return await self.get(url)

    async def nae_lite_delete_nae_lite_profile_conditions_by_id_v1(
        self,
        name: str = None,
        name_condition: str = None,
    ) -> Response:
        """Delete conditions by ID.

        Args:
            name (str, optional): name
            name_condition (str, optional): nameCondition

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/conditions/{name_condition}"

        return await self.delete(url)

    async def nae_lite_create_nae_lite_profile_conditions_include_regex_by_id_v1(
        self,
        name: str = None,
        name_condition: str = None,
    ) -> Response:
        """Create include-regex by ID.

        Args:
            name (str, optional): name
            name_condition (str, optional): nameCondition

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/conditions/{name_condition}/include-regex"

        return await self.post(url)

    async def nae_lite_read_nae_lite_profile_conditions_include_regex_by_id_v1(
        self,
        name: str = None,
        name_condition: str = None,
    ) -> Response:
        """Get include-regex by ID.

        Args:
            name (str, optional): name
            name_condition (str, optional): nameCondition

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/conditions/{name_condition}/include-regex"

        return await self.get(url)

    async def nae_lite_delete_nae_lite_profile_conditions_include_regex_by_id_v1(
        self,
        name: str = None,
        name_condition: str = None,
    ) -> Response:
        """Delete include-regex by ID.

        Args:
            name (str, optional): name
            name_condition (str, optional): nameCondition

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/conditions/{name_condition}/include-regex"

        return await self.delete(url)

    async def nae_lite_create_nae_lite_profile_conditions_exclude_regex_by_id_v1(
        self,
        name: str = None,
        name_condition: str = None,
    ) -> Response:
        """Create exclude-regex by ID.

        Args:
            name (str, optional): name
            name_condition (str, optional): nameCondition

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/conditions/{name_condition}/exclude-regex"

        return await self.post(url)

    async def nae_lite_read_nae_lite_profile_conditions_exclude_regex_by_id_v1(
        self,
        name: str = None,
        name_condition: str = None,
    ) -> Response:
        """Get exclude-regex by ID.

        Args:
            name (str, optional): name
            name_condition (str, optional): nameCondition

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/conditions/{name_condition}/exclude-regex"

        return await self.get(url)

    async def nae_lite_delete_nae_lite_profile_conditions_exclude_regex_by_id_v1(
        self,
        name: str = None,
        name_condition: str = None,
    ) -> Response:
        """Delete exclude-regex by ID.

        Args:
            name (str, optional): name
            name_condition (str, optional): nameCondition

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nae-lite/{name}/conditions/{name_condition}/exclude-regex"

        return await self.delete(url)

    async def named_condition_create_named_conditions_by_id_v1(
        self,
        name: str,
        description: str,
        rules_type: str,
        reverse_named_condition: bool,
        association: str,
        condition_rule: list,
    ) -> Response:
        """Create named-conditions by ID.

        Args:
            name (str): Named Condition name.
            description (str): A user-defined description or comment for the Named Condition.
            rules_type (str): Named Condition type. All rules in the condition-rule list must be of
                this type.  Valid Values: NAMED_CONDITION_ANY, NAMED_CONDITION_IP,
                NAMED_CONDITION_IPV6, NAMED_CONDITION_ETHERNET, NETWORK_ACL_IP, NETWORK_ACL_IPV6,
                NETWORK_ACL_ETHERNET
            reverse_named_condition (bool): Reverse Named-Condition for role based policies.
            association (str): Named condition association type.  Valid Values: ASSOCIATION_APP,
                ASSOCIATION_NETWORK, ASSOCIATION_ROLE
            condition_rule (list): List of rules comprising a named condition.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/named-conditions"

        json_data = {
            'name': name,
            'description': description,
            'rules_type': rules_type,
            'reverse_named_condition': reverse_named_condition,
            'association': association,
            'condition_rule': condition_rule
        }

        return await self.post(url, json_data=json_data)

    async def named_condition_read_named_conditions_v1(
        self,
    ) -> Response:
        """Get named-conditions.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/named-conditions"

        return await self.get(url)

    async def named_condition_create_named_conditions_named_condition_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create named-condition by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}"

        return await self.post(url)

    async def named_condition_read_named_conditions_named_condition_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get named-condition by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}"

        return await self.get(url)

    async def named_condition_delete_named_conditions_named_condition_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete named-condition by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}"

        return await self.delete(url)

    async def named_condition_create_named_conditions_named_condition_condition_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create condition-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}"

        return await self.post(url)

    async def named_condition_read_named_conditions_named_condition_condition_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get condition-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}"

        return await self.get(url)

    async def named_condition_delete_named_conditions_named_condition_condition_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Delete condition-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}"

        return await self.delete(url)

    async def named_condition_create_named_conditions_named_condition_condition_rule_services_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create services by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}/services"

        return await self.post(url)

    async def named_condition_read_named_conditions_named_condition_condition_rule_services_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get services by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}/services"

        return await self.get(url)

    async def named_condition_create_named_conditions_named_condition_condition_rule_transport_fields_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create transport-fields by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}/transport-fields"

        return await self.post(url)

    async def named_condition_read_named_conditions_named_condition_condition_rule_transport_fields_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get transport-fields by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}/transport-fields"

        return await self.get(url)

    async def named_condition_create_named_conditions_named_condition_condition_rule_source_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create source by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}/source"

        return await self.post(url)

    async def named_condition_read_named_conditions_named_condition_condition_rule_source_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get source by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}/source"

        return await self.get(url)

    async def named_condition_create_named_conditions_named_condition_condition_rule_destination_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create destination by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}/destination"

        return await self.post(url)

    async def named_condition_read_named_conditions_named_condition_condition_rule_destination_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get destination by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}/destination"

        return await self.get(url)

    async def named_condition_create_named_conditions_named_condition_condition_rule_ip_header_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create ip-header by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}/ip-header"

        return await self.post(url)

    async def named_condition_read_named_conditions_named_condition_condition_rule_ip_header_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get ip-header by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}/ip-header"

        return await self.get(url)

    async def named_condition_create_named_conditions_named_condition_condition_rule_ethernet_header_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create ethernet-header by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}/ethernet-header"

        return await self.post(url)

    async def named_condition_read_named_conditions_named_condition_condition_rule_ethernet_header_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get ethernet-header by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-conditions/{name}/condition-rule/{position}/ethernet-header"

        return await self.get(url)

    async def named_vlan_create_named_vlan_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        vlan_alias: str = None,
        vlan_id_ranges: List[str] = None,
    ) -> Response:
        """Create named-vlan by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of Named-VLANs/VLAN-Groups
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            vlan_alias (str, optional): Vlan alias.
            vlan_id_ranges (List[str], optional): vlan-id-ranges

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/named-vlan"

        json_data = {
            'vlan_alias': vlan_alias,
            'vlan_id_ranges': vlan_id_ranges
        }

        return await self.post(url, json_data=json_data)

    async def named_vlan_read_named_vlan_v1(
        self,
    ) -> Response:
        """Get named-vlan.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/named-vlan"

        return await self.get(url)

    async def named_vlan_create_named_vlan_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-vlan/{name}"

        return await self.post(url)

    async def named_vlan_read_named_vlan_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-vlan/{name}"

        return await self.get(url)

    async def named_vlan_delete_named_vlan_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-vlan/{name}"

        return await self.delete(url)

    async def named_vlan_create_named_vlan_profile_vlan_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create vlan by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-vlan/{name}/vlan"

        return await self.post(url)

    async def named_vlan_read_named_vlan_profile_vlan_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get vlan by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-vlan/{name}/vlan"

        return await self.get(url)

    async def named_vlan_create_named_vlan_profile_vlan_vlan_id_ranges_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create vlan-id-ranges by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-vlan/{name}/vlan/vlan-id-ranges"

        return await self.post(url)

    async def named_vlan_read_named_vlan_profile_vlan_vlan_id_ranges_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get vlan-id-ranges by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-vlan/{name}/vlan/vlan-id-ranges"

        return await self.get(url)

    async def named_vlan_delete_named_vlan_profile_vlan_vlan_id_ranges_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete vlan-id-ranges by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-vlan/{name}/vlan/vlan-id-ranges"

        return await self.delete(url)

    async def namedfilter_create_named_filter_by_id_v1(
        self,
        filter_name: str,
        trunk_ports: List[str],
        ethernet_ports: List[str],
        filter_action: str,
    ) -> Response:
        """Create named-filter by ID.

        Args:
            filter_name (str): Filter template of blocked destination ports.
            trunk_ports (List[str]): trunk-ports
            ethernet_ports (List[str]): ethernet-ports
            filter_action (str): Add or Remove destination ports from the filter.  Valid Values:
                FORWARD, DROP

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/named-filter"

        json_data = {
            'filter_name': filter_name,
            'trunk_ports': trunk_ports,
            'ethernet_ports': ethernet_ports,
            'filter_action': filter_action
        }

        return await self.post(url, json_data=json_data)

    async def namedfilter_read_named_filter_v1(
        self,
    ) -> Response:
        """Get named-filter.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/named-filter"

        return await self.get(url)

    async def namedfilter_create_named_filter_name_filter_by_id_v1(
        self,
        filter_name: str = None,
    ) -> Response:
        """Create name-filter by ID.

        Args:
            filter_name (str, optional): filterName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-filter/{filter_name}"

        return await self.post(url)

    async def namedfilter_read_named_filter_name_filter_by_id_v1(
        self,
        filter_name: str = None,
    ) -> Response:
        """Get name-filter by ID.

        Args:
            filter_name (str, optional): filterName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-filter/{filter_name}"

        return await self.get(url)

    async def namedfilter_delete_named_filter_name_filter_by_id_v1(
        self,
        filter_name: str = None,
    ) -> Response:
        """Delete name-filter by ID.

        Args:
            filter_name (str, optional): filterName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-filter/{filter_name}"

        return await self.delete(url)

    async def namedfilter_create_named_filter_name_filter_trunk_ports_by_id_v1(
        self,
        filter_name: str = None,
    ) -> Response:
        """Create trunk-ports by ID.

        Args:
            filter_name (str, optional): filterName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-filter/{filter_name}/trunk-ports"

        return await self.post(url)

    async def namedfilter_read_named_filter_name_filter_trunk_ports_by_id_v1(
        self,
        filter_name: str = None,
    ) -> Response:
        """Get trunk-ports by ID.

        Args:
            filter_name (str, optional): filterName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-filter/{filter_name}/trunk-ports"

        return await self.get(url)

    async def namedfilter_delete_named_filter_name_filter_trunk_ports_by_id_v1(
        self,
        filter_name: str = None,
    ) -> Response:
        """Delete trunk-ports by ID.

        Args:
            filter_name (str, optional): filterName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-filter/{filter_name}/trunk-ports"

        return await self.delete(url)

    async def namedfilter_create_named_filter_name_filter_ethernet_ports_by_id_v1(
        self,
        filter_name: str = None,
    ) -> Response:
        """Create ethernet-ports by ID.

        Args:
            filter_name (str, optional): filterName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-filter/{filter_name}/ethernet-ports"

        return await self.post(url)

    async def namedfilter_read_named_filter_name_filter_ethernet_ports_by_id_v1(
        self,
        filter_name: str = None,
    ) -> Response:
        """Get ethernet-ports by ID.

        Args:
            filter_name (str, optional): filterName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-filter/{filter_name}/ethernet-ports"

        return await self.get(url)

    async def namedfilter_delete_named_filter_name_filter_ethernet_ports_by_id_v1(
        self,
        filter_name: str = None,
    ) -> Response:
        """Delete ethernet-ports by ID.

        Args:
            filter_name (str, optional): filterName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/named-filter/{filter_name}/ethernet-ports"

        return await self.delete(url)

    async def nd_snooping_interface_create_nd_snooping_interface_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create nd-snooping-interface by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): ND-Snooping interface profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): ND-Snooping interface profile

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/nd-snooping-interface"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def nd_snooping_interface_read_nd_snooping_interface_v1(
        self,
    ) -> Response:
        """Get nd-snooping-interface.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/nd-snooping-interface"

        return await self.get(url)

    async def nd_snooping_interface_create_nd_snooping_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping-interface/{name}"

        return await self.post(url)

    async def nd_snooping_interface_read_nd_snooping_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping-interface/{name}"

        return await self.get(url)

    async def nd_snooping_interface_delete_nd_snooping_interface_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping-interface/{name}"

        return await self.delete(url)

    async def nd_snooping_interface_create_nd_snooping_interface_profile_nd_snooping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create nd-snooping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping-interface/{name}/nd-snooping"

        return await self.post(url)

    async def nd_snooping_interface_read_nd_snooping_interface_profile_nd_snooping_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get nd-snooping by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping-interface/{name}/nd-snooping"

        return await self.get(url)

    async def nd_snooping_create_nd_snooping_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create nd-snooping by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): ND-Snooping profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): ND-Snooping profile

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/nd-snooping"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def nd_snooping_read_nd_snooping_v1(
        self,
    ) -> Response:
        """Get nd-snooping.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/nd-snooping"

        return await self.get(url)

    async def nd_snooping_create_nd_snooping_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}"

        return await self.post(url)

    async def nd_snooping_read_nd_snooping_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}"

        return await self.get(url)

    async def nd_snooping_delete_nd_snooping_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}"

        return await self.delete(url)

    async def nd_snooping_create_nd_snooping_profile_ra_guard_policy_by_id_v1(
        self,
        name: str = None,
        ra_guard_policy_name: str = None,
    ) -> Response:
        """Create ra-guard-policy by ID.

        Args:
            name (str, optional): name
            ra_guard_policy_name (str, optional): ra-guard-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/ra-guard-policy/{ra_guard_policy_name}"

        return await self.post(url)

    async def nd_snooping_read_nd_snooping_profile_ra_guard_policy_by_id_v1(
        self,
        name: str = None,
        ra_guard_policy_name: str = None,
    ) -> Response:
        """Get ra-guard-policy by ID.

        Args:
            name (str, optional): name
            ra_guard_policy_name (str, optional): ra-guard-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/ra-guard-policy/{ra_guard_policy_name}"

        return await self.get(url)

    async def nd_snooping_delete_nd_snooping_profile_ra_guard_policy_by_id_v1(
        self,
        name: str = None,
        ra_guard_policy_name: str = None,
    ) -> Response:
        """Delete ra-guard-policy by ID.

        Args:
            name (str, optional): name
            ra_guard_policy_name (str, optional): ra-guard-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/ra-guard-policy/{ra_guard_policy_name}"

        return await self.delete(url)

    async def nd_snooping_create_nd_snooping_profile_ra_guard_policy_match_config_flag_by_id_v1(
        self,
        name: str = None,
        ra_guard_policy_name: str = None,
    ) -> Response:
        """Create match-config-flag by ID.

        Args:
            name (str, optional): name
            ra_guard_policy_name (str, optional): ra-guard-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/ra-guard-policy/{ra_guard_policy_name}/match-config-flag"

        return await self.post(url)

    async def nd_snooping_read_nd_snooping_profile_ra_guard_policy_match_config_flag_by_id_v1(
        self,
        name: str = None,
        ra_guard_policy_name: str = None,
    ) -> Response:
        """Get match-config-flag by ID.

        Args:
            name (str, optional): name
            ra_guard_policy_name (str, optional): ra-guard-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/ra-guard-policy/{ra_guard_policy_name}/match-config-flag"

        return await self.get(url)

    async def nd_snooping_create_nd_snooping_profile_ra_guard_policy_match_hop_limit_by_id_v1(
        self,
        name: str = None,
        ra_guard_policy_name: str = None,
    ) -> Response:
        """Create match-hop-limit by ID.

        Args:
            name (str, optional): name
            ra_guard_policy_name (str, optional): ra-guard-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/ra-guard-policy/{ra_guard_policy_name}/match-hop-limit"

        return await self.post(url)

    async def nd_snooping_read_nd_snooping_profile_ra_guard_policy_match_hop_limit_by_id_v1(
        self,
        name: str = None,
        ra_guard_policy_name: str = None,
    ) -> Response:
        """Get match-hop-limit by ID.

        Args:
            name (str, optional): name
            ra_guard_policy_name (str, optional): ra-guard-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/ra-guard-policy/{ra_guard_policy_name}/match-hop-limit"

        return await self.get(url)

    async def nd_snooping_create_nd_snooping_profile_ra_guard_policy_match_list_by_id_v1(
        self,
        name: str = None,
        ra_guard_policy_name: str = None,
    ) -> Response:
        """Create match-list by ID.

        Args:
            name (str, optional): name
            ra_guard_policy_name (str, optional): ra-guard-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/ra-guard-policy/{ra_guard_policy_name}/match-list"

        return await self.post(url)

    async def nd_snooping_read_nd_snooping_profile_ra_guard_policy_match_list_by_id_v1(
        self,
        name: str = None,
        ra_guard_policy_name: str = None,
    ) -> Response:
        """Get match-list by ID.

        Args:
            name (str, optional): name
            ra_guard_policy_name (str, optional): ra-guard-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/ra-guard-policy/{ra_guard_policy_name}/match-list"

        return await self.get(url)

    async def nd_snooping_create_nd_snooping_profile_vlan_policy_by_id_v1(
        self,
        name: str = None,
        vlan_policy_name: str = None,
    ) -> Response:
        """Create vlan-policy by ID.

        Args:
            name (str, optional): name
            vlan_policy_name (str, optional): vlan-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/vlan-policy/{vlan_policy_name}"

        return await self.post(url)

    async def nd_snooping_read_nd_snooping_profile_vlan_policy_by_id_v1(
        self,
        name: str = None,
        vlan_policy_name: str = None,
    ) -> Response:
        """Get vlan-policy by ID.

        Args:
            name (str, optional): name
            vlan_policy_name (str, optional): vlan-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/vlan-policy/{vlan_policy_name}"

        return await self.get(url)

    async def nd_snooping_delete_nd_snooping_profile_vlan_policy_by_id_v1(
        self,
        name: str = None,
        vlan_policy_name: str = None,
    ) -> Response:
        """Delete vlan-policy by ID.

        Args:
            name (str, optional): name
            vlan_policy_name (str, optional): vlan-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/vlan-policy/{vlan_policy_name}"

        return await self.delete(url)

    async def nd_snooping_create_nd_snooping_profile_vlan_policy_prefix_list_by_id_v1(
        self,
        name: str = None,
        vlan_policy_name: str = None,
    ) -> Response:
        """Create prefix-list by ID.

        Args:
            name (str, optional): name
            vlan_policy_name (str, optional): vlan-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/vlan-policy/{vlan_policy_name}/prefix-list"

        return await self.post(url)

    async def nd_snooping_read_nd_snooping_profile_vlan_policy_prefix_list_by_id_v1(
        self,
        name: str = None,
        vlan_policy_name: str = None,
    ) -> Response:
        """Get prefix-list by ID.

        Args:
            name (str, optional): name
            vlan_policy_name (str, optional): vlan-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/vlan-policy/{vlan_policy_name}/prefix-list"

        return await self.get(url)

    async def nd_snooping_delete_nd_snooping_profile_vlan_policy_prefix_list_by_id_v1(
        self,
        name: str = None,
        vlan_policy_name: str = None,
    ) -> Response:
        """Delete prefix-list by ID.

        Args:
            name (str, optional): name
            vlan_policy_name (str, optional): vlan-policy_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nd-snooping/{name}/vlan-policy/{vlan_policy_name}/prefix-list"

        return await self.delete(url)

    async def net_group_create_net_groups_by_id_v1(
        self,
        name: str,
        description: str,
        invert: bool,
        preemptive_failover: bool,
        items: list,
    ) -> Response:
        """Create net-groups by ID.

        Args:
            name (str): The name of the Network Group.
            description (str): Description of the Network Group.
            invert (bool): Use all groups except this group.
            preemptive_failover (bool): Enable/Disable preemptive failover.
            items (list): List of Network Group Items.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/net-groups"

        json_data = {
            'name': name,
            'description': description,
            'invert': invert,
            'preemptive_failover': preemptive_failover,
            'items': items
        }

        return await self.post(url, json_data=json_data)

    async def net_group_read_net_groups_v1(
        self,
    ) -> Response:
        """Get net-groups.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/net-groups"

        return await self.get(url)

    async def net_group_create_net_groups_net_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create net-group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-groups/{name}"

        return await self.post(url)

    async def net_group_read_net_groups_net_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get net-group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-groups/{name}"

        return await self.get(url)

    async def net_group_delete_net_groups_net_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete net-group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-groups/{name}"

        return await self.delete(url)

    async def net_group_create_net_groups_net_group_items_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Create items by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-groups/{name}/items/{index}"

        return await self.post(url)

    async def net_group_read_net_groups_net_group_items_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Get items by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-groups/{name}/items/{index}"

        return await self.get(url)

    async def net_group_delete_net_groups_net_group_items_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Delete items by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-groups/{name}/items/{index}"

        return await self.delete(url)

    async def net_group_create_net_groups_net_group_items_address_range_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Create address-range by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-groups/{name}/items/{index}/address-range"

        return await self.post(url)

    async def net_group_read_net_groups_net_group_items_address_range_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Get address-range by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-groups/{name}/items/{index}/address-range"

        return await self.get(url)

    async def net_group_delete_net_groups_net_group_items_address_range_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Delete address-range by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-groups/{name}/items/{index}/address-range"

        return await self.delete(url)

    async def net_group_create_net_groups_net_group_items_ports_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Create ports by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-groups/{name}/items/{index}/ports"

        return await self.post(url)

    async def net_group_read_net_groups_net_group_items_ports_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Get ports by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-groups/{name}/items/{index}/ports"

        return await self.get(url)

    async def net_service_create_net_services_by_id_v1(
        self,
        operator: str = None,
        min: int = None,
        max: int = None,
    ) -> Response:
        """Create net-services by ID.

        Args:
            operator (str, optional): Comparison operator.  Valid Values: COMPARISON_EQ,
                COMPARISON_NE, COMPARISON_LT, COMPARISON_GT, COMPARISON_RANGE
            min (int, optional): Port value or lower bound of port range.
            max (int, optional): Upper bound of port range.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/net-services"

        json_data = {
            'operator': operator,
            'min': min,
            'max': max
        }

        return await self.post(url, json_data=json_data)

    async def net_service_read_net_services_v1(
        self,
    ) -> Response:
        """Get net-services.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/net-services"

        return await self.get(url)

    async def net_service_create_net_services_net_service_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create net-service by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-services/{name}"

        return await self.post(url)

    async def net_service_read_net_services_net_service_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get net-service by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-services/{name}"

        return await self.get(url)

    async def net_service_delete_net_services_net_service_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete net-service by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-services/{name}"

        return await self.delete(url)

    async def net_service_create_net_services_net_service_ports_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ports by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-services/{name}/ports"

        return await self.post(url)

    async def net_service_read_net_services_net_service_ports_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ports by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-services/{name}/ports"

        return await self.get(url)

    async def net_service_delete_net_services_net_service_ports_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete ports by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-services/{name}/ports"

        return await self.delete(url)

    async def net_service_create_net_services_net_service_port_range_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create port-range by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-services/{name}/port-range"

        return await self.post(url)

    async def net_service_read_net_services_net_service_port_range_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get port-range by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/net-services/{name}/port-range"

        return await self.get(url)

    async def network_acl_create_network_acl_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        deny_fragmented_tcp_header: bool = None,
        deny_non_classifiable_layer4_header: bool = None,
    ) -> Response:
        """Create network-acl by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Profile for Network ACL.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Network ACL profile name.
            description (str): Network ACL profile description.
            deny_fragmented_tcp_header (bool): Configure the switch to drop all IPv4 and IPv6
                packets containing a fragmented TCP header.
            deny_non_classifiable_layer4_header (bool): Configure the switch to drop all IPv6
                packets for which the Layer 4 header cannot be processed by ACL hardware.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/network-acl"

        json_data = {
            'name': name,
            'description': description,
            'deny_fragmented_tcp_header': deny_fragmented_tcp_header,
            'deny_non_classifiable_layer4_header': deny_non_classifiable_layer4_header
        }

        return await self.post(url, json_data=json_data)

    async def network_acl_read_network_acl_v1(
        self,
    ) -> Response:
        """Get network-acl.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/network-acl"

        return await self.get(url)

    async def network_acl_create_network_acl_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/network-acl/{name}"

        return await self.post(url)

    async def network_acl_read_network_acl_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/network-acl/{name}"

        return await self.get(url)

    async def network_acl_delete_network_acl_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/network-acl/{name}"

        return await self.delete(url)

    async def nexthop_group_create_nexthop_groups_by_id_v1(
        self,
        name: str,
        description: str,
        preemptive_failover: bool,
        nexthops: list,
    ) -> Response:
        """Create nexthop-groups by ID.

        Args:
            name (str): Nexthop group name
            description (str): Description of the nexthop group
            preemptive_failover (bool): Enable preemptive failover.
            nexthops (list): List of nexthops in this nexthop-group

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/nexthop-groups"

        json_data = {
            'name': name,
            'description': description,
            'preemptive_failover': preemptive_failover,
            'nexthops': nexthops
        }

        return await self.post(url, json_data=json_data)

    async def nexthop_group_read_nexthop_groups_v1(
        self,
    ) -> Response:
        """Get nexthop-groups.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/nexthop-groups"

        return await self.get(url)

    async def nexthop_group_create_nexthop_groups_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nexthop-groups/{name}"

        return await self.post(url)

    async def nexthop_group_read_nexthop_groups_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nexthop-groups/{name}"

        return await self.get(url)

    async def nexthop_group_delete_nexthop_groups_group_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete group by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nexthop-groups/{name}"

        return await self.delete(url)

    async def nexthop_group_create_nexthop_groups_group_nexthops_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Create nexthops by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nexthop-groups/{name}/nexthops/{index}"

        return await self.post(url)

    async def nexthop_group_read_nexthop_groups_group_nexthops_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Get nexthops by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nexthop-groups/{name}/nexthops/{index}"

        return await self.get(url)

    async def nexthop_group_delete_nexthop_groups_group_nexthops_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Delete nexthops by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/nexthop-groups/{name}/nexthops/{index}"

        return await self.delete(url)

    async def ntp_create_ntp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create ntp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for NTP parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Global profile for NTP parameters

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ntp"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def ntp_read_ntp_v1(
        self,
    ) -> Response:
        """Get ntp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ntp"

        return await self.get(url)

    async def ntp_create_ntp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}"

        return await self.post(url)

    async def ntp_read_ntp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}"

        return await self.get(url)

    async def ntp_delete_ntp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}"

        return await self.delete(url)

    async def ntp_create_ntp_profile_authentication_profile_by_id_v1(
        self,
        name: str = None,
        key_identifier: str = None,
    ) -> Response:
        """Create authentication-profile by ID.

        Args:
            name (str, optional): name
            key_identifier (str, optional): keyIdentifier

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/authentication-profile/{key_identifier}"

        return await self.post(url)

    async def ntp_read_ntp_profile_authentication_profile_by_id_v1(
        self,
        name: str = None,
        key_identifier: str = None,
    ) -> Response:
        """Get authentication-profile by ID.

        Args:
            name (str, optional): name
            key_identifier (str, optional): keyIdentifier

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/authentication-profile/{key_identifier}"

        return await self.get(url)

    async def ntp_delete_ntp_profile_authentication_profile_by_id_v1(
        self,
        name: str = None,
        key_identifier: str = None,
    ) -> Response:
        """Delete authentication-profile by ID.

        Args:
            name (str, optional): name
            key_identifier (str, optional): keyIdentifier

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/authentication-profile/{key_identifier}"

        return await self.delete(url)

    async def ntp_create_ntp_profile_authentication_profile_ciphertext_by_id_v1(
        self,
        name: str = None,
        key_identifier: str = None,
    ) -> Response:
        """Create ciphertext by ID.

        Args:
            name (str, optional): name
            key_identifier (str, optional): keyIdentifier

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/authentication-profile/{key_identifier}/ciphertext"

        return await self.post(url)

    async def ntp_read_ntp_profile_authentication_profile_ciphertext_by_id_v1(
        self,
        name: str = None,
        key_identifier: str = None,
    ) -> Response:
        """Get ciphertext by ID.

        Args:
            name (str, optional): name
            key_identifier (str, optional): keyIdentifier

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/authentication-profile/{key_identifier}/ciphertext"

        return await self.get(url)

    async def ntp_create_ntp_profile_trusted_key_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create trusted-key by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/trusted-key"

        return await self.post(url)

    async def ntp_read_ntp_profile_trusted_key_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get trusted-key by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/trusted-key"

        return await self.get(url)

    async def ntp_delete_ntp_profile_trusted_key_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete trusted-key by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/trusted-key"

        return await self.delete(url)

    async def ntp_create_ntp_profile_conductor_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create conductor by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/conductor/{vrf}"

        return await self.post(url)

    async def ntp_read_ntp_profile_conductor_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get conductor by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/conductor/{vrf}"

        return await self.get(url)

    async def ntp_delete_ntp_profile_conductor_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete conductor by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/conductor/{vrf}"

        return await self.delete(url)

    async def ntp_create_ntp_profile_traps_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create traps by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/traps"

        return await self.post(url)

    async def ntp_read_ntp_profile_traps_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get traps by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/traps"

        return await self.get(url)

    async def ntp_delete_ntp_profile_traps_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete traps by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/traps"

        return await self.delete(url)

    async def ntp_create_ntp_profile_servers_by_id_v1(
        self,
        name: str = None,
        address: str = None,
    ) -> Response:
        """Create servers by ID.

        Args:
            name (str, optional): name
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/servers/{address}"

        return await self.post(url)

    async def ntp_read_ntp_profile_servers_by_id_v1(
        self,
        name: str = None,
        address: str = None,
    ) -> Response:
        """Get servers by ID.

        Args:
            name (str, optional): name
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/servers/{address}"

        return await self.get(url)

    async def ntp_delete_ntp_profile_servers_by_id_v1(
        self,
        name: str = None,
        address: str = None,
    ) -> Response:
        """Delete servers by ID.

        Args:
            name (str, optional): name
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ntp/{name}/servers/{address}"

        return await self.delete(url)

    async def oap_create_oap_router_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create oap-router by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): OAP profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): OAP profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/oap-router"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def oap_read_oap_router_v1(
        self,
    ) -> Response:
        """Get oap-router.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/oap-router"

        return await self.get(url)

    async def oap_create_oap_router_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/oap-router/{name}"

        return await self.post(url)

    async def oap_read_oap_router_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/oap-router/{name}"

        return await self.get(url)

    async def oap_delete_oap_router_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/oap-router/{name}"

        return await self.delete(url)

    async def oap_create_oap_router_profile_debug_profiler_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create debug-profiler by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/oap-router/{name}/debug-profiler"

        return await self.post(url)

    async def oap_read_oap_router_profile_debug_profiler_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get debug-profiler by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/oap-router/{name}/debug-profiler"

        return await self.get(url)

    async def oap_delete_oap_router_profile_debug_profiler_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete debug-profiler by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/oap-router/{name}/debug-profiler"

        return await self.delete(url)

    async def oap_create_oap_router_profile_auto_aggregate_by_id_v1(
        self,
        name: str = None,
        route_type: str = None,
    ) -> Response:
        """Create auto-aggregate by ID.

        Args:
            name (str, optional): name
            route_type (str, optional): routeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/oap-router/{name}/auto-aggregate/{route_type}"

        return await self.post(url)

    async def oap_read_oap_router_profile_auto_aggregate_by_id_v1(
        self,
        name: str = None,
        route_type: str = None,
    ) -> Response:
        """Get auto-aggregate by ID.

        Args:
            name (str, optional): name
            route_type (str, optional): routeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/oap-router/{name}/auto-aggregate/{route_type}"

        return await self.get(url)

    async def oap_delete_oap_router_profile_auto_aggregate_by_id_v1(
        self,
        name: str = None,
        route_type: str = None,
    ) -> Response:
        """Delete auto-aggregate by ID.

        Args:
            name (str, optional): name
            route_type (str, optional): routeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/oap-router/{name}/auto-aggregate/{route_type}"

        return await self.delete(url)

    async def oap_create_oap_router_profile_redistribute_by_id_v1(
        self,
        name: str = None,
        route_type: str = None,
    ) -> Response:
        """Create redistribute by ID.

        Args:
            name (str, optional): name
            route_type (str, optional): routeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/oap-router/{name}/redistribute/{route_type}"

        return await self.post(url)

    async def oap_read_oap_router_profile_redistribute_by_id_v1(
        self,
        name: str = None,
        route_type: str = None,
    ) -> Response:
        """Get redistribute by ID.

        Args:
            name (str, optional): name
            route_type (str, optional): routeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/oap-router/{name}/redistribute/{route_type}"

        return await self.get(url)

    async def oap_delete_oap_router_profile_redistribute_by_id_v1(
        self,
        name: str = None,
        route_type: str = None,
    ) -> Response:
        """Delete redistribute by ID.

        Args:
            name (str, optional): name
            route_type (str, optional): routeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/oap-router/{name}/redistribute/{route_type}"

        return await self.delete(url)

    async def ocsp_create_ocsp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        global_ocsp_signer_cert: str = None,
        service_ocsp_responder: bool = None,
    ) -> Response:
        """Create ocsp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): OCSP Global profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): OCSP profile name.
            description (str): OCSP profile description.
            global_ocsp_signer_cert (str): Global OCSP Signer Cert to sign the OCSP
                request/responses for all Trusted Certificates.
            service_ocsp_responder (bool): Enable ocsp responder functionality for all Trusted
                Certificates. Default: False.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ocsp"

        json_data = {
            'name': name,
            'description': description,
            'global_ocsp_signer_cert': global_ocsp_signer_cert,
            'service_ocsp_responder': service_ocsp_responder
        }

        return await self.post(url, json_data=json_data)

    async def ocsp_read_ocsp_v1(
        self,
    ) -> Response:
        """Get ocsp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ocsp"

        return await self.get(url)

    async def ocsp_create_ocsp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ocsp/{name}"

        return await self.post(url)

    async def ocsp_read_ocsp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ocsp/{name}"

        return await self.get(url)

    async def ocsp_delete_ocsp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ocsp/{name}"

        return await self.delete(url)

    async def ospfv2_create_ocsp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        global_ocsp_signer_cert: str = None,
        service_ocsp_responder: bool = None,
    ) -> Response:
        """Create ocsp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): OCSP Global profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): OCSP profile name.
            description (str): OCSP profile description.
            global_ocsp_signer_cert (str): Global OCSP Signer Cert to sign the OCSP
                request/responses for all Trusted Certificates.
            service_ocsp_responder (bool): Enable ocsp responder functionality for all Trusted
                Certificates. Default: False.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ocsp"

        json_data = {
            'name': name,
            'description': description,
            'global_ocsp_signer_cert': global_ocsp_signer_cert,
            'service_ocsp_responder': service_ocsp_responder
        }

        return await self.post(url, json_data=json_data)

    async def ospfv2_read_ocsp_v1(
        self,
    ) -> Response:
        """Get ocsp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ocsp"

        return await self.get(url)

    async def ospfv2_create_ocsp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ocsp/{name}"

        return await self.post(url)

    async def ospfv2_read_ocsp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ocsp/{name}"

        return await self.get(url)

    async def ospfv2_delete_ocsp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ocsp/{name}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_by_id_v1(
        self,
        router_lsa: bool = False,
        include_stub: bool = False,
        on_startup: int = 600,
    ) -> Response:
        """Create ospfv3 by ID.

        Args:
            router_lsa (bool, optional): Advertise Router-LSAs with maximum metric value.
            include_stub (bool, optional): Advertise Router-LSAs with maximum metric value for stub
                links.
            on_startup (int, optional): Advertise Router-LSAs with maximum metric value at system
                startup.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ospfv3"

        json_data = {
            'router_lsa': router_lsa,
            'include_stub': include_stub,
            'on_startup': on_startup
        }

        return await self.post(url, json_data=json_data)

    async def ospfv3_read_ospfv3_v1(
        self,
    ) -> Response:
        """Get ospfv3.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ospfv3"

        return await self.get(url)

    async def ospfv3_create_ospfv3_routers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Create routers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Get routers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete routers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_areas_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
    ) -> Response:
        """Create areas by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_areas_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
    ) -> Response:
        """Get areas by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_areas_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
    ) -> Response:
        """Delete areas by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_areas_virtuallinks_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        remote_ab_rid: str = None,
    ) -> Response:
        """Create virtuallinks by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            remote_ab_rid (str, optional): remoteAbrId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/virtuallinks/{remote_ab_rid}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_areas_virtuallinks_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        remote_ab_rid: str = None,
    ) -> Response:
        """Get virtuallinks by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            remote_ab_rid (str, optional): remoteAbrId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/virtuallinks/{remote_ab_rid}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_areas_virtuallinks_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        remote_ab_rid: str = None,
    ) -> Response:
        """Delete virtuallinks by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            remote_ab_rid (str, optional): remoteAbrId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/virtuallinks/{remote_ab_rid}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_areas_ether_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        interface_name: str = None,
    ) -> Response:
        """Create ether-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            interface_name (str, optional): interfaceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/ether-interfaces/{interface_name}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_areas_ether_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        interface_name: str = None,
    ) -> Response:
        """Get ether-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            interface_name (str, optional): interfaceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/ether-interfaces/{interface_name}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_areas_ether_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        interface_name: str = None,
    ) -> Response:
        """Delete ether-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            interface_name (str, optional): interfaceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/ether-interfaces/{interface_name}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_areas_lag_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        lag_name: str = None,
    ) -> Response:
        """Create lag-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            lag_name (str, optional): lagName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/lag-interfaces/{lag_name}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_areas_lag_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        lag_name: str = None,
    ) -> Response:
        """Get lag-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            lag_name (str, optional): lagName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/lag-interfaces/{lag_name}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_areas_lag_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        lag_name: str = None,
    ) -> Response:
        """Delete lag-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            lag_name (str, optional): lagName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/lag-interfaces/{lag_name}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_areas_sub_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        sub_interfac_ename: str = None,
    ) -> Response:
        """Create sub-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            sub_interfac_ename (str, optional): subInterfaceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/sub-interfaces/{sub_interfac_ename}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_areas_sub_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        sub_interfac_ename: str = None,
    ) -> Response:
        """Get sub-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            sub_interfac_ename (str, optional): subInterfaceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/sub-interfaces/{sub_interfac_ename}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_areas_sub_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        sub_interfac_ename: str = None,
    ) -> Response:
        """Delete sub-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            sub_interfac_ename (str, optional): subInterfaceName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/sub-interfaces/{sub_interfac_ename}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_areas_svi_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        svi_id: str = None,
    ) -> Response:
        """Create svi-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            svi_id (str, optional): sviId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/svi-interfaces/{svi_id}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_areas_svi_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        svi_id: str = None,
    ) -> Response:
        """Get svi-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            svi_id (str, optional): sviId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/svi-interfaces/{svi_id}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_areas_svi_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        svi_id: str = None,
    ) -> Response:
        """Delete svi-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            svi_id (str, optional): sviId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/svi-interfaces/{svi_id}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_areas_loopback_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        loopback_id: str = None,
    ) -> Response:
        """Create loopback-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            loopback_id (str, optional): loopbackId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/loopback-interfaces/{loopback_id}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_areas_loopback_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        loopback_id: str = None,
    ) -> Response:
        """Get loopback-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            loopback_id (str, optional): loopbackId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/loopback-interfaces/{loopback_id}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_areas_loopback_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        loopback_id: str = None,
    ) -> Response:
        """Delete loopback-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            loopback_id (str, optional): loopbackId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/loopback-interfaces/{loopback_id}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_areas_tunnel_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        tunnel_id: str = None,
    ) -> Response:
        """Create tunnel-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            tunnel_id (str, optional): tunnelId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/tunnel-interfaces/{tunnel_id}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_areas_tunnel_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        tunnel_id: str = None,
    ) -> Response:
        """Get tunnel-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            tunnel_id (str, optional): tunnelId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/tunnel-interfaces/{tunnel_id}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_areas_tunnel_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
        tunnel_id: str = None,
    ) -> Response:
        """Delete tunnel-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId
            tunnel_id (str, optional): tunnelId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/tunnel-interfaces/{tunnel_id}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_areas_no_advertise_range_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
    ) -> Response:
        """Create no-advertise-range by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/no-advertise-range"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_areas_no_advertise_range_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        area_id: str = None,
    ) -> Response:
        """Get no-advertise-range by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            area_id (str, optional): areaId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/areas/{area_id}/no-advertise-range"

        return await self.get(url)

    async def ospfv3_create_ospfv3_routers_distance_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        route_type: str = None,
    ) -> Response:
        """Create distance by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            route_type (str, optional): routeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/distance/{route_type}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_distance_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        route_type: str = None,
    ) -> Response:
        """Get distance by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            route_type (str, optional): routeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/distance/{route_type}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_distance_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        route_type: str = None,
    ) -> Response:
        """Delete distance by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            route_type (str, optional): routeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/distance/{route_type}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_max_metric_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Create max-metric by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/max-metric"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_max_metric_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Get max-metric by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/max-metric"

        return await self.get(url)

    async def ospfv3_create_ospfv3_routers_redistribute_routes_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        redistribute_type: str = None,
    ) -> Response:
        """Create redistribute-routes by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            redistribute_type (str, optional): redistributeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/redistribute-routes/{redistribute_type}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_redistribute_routes_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        redistribute_type: str = None,
    ) -> Response:
        """Get redistribute-routes by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            redistribute_type (str, optional): redistributeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/redistribute-routes/{redistribute_type}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_redistribute_routes_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        redistribute_type: str = None,
    ) -> Response:
        """Delete redistribute-routes by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            redistribute_type (str, optional): redistributeType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/redistribute-routes/{redistribute_type}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_graceful_restart_cfg_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Create graceful-restart-cfg by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/graceful-restart-cfg"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_graceful_restart_cfg_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Get graceful-restart-cfg by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/graceful-restart-cfg"

        return await self.get(url)

    async def ospfv3_create_ospfv3_routers_default_info_originate_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Create default-info-originate by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/default-info-originate"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_default_info_originate_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Get default-info-originate by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/default-info-originate"

        return await self.get(url)

    async def ospfv3_create_ospfv3_routers_timers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        timer_id: str = None,
    ) -> Response:
        """Create timers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            timer_id (str, optional): timerId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/timers/{timer_id}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_timers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        timer_id: str = None,
    ) -> Response:
        """Get timers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            timer_id (str, optional): timerId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/timers/{timer_id}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_timers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        timer_id: str = None,
    ) -> Response:
        """Delete timers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            timer_id (str, optional): timerId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/timers/{timer_id}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_timers_spf_throttle_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        timer_id: str = None,
    ) -> Response:
        """Create spf-throttle by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            timer_id (str, optional): timerId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/timers/{timer_id}/spf-throttle"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_timers_spf_throttle_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        timer_id: str = None,
    ) -> Response:
        """Get spf-throttle by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            timer_id (str, optional): timerId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/timers/{timer_id}/spf-throttle"

        return await self.get(url)

    async def ospfv3_create_ospfv3_routers_timers_lsa_throttle_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        timer_id: str = None,
    ) -> Response:
        """Create lsa-throttle by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            timer_id (str, optional): timerId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/timers/{timer_id}/lsa-throttle"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_timers_lsa_throttle_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        timer_id: str = None,
    ) -> Response:
        """Get lsa-throttle by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            timer_id (str, optional): timerId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/timers/{timer_id}/lsa-throttle"

        return await self.get(url)

    async def ospfv3_create_ospfv3_routers_summary_aggregate_route_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        prefix: str = None,
    ) -> Response:
        """Create summary-aggregate-route by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            prefix (str, optional): prefix

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/summary-aggregate-route/{prefix}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_summary_aggregate_route_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        prefix: str = None,
    ) -> Response:
        """Get summary-aggregate-route by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            prefix (str, optional): prefix

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/summary-aggregate-route/{prefix}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_summary_aggregate_route_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        prefix: str = None,
    ) -> Response:
        """Delete summary-aggregate-route by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            prefix (str, optional): prefix

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/summary-aggregate-route/{prefix}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_route_filter_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Create route-filter by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/route-filter"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_route_filter_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Get route-filter by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/route-filter"

        return await self.get(url)

    async def ospfv3_create_ospfv3_routers_snmpv3_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Create snmpv3 by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/snmpv3"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_snmpv3_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Get snmpv3 by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/snmpv3"

        return await self.get(url)

    async def ospfv3_create_ospfv3_routers_restrict_routes_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Create restrict-routes by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/restrict-routes"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_restrict_routes_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Get restrict-routes by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/restrict-routes"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_restrict_routes_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete restrict-routes by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/restrict-routes"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_distribute_filter_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        prefix: str = None,
    ) -> Response:
        """Create distribute-filter by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            prefix (str, optional): prefix

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/distribute-filter/{prefix}"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_distribute_filter_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        prefix: str = None,
    ) -> Response:
        """Get distribute-filter by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            prefix (str, optional): prefix

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/distribute-filter/{prefix}"

        return await self.get(url)

    async def ospfv3_delete_ospfv3_routers_distribute_filter_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        prefix: str = None,
    ) -> Response:
        """Delete distribute-filter by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            prefix (str, optional): prefix

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/distribute-filter/{prefix}"

        return await self.delete(url)

    async def ospfv3_create_ospfv3_routers_logging_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Create logging by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/logging"

        return await self.post(url)

    async def ospfv3_read_ospfv3_routers_logging_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
    ) -> Response:
        """Get logging by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ospfv3/{instance_tag}/{vrf}/logging"

        return await self.get(url)

    async def overlay_segment_create_overlay_segments_by_id_v1(
        self,
        segment: list,
    ) -> Response:
        """Create overlay-segments by ID.

        Args:
            segment (list): Overlay Segment Configs.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/overlay-segments"

        json_data = {
            'segment': segment
        }

        return await self.post(url, json_data=json_data)

    async def overlay_segment_read_overlay_segments_v1(
        self,
    ) -> Response:
        """Get overlay-segments.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/overlay-segments"

        return await self.get(url)

    async def overlay_segment_create_overlay_segments_segment_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create segment by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}"

        return await self.post(url)

    async def overlay_segment_read_overlay_segments_segment_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get segment by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}"

        return await self.get(url)

    async def overlay_segment_delete_overlay_segments_segment_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete segment by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}"

        return await self.delete(url)

    async def overlay_segment_create_overlay_segments_segment_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/ipv4"

        return await self.post(url)

    async def overlay_segment_read_overlay_segments_segment_ipv4_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ipv4 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/ipv4"

        return await self.get(url)

    async def overlay_segment_create_overlay_segments_segment_ipv6_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create ipv6 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/ipv6"

        return await self.post(url)

    async def overlay_segment_read_overlay_segments_segment_ipv6_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get ipv6 by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/ipv6"

        return await self.get(url)

    async def overlay_segment_create_overlay_segments_segment_ipv6_ipv6_address_by_id_v1(
        self,
        name: str = None,
        address: str = None,
    ) -> Response:
        """Create ipv6-address by ID.

        Args:
            name (str, optional): name
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/ipv6/ipv6-address/{address}"

        return await self.post(url)

    async def overlay_segment_read_overlay_segments_segment_ipv6_ipv6_address_by_id_v1(
        self,
        name: str = None,
        address: str = None,
    ) -> Response:
        """Get ipv6-address by ID.

        Args:
            name (str, optional): name
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/ipv6/ipv6-address/{address}"

        return await self.get(url)

    async def overlay_segment_delete_overlay_segments_segment_ipv6_ipv6_address_by_id_v1(
        self,
        name: str = None,
        address: str = None,
    ) -> Response:
        """Delete ipv6-address by ID.

        Args:
            name (str, optional): name
            address (str, optional): address

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/ipv6/ipv6-address/{address}"

        return await self.delete(url)

    async def overlay_segment_create_overlay_segments_segment_dhcp_relays_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create dhcp-relays by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/dhcp-relays"

        return await self.post(url)

    async def overlay_segment_read_overlay_segments_segment_dhcp_relays_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get dhcp-relays by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/dhcp-relays"

        return await self.get(url)

    async def overlay_segment_create_overlay_segments_segment_dhcp_relays_ipv4_relays_by_id_v1(
        self,
        name: str = None,
        ip: str = None,
        vrf: str = None,
    ) -> Response:
        """Create ipv4-relays by ID.

        Args:
            name (str, optional): name
            ip (str, optional): ip
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/dhcp-relays/ipv4-relays/{ip}/{vrf}"

        return await self.post(url)

    async def overlay_segment_read_overlay_segments_segment_dhcp_relays_ipv4_relays_by_id_v1(
        self,
        name: str = None,
        ip: str = None,
        vrf: str = None,
    ) -> Response:
        """Get ipv4-relays by ID.

        Args:
            name (str, optional): name
            ip (str, optional): ip
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/dhcp-relays/ipv4-relays/{ip}/{vrf}"

        return await self.get(url)

    async def overlay_segment_delete_overlay_segments_segment_dhcp_relays_ipv4_relays_by_id_v1(
        self,
        name: str = None,
        ip: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete ipv4-relays by ID.

        Args:
            name (str, optional): name
            ip (str, optional): ip
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/dhcp-relays/ipv4-relays/{ip}/{vrf}"

        return await self.delete(url)

    async def overlay_segment_create_overlay_segments_segment_roles_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create roles by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/roles"

        return await self.post(url)

    async def overlay_segment_read_overlay_segments_segment_roles_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get roles by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/roles"

        return await self.get(url)

    async def overlay_segment_delete_overlay_segments_segment_roles_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete roles by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-segments/{name}/roles"

        return await self.delete(url)

    async def overlay_wlan_create_overlay_wlan_by_id_v1(
        self,
        profile: str,
        overlay_profile_type: str,
        gw_cluster_list: list,
    ) -> Response:
        """Create overlay-wlan by ID.

        Args:
            profile (str): WLAN ssid name or wired-port profile name
            overlay_profile_type (str): WIRELESS_PROFILE if profile is wlan ssid name, pass
                'WIRED_PORT_PROFILE' if profile is wired-port profile  Valid Values:
                WIRELESS_PROFILE, WIRED_PORT_PROFILE
            gw_cluster_list (list): Gateway Clusters mapped to this profile

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/overlay-wlan"

        json_data = {
            'profile': profile,
            'overlay_profile_type': overlay_profile_type,
            'gw_cluster_list': gw_cluster_list
        }

        return await self.post(url, json_data=json_data)

    async def overlay_wlan_read_overlay_wlan_v1(
        self,
    ) -> Response:
        """Get overlay-wlan.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/overlay-wlan"

        return await self.get(url)

    async def overlay_wlan_create_overlay_wlan_ssid_cluster_by_id_v1(
        self,
        profile: str = None,
    ) -> Response:
        """Create ssid-cluster by ID.

        Args:
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-wlan/{profile}"

        return await self.post(url)

    async def overlay_wlan_read_overlay_wlan_ssid_cluster_by_id_v1(
        self,
        profile: str = None,
    ) -> Response:
        """Get ssid-cluster by ID.

        Args:
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-wlan/{profile}"

        return await self.get(url)

    async def overlay_wlan_delete_overlay_wlan_ssid_cluster_by_id_v1(
        self,
        profile: str = None,
    ) -> Response:
        """Delete ssid-cluster by ID.

        Args:
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-wlan/{profile}"

        return await self.delete(url)

    async def overlay_wlan_create_overlay_wlan_ssid_cluster_gw_cluster_list_by_id_v1(
        self,
        profile: str = None,
        cluster_redundanc_ytype: str = None,
        cluster_scop_eid: str = None,
    ) -> Response:
        """Create gw-cluster-list by ID.

        Args:
            profile (str, optional): profile
            cluster_redundanc_ytype (str, optional): clusterRedundancyType
            cluster_scop_eid (str, optional): clusterScopeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-wlan/{profile}/gw-cluster-list/{cluster_redundanc_ytype}/{cluster_scop_eid}"

        return await self.post(url)

    async def overlay_wlan_read_overlay_wlan_ssid_cluster_gw_cluster_list_by_id_v1(
        self,
        profile: str = None,
        cluster_redundanc_ytype: str = None,
        cluster_scop_eid: str = None,
    ) -> Response:
        """Get gw-cluster-list by ID.

        Args:
            profile (str, optional): profile
            cluster_redundanc_ytype (str, optional): clusterRedundancyType
            cluster_scop_eid (str, optional): clusterScopeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-wlan/{profile}/gw-cluster-list/{cluster_redundanc_ytype}/{cluster_scop_eid}"

        return await self.get(url)

    async def overlay_wlan_delete_overlay_wlan_ssid_cluster_gw_cluster_list_by_id_v1(
        self,
        profile: str = None,
        cluster_redundanc_ytype: str = None,
        cluster_scop_eid: str = None,
    ) -> Response:
        """Delete gw-cluster-list by ID.

        Args:
            profile (str, optional): profile
            cluster_redundanc_ytype (str, optional): clusterRedundancyType
            cluster_scop_eid (str, optional): clusterScopeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/overlay-wlan/{profile}/gw-cluster-list/{cluster_redundanc_ytype}/{cluster_scop_eid}"

        return await self.delete(url)

    async def packet_capture_create_packet_capture_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        dest_type: str = None,
        interface: str = None,
        ip_address: str = None,
        local_filesystem: bool = None,
        packet_filter: list = None,
        controlpath_filter: list = None,
    ) -> Response:
        """Create packet-capture by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Packet capture defaults profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Packet capture profile name.
            description (str): Packet capture profile description.
            dest_type (str): Packet capture Destination type  Valid Values: IP_ADDRESS, INTERFACE,
                LOCAL_FILESYSTEM
            interface (str): Destination Interface name
            ip_address (str): IP address of remote destination
            local_filesystem (bool): Local filesystem of controller
            packet_filter (list): Packet Capture
            controlpath_filter (list): List of controlpath packet captures.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/packet-capture"

        json_data = {
            'name': name,
            'description': description,
            'dest_type': dest_type,
            'interface': interface,
            'ip_address': ip_address,
            'local_filesystem': local_filesystem,
            'packet_filter': packet_filter,
            'controlpath_filter': controlpath_filter
        }

        return await self.post(url, json_data=json_data)

    async def packet_capture_read_packet_capture_v1(
        self,
    ) -> Response:
        """Get packet-capture.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/packet-capture"

        return await self.get(url)

    async def packet_capture_create_packet_capture_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/packet-capture/{name}"

        return await self.post(url)

    async def packet_capture_read_packet_capture_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/packet-capture/{name}"

        return await self.get(url)

    async def packet_capture_delete_packet_capture_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/packet-capture/{name}"

        return await self.delete(url)

    async def packet_capture_create_packet_capture_profile_packet_filter_by_id_v1(
        self,
        name: str = None,
        filter: str = None,
    ) -> Response:
        """Create packet-filter by ID.

        Args:
            name (str, optional): name
            filter (str, optional): filter

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/packet-capture/{name}/packet-filter/{filter}"

        return await self.post(url)

    async def packet_capture_read_packet_capture_profile_packet_filter_by_id_v1(
        self,
        name: str = None,
        filter: str = None,
    ) -> Response:
        """Get packet-filter by ID.

        Args:
            name (str, optional): name
            filter (str, optional): filter

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/packet-capture/{name}/packet-filter/{filter}"

        return await self.get(url)

    async def packet_capture_delete_packet_capture_profile_packet_filter_by_id_v1(
        self,
        name: str = None,
        filter: str = None,
    ) -> Response:
        """Delete packet-filter by ID.

        Args:
            name (str, optional): name
            filter (str, optional): filter

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/packet-capture/{name}/packet-filter/{filter}"

        return await self.delete(url)

    async def packet_capture_create_packet_capture_profile_controlpath_filter_by_id_v1(
        self,
        name: str = None,
        pkt_type: str = None,
    ) -> Response:
        """Create controlpath-filter by ID.

        Args:
            name (str, optional): name
            pkt_type (str, optional): pktType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/packet-capture/{name}/controlpath-filter/{pkt_type}"

        return await self.post(url)

    async def packet_capture_read_packet_capture_profile_controlpath_filter_by_id_v1(
        self,
        name: str = None,
        pkt_type: str = None,
    ) -> Response:
        """Get controlpath-filter by ID.

        Args:
            name (str, optional): name
            pkt_type (str, optional): pktType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/packet-capture/{name}/controlpath-filter/{pkt_type}"

        return await self.get(url)

    async def packet_capture_delete_packet_capture_profile_controlpath_filter_by_id_v1(
        self,
        name: str = None,
        pkt_type: str = None,
    ) -> Response:
        """Delete controlpath-filter by ID.

        Args:
            name (str, optional): name
            pkt_type (str, optional): pktType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/packet-capture/{name}/controlpath-filter/{pkt_type}"

        return await self.delete(url)

    async def packet_capture_create_packet_capture_profile_controlpath_filter_ports_by_id_v1(
        self,
        name: str = None,
        pkt_type: str = None,
    ) -> Response:
        """Create ports by ID.

        Args:
            name (str, optional): name
            pkt_type (str, optional): pktType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/packet-capture/{name}/controlpath-filter/{pkt_type}/ports"

        return await self.post(url)

    async def packet_capture_read_packet_capture_profile_controlpath_filter_ports_by_id_v1(
        self,
        name: str = None,
        pkt_type: str = None,
    ) -> Response:
        """Get ports by ID.

        Args:
            name (str, optional): name
            pkt_type (str, optional): pktType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/packet-capture/{name}/controlpath-filter/{pkt_type}/ports"

        return await self.get(url)

    async def packet_capture_delete_packet_capture_profile_controlpath_filter_ports_by_id_v1(
        self,
        name: str = None,
        pkt_type: str = None,
    ) -> Response:
        """Delete ports by ID.

        Args:
            name (str, optional): name
            pkt_type (str, optional): pktType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/packet-capture/{name}/controlpath-filter/{pkt_type}/ports"

        return await self.delete(url)

    async def palo_alto_firewall_create_palo_alto_firewall_by_id_v1(
        self,
        description: str,
        domain_name: str,
        ip: str,
        enable: bool,
        port: int,
        user: str,
        password: str,
    ) -> Response:
        """Create palo-alto-firewall by ID.

        Args:
            description (str): Profile description.
            domain_name (str): A static domain name to be prefixed with the client user id sent to
                the PAN firewall.
            ip (str): PAN firewall IP address on the Instant AP.
            enable (bool): Enables PAN firewall.
            port (int): A port for the PAN firewall.
            user (str): Administrator user.
            password (str): Administrator user password.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/palo-alto-firewall"

        json_data = {
            'description': description,
            'domain_name': domain_name,
            'ip': ip,
            'enable': enable,
            'port': port,
            'user': user,
            'password': password
        }

        return await self.post(url, json_data=json_data)

    async def palo_alto_firewall_read_palo_alto_firewall_v1(
        self,
    ) -> Response:
        """Get palo-alto-firewall.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/palo-alto-firewall"

        return await self.get(url)

    async def pbt_create_port_based_tunnel_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        type: str = 'PLAIN_TEXT',
        password: str = None,
    ) -> Response:
        """Create port-based-tunnel by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of Port Based Tunnel profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            type (str, optional): Password type [ciphertext | plaintext].  Valid Values: PLAIN_TEXT,
                CIPHER_TEXT
            password (str, optional): Set the authentication key.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/port-based-tunnel"

        json_data = {
            'type': type,
            'password': password
        }

        return await self.post(url, json_data=json_data)

    async def pbt_read_port_based_tunnel_v1(
        self,
    ) -> Response:
        """Get port-based-tunnel.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/port-based-tunnel"

        return await self.get(url)

    async def pbt_create_port_based_tunnel_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/port-based-tunnel/{name}"

        return await self.post(url)

    async def pbt_read_port_based_tunnel_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/port-based-tunnel/{name}"

        return await self.get(url)

    async def pbt_delete_port_based_tunnel_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/port-based-tunnel/{name}"

        return await self.delete(url)

    async def pbt_create_port_based_tunnel_profile_p_security_key_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create papi-security-key by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/port-based-tunnel/{name}/papi-security-key"

        return await self.post(url)

    async def pbt_read_port_based_tunnel_profile_p_security_key_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get papi-security-key by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/port-based-tunnel/{name}/papi-security-key"

        return await self.get(url)

    async def pim_create_pim_router_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        router: list = None,
    ) -> Response:
        """Create pim-router by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): PIM Profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): PIM profile name.
            description (str): User comment or description.
            router (list): The list of all the PIM Router instances

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/pim-router"

        json_data = {
            'name': name,
            'description': description,
            'router': router
        }

        return await self.post(url, json_data=json_data)

    async def pim_read_pim_router_v1(
        self,
    ) -> Response:
        """Get pim-router.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/pim-router"

        return await self.get(url)

    async def pim_create_pim_router_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}"

        return await self.post(url)

    async def pim_read_pim_router_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}"

        return await self.get(url)

    async def pim_delete_pim_router_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}"

        return await self.delete(url)

    async def pim_create_pim_router_profile_router_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Create router by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}"

        return await self.post(url)

    async def pim_read_pim_router_profile_router_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Get router by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}"

        return await self.get(url)

    async def pim_delete_pim_router_profile_router_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete router by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}"

        return await self.delete(url)

    async def pim_create_pim_router_profile_router_static_rps_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        group_addres_srange: str = None,
    ) -> Response:
        """Create static-rps by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            group_addres_srange (str, optional): groupAddressRange

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/static-rps/{group_addres_srange}"

        return await self.post(url)

    async def pim_read_pim_router_profile_router_static_rps_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        group_addres_srange: str = None,
    ) -> Response:
        """Get static-rps by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            group_addres_srange (str, optional): groupAddressRange

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/static-rps/{group_addres_srange}"

        return await self.get(url)

    async def pim_delete_pim_router_profile_router_static_rps_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        group_addres_srange: str = None,
    ) -> Response:
        """Delete static-rps by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            group_addres_srange (str, optional): groupAddressRange

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/static-rps/{group_addres_srange}"

        return await self.delete(url)

    async def pim_create_pim_router_profile_router_static_rp_policy_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Create static-rp-policy by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/static-rp-policy"

        return await self.post(url)

    async def pim_read_pim_router_profile_router_static_rp_policy_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Get static-rp-policy by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/static-rp-policy"

        return await self.get(url)

    async def pim_create_pim_router_profile_router_candidate_rp_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Create candidate-rp by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/candidate-rp"

        return await self.post(url)

    async def pim_read_pim_router_profile_router_candidate_rp_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Get candidate-rp by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/candidate-rp"

        return await self.get(url)

    async def pim_create_pim_router_profile_router_candidate_bsr_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Create candidate-bsr by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/candidate-bsr"

        return await self.post(url)

    async def pim_read_pim_router_profile_router_candidate_bsr_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Get candidate-bsr by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/candidate-bsr"

        return await self.get(url)

    async def pim_create_pim_router_profile_router_rpf_override_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        source_prefix: str = None,
    ) -> Response:
        """Create rpf-override by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            source_prefix (str, optional): sourcePrefix

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/rpf-override/{source_prefix}"

        return await self.post(url)

    async def pim_read_pim_router_profile_router_rpf_override_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        source_prefix: str = None,
    ) -> Response:
        """Get rpf-override by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            source_prefix (str, optional): sourcePrefix

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/rpf-override/{source_prefix}"

        return await self.get(url)

    async def pim_delete_pim_router_profile_router_rpf_override_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        source_prefix: str = None,
    ) -> Response:
        """Delete rpf-override by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            source_prefix (str, optional): sourcePrefix

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/rpf-override/{source_prefix}"

        return await self.delete(url)

    async def pim_create_pim_router_profile_router_static_rps_v6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        group_addres_srange: str = None,
    ) -> Response:
        """Create static-rps-v6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            group_addres_srange (str, optional): groupAddressRange

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/static-rps-v6/{group_addres_srange}"

        return await self.post(url)

    async def pim_read_pim_router_profile_router_static_rps_v6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        group_addres_srange: str = None,
    ) -> Response:
        """Get static-rps-v6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            group_addres_srange (str, optional): groupAddressRange

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/static-rps-v6/{group_addres_srange}"

        return await self.get(url)

    async def pim_delete_pim_router_profile_router_static_rps_v6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        group_addres_srange: str = None,
    ) -> Response:
        """Delete static-rps-v6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            group_addres_srange (str, optional): groupAddressRange

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/static-rps-v6/{group_addres_srange}"

        return await self.delete(url)

    async def pim_create_pim_router_profile_router_static_rp_policy_v6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Create static-rp-policy-v6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/static-rp-policy-v6"

        return await self.post(url)

    async def pim_read_pim_router_profile_router_static_rp_policy_v6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Get static-rp-policy-v6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/static-rp-policy-v6"

        return await self.get(url)

    async def pim_create_pim_router_profile_router_candidate_rp_v6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Create candidate-rp-v6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/candidate-rp-v6"

        return await self.post(url)

    async def pim_read_pim_router_profile_router_candidate_rp_v6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Get candidate-rp-v6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/candidate-rp-v6"

        return await self.get(url)

    async def pim_create_pim_router_profile_router_candidate_bsr_v6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Create candidate-bsr-v6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/candidate-bsr-v6"

        return await self.post(url)

    async def pim_read_pim_router_profile_router_candidate_bsr_v6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
    ) -> Response:
        """Get candidate-bsr-v6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/candidate-bsr-v6"

        return await self.get(url)

    async def pim_create_pim_router_profile_router_rpf_override_v6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        source_prefix: str = None,
    ) -> Response:
        """Create rpf-override-v6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            source_prefix (str, optional): sourcePrefix

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/rpf-override-v6/{source_prefix}"

        return await self.post(url)

    async def pim_read_pim_router_profile_router_rpf_override_v6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        source_prefix: str = None,
    ) -> Response:
        """Get rpf-override-v6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            source_prefix (str, optional): sourcePrefix

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/rpf-override-v6/{source_prefix}"

        return await self.get(url)

    async def pim_delete_pim_router_profile_router_rpf_override_v6_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        source_prefix: str = None,
    ) -> Response:
        """Delete rpf-override-v6 by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            source_prefix (str, optional): sourcePrefix

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/rpf-override-v6/{source_prefix}"

        return await self.delete(url)

    async def pim_create_pim_router_profile_router_rp_group_policies_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        rp_address: str = None,
    ) -> Response:
        """Create rp-group-policies by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            rp_address (str, optional): rpAddress

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/rp-group-policies/{rp_address}"

        return await self.post(url)

    async def pim_read_pim_router_profile_router_rp_group_policies_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        rp_address: str = None,
    ) -> Response:
        """Get rp-group-policies by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            rp_address (str, optional): rpAddress

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/rp-group-policies/{rp_address}"

        return await self.get(url)

    async def pim_delete_pim_router_profile_router_rp_group_policies_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
        address_family: str = None,
        rp_address: str = None,
    ) -> Response:
        """Delete rp-group-policies by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf
            address_family (str, optional): addressFamily
            rp_address (str, optional): rpAddress

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/pim-router/{name}/router/{vrf}/{address_family}/rp-group-policies/{rp_address}"

        return await self.delete(url)

    async def policy_group_create_policy_groups_by_id_v1(
        self,
        policy_group_list: list,
    ) -> Response:
        """Create policy-groups by ID.

        Args:
            policy_group_list (list): Global order of Policies to be applied.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/policy-groups"

        json_data = {
            'policy_group_list': policy_group_list
        }

        return await self.post(url, json_data=json_data)

    async def policy_group_read_policy_groups_v1(
        self,
    ) -> Response:
        """Get policy-groups.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/policy-groups"

        return await self.get(url)

    async def policy_group_update_policy_groups_by_id_v1(
        self,
        policy_group_list: list,
    ) -> Response:
        """Update policy-groups by ID.

        Args:
            policy_group_list (list): Global order of Policies to be applied.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/policy-groups"

        json_data = {
            'policy_group_list': policy_group_list
        }

        return await self.put(url, json_data=json_data)

    async def policy_status_read_policy_summary_v1(
        self,
    ) -> Response:
        """Get policy-summary.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/policy-summary"

        return await self.get(url)

    async def policy_status_read_policy_summary_role_policy_status_by_id_v1(
        self,
        role: str = None,
    ) -> Response:
        """Get role-policy-status by ID.

        Args:
            role (str, optional): role

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/role-policy-status/{role}"

        return await self.get(url)

    async def policy_status_read_policy_summary_role_policy_status_policy_status_by_id_v1(
        self,
        role: str = None,
        name: str = None,
    ) -> Response:
        """Get policy-status by ID.

        Args:
            role (str, optional): role
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/role-policy-status/{role}/policy-status/{name}"

        return await self.get(url)

    async def policy_status_read_policy_summary_role_policy_status_policy_status_sites_by_id_v1(
        self,
        role: str = None,
        name: str = None,
    ) -> Response:
        """Get sites by ID.

        Args:
            role (str, optional): role
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/role-policy-status/{role}/policy-status/{name}/sites"

        return await self.get(url)

    async def policy_status_read_policy_summary_role_policy_status_policy_status_personas_by_id_v1(
        self,
        role: str = None,
        name: str = None,
    ) -> Response:
        """Get personas by ID.

        Args:
            role (str, optional): role
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/role-policy-status/{role}/policy-status/{name}/personas"

        return await self.get(url)

    async def policy_status_read_policy_summary_alias_policy_status_by_id_v1(
        self,
        alias: str = None,
    ) -> Response:
        """Get alias-policy-status by ID.

        Args:
            alias (str, optional): alias

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/alias-policy-status/{alias}"

        return await self.get(url)

    async def policy_status_read_policy_summary_alias_policy_status_policy_status_by_id_v1(
        self,
        alias: str = None,
        name: str = None,
    ) -> Response:
        """Get policy-status by ID.

        Args:
            alias (str, optional): alias
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/alias-policy-status/{alias}/policy-status/{name}"

        return await self.get(url)

    async def policy_status_read_policy_summary_alias_policy_status_policy_status_sites_by_id_v1(
        self,
        alias: str = None,
        name: str = None,
    ) -> Response:
        """Get sites by ID.

        Args:
            alias (str, optional): alias
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/alias-policy-status/{alias}/policy-status/{name}/sites"

        return await self.get(url)

    async def policy_status_read_policy_summary_alias_policy_status_policy_status_personas_by_id_v1(
        self,
        alias: str = None,
        name: str = None,
    ) -> Response:
        """Get personas by ID.

        Args:
            alias (str, optional): alias
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/alias-policy-status/{alias}/policy-status/{name}/personas"

        return await self.get(url)

    async def policy_status_read_policy_summary_netservice_policy_status_by_id_v1(
        self,
        netservice: str = None,
    ) -> Response:
        """Get netservice-policy-status by ID.

        Args:
            netservice (str, optional): netservice

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/netservice-policy-status/{netservice}"

        return await self.get(url)

    async def policy_status_read_policy_summary_netservice_policy_status_policy_status_by_id_v1(
        self,
        netservice: str = None,
        name: str = None,
    ) -> Response:
        """Get policy-status by ID.

        Args:
            netservice (str, optional): netservice
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/netservice-policy-status/{netservice}/policy-status/{name}"

        return await self.get(url)

    async def policy_status_read_policy_summary_netservice_policy_status_policy_status_sites_by_id_v1(
        self,
        netservice: str = None,
        name: str = None,
    ) -> Response:
        """Get sites by ID.

        Args:
            netservice (str, optional): netservice
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/netservice-policy-status/{netservice}/policy-status/{name}/sites"

        return await self.get(url)

    async def policy_status_read_policy_summary_netservice_policy_status_policy_status_personas_by_id_v1(
        self,
        netservice: str = None,
        name: str = None,
    ) -> Response:
        """Get personas by ID.

        Args:
            netservice (str, optional): netservice
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/netservice-policy-status/{netservice}/policy-status/{name}/personas"

        return await self.get(url)

    async def policy_status_read_policy_summary_summary_policy_status_by_id_v1(
        self,
    ) -> Response:
        """Get summary-policy-status by ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/policy-summary/summary-policy-status"

        return await self.get(url)

    async def policy_status_read_policy_summary_summary_policy_status_policy_status_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get policy-status by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/summary-policy-status/policy-status/{name}"

        return await self.get(url)

    async def policy_status_read_policy_summary_summary_policy_status_policy_status_sites_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get sites by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/summary-policy-status/policy-status/{name}/sites"

        return await self.get(url)

    async def policy_status_read_policy_summary_summary_policy_status_policy_status_personas_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get personas by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/summary-policy-status/policy-status/{name}/personas"

        return await self.get(url)

    async def policy_status_read_policy_summary_policy_status_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get policy-status by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/policy-status/{name}"

        return await self.get(url)

    async def policy_status_read_policy_summary_policy_status_sites_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get sites by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/policy-status/{name}/sites"

        return await self.get(url)

    async def policy_status_read_policy_summary_policy_status_personas_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get personas by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policy-summary/policy-status/{name}/personas"

        return await self.get(url)

    async def policy_create_policies_by_id_v1(
        self,
        policy: list,
    ) -> Response:
        """Create policies by ID.

        Args:
            policy (list): List of Policies.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/policies"

        json_data = {
            'policy': policy
        }

        return await self.post(url, json_data=json_data)

    async def policy_read_policies_v1(
        self,
    ) -> Response:
        """Get policies.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/policies"

        return await self.get(url)

    async def policy_create_policies_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policies/{name}"

        return await self.post(url)

    async def policy_read_policies_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policies/{name}"

        return await self.get(url)

    async def policy_delete_policies_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policies/{name}"

        return await self.delete(url)

    async def policy_create_policies_policy_security_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create security-policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policies/{name}/security-policy"

        return await self.post(url)

    async def policy_read_policies_policy_security_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get security-policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policies/{name}/security-policy"

        return await self.get(url)

    async def policy_create_policies_policy_security_policy_policy_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create policy-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policies/{name}/security-policy/policy-rule/{position}"

        return await self.post(url)

    async def policy_read_policies_policy_security_policy_policy_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get policy-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policies/{name}/security-policy/policy-rule/{position}"

        return await self.get(url)

    async def policy_update_policies_policy_security_policy_policy_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Update policy-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policies/{name}/security-policy/policy-rule/{position}"

        return await self.put(url)

    async def policy_delete_policies_policy_security_policy_policy_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Delete policy-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/policies/{name}/security-policy/policy-rule/{position}"

        return await self.delete(url)

    async def port_security_create_port_security_by_id_v1(
        self,
        policy: list,
    ) -> Response:
        """Create port-security by ID.

        Args:
            policy (list): List of port security policies.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/port-security"

        json_data = {
            'policy': policy
        }

        return await self.post(url, json_data=json_data)

    async def port_security_read_port_security_v1(
        self,
    ) -> Response:
        """Get port-security.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/port-security"

        return await self.get(url)

    async def port_security_create_port_security_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/port-security/{name}"

        return await self.post(url)

    async def port_security_read_port_security_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/port-security/{name}"

        return await self.get(url)

    async def port_security_delete_port_security_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/port-security/{name}"

        return await self.delete(url)

    async def portfilter_create_portfilter_by_id_v1(
        self,
        portfilter_name: str,
        enable: bool,
        lag_ports: List[str],
        eth_ports: List[str],
        action: str,
    ) -> Response:
        """Create portfilter by ID.

        Args:
            portfilter_name (str): Filter template of blocked or forward destination ports.
            enable (bool): Enable filter on source port.
            lag_ports (List[str]): lag-ports
            eth_ports (List[str]): eth-ports
            action (str): Action for filter either to forward or drop traffic to the list of ports.
                Valid Values: FORWARD, DROP

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/portfilter"

        json_data = {
            'portfilter_name': portfilter_name,
            'enable': enable,
            'lag_ports': lag_ports,
            'eth_ports': eth_ports,
            'action': action
        }

        return await self.post(url, json_data=json_data)

    async def portfilter_read_portfilter_v1(
        self,
    ) -> Response:
        """Get portfilter.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/portfilter"

        return await self.get(url)

    async def portfilter_create_portfilter_lag_ports_by_id_v1(
        self,
        NoName: List[str] = None,
        NoName_: List[str] = None,
    ) -> Response:
        """Create lag-ports by ID.

        Args:
            NoName (List[str]): ...
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            NoName (List[str]): ...

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/portfilter/lag-ports"

        return await self.post(url)

    async def portfilter_read_portfilter_lag_ports_by_id_v1(
        self,
    ) -> Response:
        """Get lag-ports by ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/portfilter/lag-ports"

        return await self.get(url)

    async def portfilter_delete_portfilter_lag_ports_by_id_v1(
        self,
    ) -> Response:
        """Delete lag-ports by ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/portfilter/lag-ports"

        return await self.delete(url)

    async def portfilter_create_portfilter_eth_ports_by_id_v1(
        self,
        NoName: List[str] = None,
        NoName_: List[str] = None,
    ) -> Response:
        """Create eth-ports by ID.

        Args:
            NoName (List[str]): ...
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            NoName (List[str]): ...

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/portfilter/eth-ports"

        return await self.post(url)

    async def portfilter_read_portfilter_eth_ports_by_id_v1(
        self,
    ) -> Response:
        """Get eth-ports by ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/portfilter/eth-ports"

        return await self.get(url)

    async def portfilter_delete_portfilter_eth_ports_by_id_v1(
        self,
    ) -> Response:
        """Delete eth-ports by ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/portfilter/eth-ports"

        return await self.delete(url)

    async def prefix_list_create_prefix_lists_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create prefix-lists by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Prefix List[Dict[str, Any]] | Dict[str, Any] Profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Prefix list Profile

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/prefix-lists"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def prefix_list_read_prefix_lists_v1(
        self,
    ) -> Response:
        """Get prefix-lists.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/prefix-lists"

        return await self.get(url)

    async def prefix_list_create_prefix_lists_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}"

        return await self.post(url)

    async def prefix_list_read_prefix_lists_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}"

        return await self.get(url)

    async def prefix_list_delete_prefix_lists_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}"

        return await self.delete(url)

    async def prefix_list_create_prefix_lists_profile_as_path_list_by_id_v1(
        self,
        name: str = None,
        as_path_list_name: str = None,
    ) -> Response:
        """Create as-path-list by ID.

        Args:
            name (str, optional): name
            as_path_list_name (str, optional): as-path-list_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/as-path-list/{as_path_list_name}"

        return await self.post(url)

    async def prefix_list_read_prefix_lists_profile_as_path_list_by_id_v1(
        self,
        name: str = None,
        as_path_list_name: str = None,
    ) -> Response:
        """Get as-path-list by ID.

        Args:
            name (str, optional): name
            as_path_list_name (str, optional): as-path-list_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/as-path-list/{as_path_list_name}"

        return await self.get(url)

    async def prefix_list_delete_prefix_lists_profile_as_path_list_by_id_v1(
        self,
        name: str = None,
        as_path_list_name: str = None,
    ) -> Response:
        """Delete as-path-list by ID.

        Args:
            name (str, optional): name
            as_path_list_name (str, optional): as-path-list_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/as-path-list/{as_path_list_name}"

        return await self.delete(url)

    async def prefix_list_create_prefix_lists_profile_as_path_list_as_path_list_entry_by_id_v1(
        self,
        name: str = None,
        as_path_list_name: str = None,
        seq_no: str = None,
    ) -> Response:
        """Create as-path-list-entry by ID.

        Args:
            name (str, optional): name
            as_path_list_name (str, optional): as-path-list_name
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/as-path-list/{as_path_list_name}/as-path-list-entry/{seq_no}"

        return await self.post(url)

    async def prefix_list_read_prefix_lists_profile_as_path_list_as_path_list_entry_by_id_v1(
        self,
        name: str = None,
        as_path_list_name: str = None,
        seq_no: str = None,
    ) -> Response:
        """Get as-path-list-entry by ID.

        Args:
            name (str, optional): name
            as_path_list_name (str, optional): as-path-list_name
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/as-path-list/{as_path_list_name}/as-path-list-entry/{seq_no}"

        return await self.get(url)

    async def prefix_list_delete_prefix_lists_profile_as_path_list_as_path_list_entry_by_id_v1(
        self,
        name: str = None,
        as_path_list_name: str = None,
        seq_no: str = None,
    ) -> Response:
        """Delete as-path-list-entry by ID.

        Args:
            name (str, optional): name
            as_path_list_name (str, optional): as-path-list_name
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/as-path-list/{as_path_list_name}/as-path-list-entry/{seq_no}"

        return await self.delete(url)

    async def prefix_list_create_prefix_lists_profile_prefix_list_by_id_v1(
        self,
        name: str = None,
        prefix_list_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create prefix-list by ID.

        Args:
            name (str, optional): name
            prefix_list_name (str, optional): prefix-list_name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/prefix-list/{prefix_list_name}/{address_family}"

        return await self.post(url)

    async def prefix_list_read_prefix_lists_profile_prefix_list_by_id_v1(
        self,
        name: str = None,
        prefix_list_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get prefix-list by ID.

        Args:
            name (str, optional): name
            prefix_list_name (str, optional): prefix-list_name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/prefix-list/{prefix_list_name}/{address_family}"

        return await self.get(url)

    async def prefix_list_delete_prefix_lists_profile_prefix_list_by_id_v1(
        self,
        name: str = None,
        prefix_list_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete prefix-list by ID.

        Args:
            name (str, optional): name
            prefix_list_name (str, optional): prefix-list_name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/prefix-list/{prefix_list_name}/{address_family}"

        return await self.delete(url)

    async def prefix_list_create_prefix_lists_profile_prefix_list_prefix_list_entry_by_id_v1(
        self,
        name: str = None,
        prefix_list_name: str = None,
        address_family: str = None,
        seq_no: str = None,
    ) -> Response:
        """Create prefix-list-entry by ID.

        Args:
            name (str, optional): name
            prefix_list_name (str, optional): prefix-list_name
            address_family (str, optional): addressFamily
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/prefix-list/{prefix_list_name}/{address_family}/prefix-list-entry/{seq_no}"

        return await self.post(url)

    async def prefix_list_read_prefix_lists_profile_prefix_list_prefix_list_entry_by_id_v1(
        self,
        name: str = None,
        prefix_list_name: str = None,
        address_family: str = None,
        seq_no: str = None,
    ) -> Response:
        """Get prefix-list-entry by ID.

        Args:
            name (str, optional): name
            prefix_list_name (str, optional): prefix-list_name
            address_family (str, optional): addressFamily
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/prefix-list/{prefix_list_name}/{address_family}/prefix-list-entry/{seq_no}"

        return await self.get(url)

    async def prefix_list_delete_prefix_lists_profile_prefix_list_prefix_list_entry_by_id_v1(
        self,
        name: str = None,
        prefix_list_name: str = None,
        address_family: str = None,
        seq_no: str = None,
    ) -> Response:
        """Delete prefix-list-entry by ID.

        Args:
            name (str, optional): name
            prefix_list_name (str, optional): prefix-list_name
            address_family (str, optional): addressFamily
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/prefix-list/{prefix_list_name}/{address_family}/prefix-list-entry/{seq_no}"

        return await self.delete(url)

    async def prefix_list_create_prefix_lists_profile_auto_aggregate_prefix_by_id_v1(
        self,
        name: str = None,
        auto_aggregate_prefix_name: str = None,
        seq_no: str = None,
    ) -> Response:
        """Create auto-aggregate-prefix by ID.

        Args:
            name (str, optional): name
            auto_aggregate_prefix_name (str, optional): auto-aggregate-prefix_name
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/auto-aggregate-prefix/{auto_aggregate_prefix_name}/{seq_no}"

        return await self.post(url)

    async def prefix_list_read_prefix_lists_profile_auto_aggregate_prefix_by_id_v1(
        self,
        name: str = None,
        auto_aggregate_prefix_name: str = None,
        seq_no: str = None,
    ) -> Response:
        """Get auto-aggregate-prefix by ID.

        Args:
            name (str, optional): name
            auto_aggregate_prefix_name (str, optional): auto-aggregate-prefix_name
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/auto-aggregate-prefix/{auto_aggregate_prefix_name}/{seq_no}"

        return await self.get(url)

    async def prefix_list_delete_prefix_lists_profile_auto_aggregate_prefix_by_id_v1(
        self,
        name: str = None,
        auto_aggregate_prefix_name: str = None,
        seq_no: str = None,
    ) -> Response:
        """Delete auto-aggregate-prefix by ID.

        Args:
            name (str, optional): name
            auto_aggregate_prefix_name (str, optional): auto-aggregate-prefix_name
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/auto-aggregate-prefix/{auto_aggregate_prefix_name}/{seq_no}"

        return await self.delete(url)

    async def prefix_list_create_prefix_lists_profile_auto_aggregate_list_by_id_v1(
        self,
        name: str = None,
        auto_aggregate_list_name: str = None,
        seq_no: str = None,
    ) -> Response:
        """Create auto-aggregate-list by ID.

        Args:
            name (str, optional): name
            auto_aggregate_list_name (str, optional): auto-aggregate-list_name
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/auto-aggregate-list/{auto_aggregate_list_name}/{seq_no}"

        return await self.post(url)

    async def prefix_list_read_prefix_lists_profile_auto_aggregate_list_by_id_v1(
        self,
        name: str = None,
        auto_aggregate_list_name: str = None,
        seq_no: str = None,
    ) -> Response:
        """Get auto-aggregate-list by ID.

        Args:
            name (str, optional): name
            auto_aggregate_list_name (str, optional): auto-aggregate-list_name
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/auto-aggregate-list/{auto_aggregate_list_name}/{seq_no}"

        return await self.get(url)

    async def prefix_list_delete_prefix_lists_profile_auto_aggregate_list_by_id_v1(
        self,
        name: str = None,
        auto_aggregate_list_name: str = None,
        seq_no: str = None,
    ) -> Response:
        """Delete auto-aggregate-list by ID.

        Args:
            name (str, optional): name
            auto_aggregate_list_name (str, optional): auto-aggregate-list_name
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/prefix-lists/{name}/auto-aggregate-list/{auto_aggregate_list_name}/{seq_no}"

        return await self.delete(url)

    async def psm_create_psm_by_id_v1(
        self,
        psm_instance: list,
    ) -> Response:
        """Create psm by ID.

        Args:
            psm_instance (list): List of PSM instance.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/psm"

        json_data = {
            'psm_instance': psm_instance
        }

        return await self.post(url, json_data=json_data)

    async def psm_read_psm_v1(
        self,
    ) -> Response:
        """Get psm.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/psm"

        return await self.get(url)

    async def psm_create_psm_psm_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create psm-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm/{name}"

        return await self.post(url)

    async def psm_read_psm_psm_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get psm-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm/{name}"

        return await self.get(url)

    async def psm_delete_psm_psm_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete psm-instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm/{name}"

        return await self.delete(url)

    async def psm_create_psm_psm_instance_psm_ips_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create psm-ips by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm/{name}/psm-ips"

        return await self.post(url)

    async def psm_read_psm_psm_instance_psm_ips_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get psm-ips by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm/{name}/psm-ips"

        return await self.get(url)

    async def psm_delete_psm_psm_instance_psm_ips_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete psm-ips by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/psm/{name}/psm-ips"

        return await self.delete(url)

    async def pvos_switch_firmware_create_pvos_switch_firmware_by_id_v1(
        self,
        version: str,
        rollback: str,
        active_partition: str,
        reboot: bool,
    ) -> Response:
        """Create pvos-switch-firmware by ID.

        Args:
            version (str): Desired firmware version
            rollback (str): INTERNAL - firmware version to rollback to
            active_partition (str): Partition to upgrade  Valid Values: PRIMARY, SECONDARY
            reboot (bool): Automatically reboot after upgrade or not

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/pvos-switch-firmware"

        json_data = {
            'version': version,
            'rollback': rollback,
            'active_partition': active_partition,
            'reboot': reboot
        }

        return await self.post(url, json_data=json_data)

    async def pvos_switch_firmware_read_pvos_switch_firmware_v1(
        self,
    ) -> Response:
        """Get pvos-switch-firmware.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/pvos-switch-firmware"

        return await self.get(url)

    async def qos_cos_create_qos_cos_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create qos-cos by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): QoS cos Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): QoS cos Profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-cos"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def qos_cos_read_qos_cos_v1(
        self,
    ) -> Response:
        """Get qos-cos.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-cos"

        return await self.get(url)

    async def qos_cos_create_qos_cos_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-cos/{name}"

        return await self.post(url)

    async def qos_cos_read_qos_cos_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-cos/{name}"

        return await self.get(url)

    async def qos_cos_delete_qos_cos_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-cos/{name}"

        return await self.delete(url)

    async def qos_cos_create_qos_cos_profile_cos_map_by_id_v1(
        self,
        name: str = None,
        cos: str = None,
    ) -> Response:
        """Create cos-map by ID.

        Args:
            name (str, optional): name
            cos (str, optional): cos

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-cos/{name}/cos-map/{cos}"

        return await self.post(url)

    async def qos_cos_read_qos_cos_profile_cos_map_by_id_v1(
        self,
        name: str = None,
        cos: str = None,
    ) -> Response:
        """Get cos-map by ID.

        Args:
            name (str, optional): name
            cos (str, optional): cos

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-cos/{name}/cos-map/{cos}"

        return await self.get(url)

    async def qos_cos_delete_qos_cos_profile_cos_map_by_id_v1(
        self,
        name: str = None,
        cos: str = None,
    ) -> Response:
        """Delete cos-map by ID.

        Args:
            name (str, optional): name
            cos (str, optional): cos

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-cos/{name}/cos-map/{cos}"

        return await self.delete(url)

    async def qos_device_priority_create_qos_device_priorities_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        device_priority: list = None,
    ) -> Response:
        """Create qos-device-priorities by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): QoS device priority Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): QoS device priority profile name.
            description (str): QoS device priority profile description.
            device_priority (list): IP address-based traffic priority.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-device-priorities"

        json_data = {
            'name': name,
            'description': description,
            'device_priority': device_priority
        }

        return await self.post(url, json_data=json_data)

    async def qos_device_priority_read_qos_device_priorities_v1(
        self,
    ) -> Response:
        """Get qos-device-priorities.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-device-priorities"

        return await self.get(url)

    async def qos_device_priority_create_qos_device_priorities_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-device-priorities/{name}"

        return await self.post(url)

    async def qos_device_priority_read_qos_device_priorities_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-device-priorities/{name}"

        return await self.get(url)

    async def qos_device_priority_delete_qos_device_priorities_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-device-priorities/{name}"

        return await self.delete(url)

    async def qos_device_priority_create_qos_device_priorities_profile_device_priority_by_id_v1(
        self,
        name: str = None,
        device_address: str = None,
    ) -> Response:
        """Create device-priority by ID.

        Args:
            name (str, optional): name
            device_address (str, optional): deviceAddress

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-device-priorities/{name}/device-priority/{device_address}"

        return await self.post(url)

    async def qos_device_priority_read_qos_device_priorities_profile_device_priority_by_id_v1(
        self,
        name: str = None,
        device_address: str = None,
    ) -> Response:
        """Get device-priority by ID.

        Args:
            name (str, optional): name
            device_address (str, optional): deviceAddress

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-device-priorities/{name}/device-priority/{device_address}"

        return await self.get(url)

    async def qos_device_priority_delete_qos_device_priorities_profile_device_priority_by_id_v1(
        self,
        name: str = None,
        device_address: str = None,
    ) -> Response:
        """Delete device-priority by ID.

        Args:
            name (str, optional): name
            device_address (str, optional): deviceAddress

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-device-priorities/{name}/device-priority/{device_address}"

        return await self.delete(url)

    async def qos_dscp_create_qos_dscp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create qos-dscp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): QoS dscp Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): QoS dscp Profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-dscp"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def qos_dscp_read_qos_dscp_v1(
        self,
    ) -> Response:
        """Get qos-dscp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-dscp"

        return await self.get(url)

    async def qos_dscp_create_qos_dscp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-dscp/{name}"

        return await self.post(url)

    async def qos_dscp_read_qos_dscp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-dscp/{name}"

        return await self.get(url)

    async def qos_dscp_delete_qos_dscp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-dscp/{name}"

        return await self.delete(url)

    async def qos_dscp_create_qos_dscp_profile_dscp_map_by_id_v1(
        self,
        name: str = None,
        dscp: str = None,
    ) -> Response:
        """Create dscp-map by ID.

        Args:
            name (str, optional): name
            dscp (str, optional): dscp

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-dscp/{name}/dscp-map/{dscp}"

        return await self.post(url)

    async def qos_dscp_read_qos_dscp_profile_dscp_map_by_id_v1(
        self,
        name: str = None,
        dscp: str = None,
    ) -> Response:
        """Get dscp-map by ID.

        Args:
            name (str, optional): name
            dscp (str, optional): dscp

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-dscp/{name}/dscp-map/{dscp}"

        return await self.get(url)

    async def qos_dscp_delete_qos_dscp_profile_dscp_map_by_id_v1(
        self,
        name: str = None,
        dscp: str = None,
    ) -> Response:
        """Delete dscp-map by ID.

        Args:
            name (str, optional): name
            dscp (str, optional): dscp

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-dscp/{name}/dscp-map/{dscp}"

        return await self.delete(url)

    async def qos_pool_create_qos_pools_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create qos-pools by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): QoS pool Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): QoS pool Profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-pools"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def qos_pool_read_qos_pools_v1(
        self,
    ) -> Response:
        """Get qos-pools.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-pools"

        return await self.get(url)

    async def qos_pool_create_qos_pools_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-pools/{name}"

        return await self.post(url)

    async def qos_pool_read_qos_pools_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-pools/{name}"

        return await self.get(url)

    async def qos_pool_delete_qos_pools_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-pools/{name}"

        return await self.delete(url)

    async def qos_pool_create_qos_pools_profile_pool_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Create pool by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-pools/{name}/pool/{index}"

        return await self.post(url)

    async def qos_pool_read_qos_pools_profile_pool_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Get pool by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-pools/{name}/pool/{index}"

        return await self.get(url)

    async def qos_pool_delete_qos_pools_profile_pool_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Delete pool by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-pools/{name}/pool/{index}"

        return await self.delete(url)

    async def qos_pool_create_qos_pools_profile_pool_priority_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Create priority by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-pools/{name}/pool/{index}/priority"

        return await self.post(url)

    async def qos_pool_read_qos_pools_profile_pool_priority_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Get priority by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-pools/{name}/pool/{index}/priority"

        return await self.get(url)

    async def qos_pool_delete_qos_pools_profile_pool_priority_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Delete priority by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-pools/{name}/pool/{index}/priority"

        return await self.delete(url)

    async def qos_protocol_create_qos_protocols_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        protocol: list = None,
    ) -> Response:
        """Create qos-protocols by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): QoS protocol Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): QoS protocol profile name.
            description (str): QoS protocol profile description.
            protocol (list): Protocol-based traffic prioritization list.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-protocols"

        json_data = {
            'name': name,
            'description': description,
            'protocol': protocol
        }

        return await self.post(url, json_data=json_data)

    async def qos_protocol_read_qos_protocols_v1(
        self,
    ) -> Response:
        """Get qos-protocols.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-protocols"

        return await self.get(url)

    async def qos_protocol_create_qos_protocols_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-protocols/{name}"

        return await self.post(url)

    async def qos_protocol_read_qos_protocols_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-protocols/{name}"

        return await self.get(url)

    async def qos_protocol_delete_qos_protocols_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-protocols/{name}"

        return await self.delete(url)

    async def qos_protocol_create_qos_protocols_profile_protocol_by_id_v1(
        self,
        name: str = None,
        type: str = None,
    ) -> Response:
        """Create protocol by ID.

        Args:
            name (str, optional): name
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-protocols/{name}/protocol/{type}"

        return await self.post(url)

    async def qos_protocol_read_qos_protocols_profile_protocol_by_id_v1(
        self,
        name: str = None,
        type: str = None,
    ) -> Response:
        """Get protocol by ID.

        Args:
            name (str, optional): name
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-protocols/{name}/protocol/{type}"

        return await self.get(url)

    async def qos_protocol_delete_qos_protocols_profile_protocol_by_id_v1(
        self,
        name: str = None,
        type: str = None,
    ) -> Response:
        """Delete protocol by ID.

        Args:
            name (str, optional): name
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-protocols/{name}/protocol/{type}"

        return await self.delete(url)

    async def qos_queue_create_qos_queues_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create qos-queues by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): QoS queue Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): QoS queue Profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-queues"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def qos_queue_read_qos_queues_v1(
        self,
    ) -> Response:
        """Get qos-queues.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-queues"

        return await self.get(url)

    async def qos_queue_create_qos_queues_profile_by_id_v1(
        self,
        q_profil_ename: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            q_profil_ename (str, optional): qProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}"

        return await self.post(url)

    async def qos_queue_read_qos_queues_profile_by_id_v1(
        self,
        q_profil_ename: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            q_profil_ename (str, optional): qProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}"

        return await self.get(url)

    async def qos_queue_delete_qos_queues_profile_by_id_v1(
        self,
        q_profil_ename: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            q_profil_ename (str, optional): qProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}"

        return await self.delete(url)

    async def qos_queue_create_qos_queues_profile_priority_by_id_v1(
        self,
        q_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Create priority by ID.

        Args:
            q_profil_ename (str, optional): qProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}/priority/{queue}"

        return await self.post(url)

    async def qos_queue_read_qos_queues_profile_priority_by_id_v1(
        self,
        q_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Get priority by ID.

        Args:
            q_profil_ename (str, optional): qProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}/priority/{queue}"

        return await self.get(url)

    async def qos_queue_delete_qos_queues_profile_priority_by_id_v1(
        self,
        q_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Delete priority by ID.

        Args:
            q_profil_ename (str, optional): qProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}/priority/{queue}"

        return await self.delete(url)

    async def qos_queue_create_qos_queues_profile_priority_local_priority_by_id_v1(
        self,
        q_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Create local-priority by ID.

        Args:
            q_profil_ename (str, optional): qProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}/priority/{queue}/local-priority"

        return await self.post(url)

    async def qos_queue_read_qos_queues_profile_priority_local_priority_by_id_v1(
        self,
        q_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Get local-priority by ID.

        Args:
            q_profil_ename (str, optional): qProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}/priority/{queue}/local-priority"

        return await self.get(url)

    async def qos_queue_delete_qos_queues_profile_priority_local_priority_by_id_v1(
        self,
        q_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Delete local-priority by ID.

        Args:
            q_profil_ename (str, optional): qProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}/priority/{queue}/local-priority"

        return await self.delete(url)

    async def qos_queue_create_qos_queues_profile_priority_cos_by_id_v1(
        self,
        q_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Create cos by ID.

        Args:
            q_profil_ename (str, optional): qProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}/priority/{queue}/cos"

        return await self.post(url)

    async def qos_queue_read_qos_queues_profile_priority_cos_by_id_v1(
        self,
        q_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Get cos by ID.

        Args:
            q_profil_ename (str, optional): qProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}/priority/{queue}/cos"

        return await self.get(url)

    async def qos_queue_delete_qos_queues_profile_priority_cos_by_id_v1(
        self,
        q_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Delete cos by ID.

        Args:
            q_profil_ename (str, optional): qProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}/priority/{queue}/cos"

        return await self.delete(url)

    async def qos_queue_create_qos_queues_profile_queue_by_id_v1(
        self,
        q_profil_ename: str = None,
    ) -> Response:
        """Create queue by ID.

        Args:
            q_profil_ename (str, optional): qProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}/queue"

        return await self.post(url)

    async def qos_queue_read_qos_queues_profile_queue_by_id_v1(
        self,
        q_profil_ename: str = None,
    ) -> Response:
        """Get queue by ID.

        Args:
            q_profil_ename (str, optional): qProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-queues/{q_profil_ename}/queue"

        return await self.get(url)

    async def qos_schedule_create_qos_schedules_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create qos-schedules by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): QoS schedule Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): QoS schedule Profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-schedules"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def qos_schedule_read_qos_schedules_v1(
        self,
    ) -> Response:
        """Get qos-schedules.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-schedules"

        return await self.get(url)

    async def qos_schedule_create_qos_schedules_profile_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}"

        return await self.post(url)

    async def qos_schedule_read_qos_schedules_profile_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}"

        return await self.get(url)

    async def qos_schedule_delete_qos_schedules_profile_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}"

        return await self.delete(url)

    async def qos_schedule_create_qos_schedules_profile_dwrr_by_id_v1(
        self,
        sched_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Create dwrr by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/dwrr/{queue}"

        return await self.post(url)

    async def qos_schedule_read_qos_schedules_profile_dwrr_by_id_v1(
        self,
        sched_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Get dwrr by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/dwrr/{queue}"

        return await self.get(url)

    async def qos_schedule_delete_qos_schedules_profile_dwrr_by_id_v1(
        self,
        sched_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Delete dwrr by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/dwrr/{queue}"

        return await self.delete(url)

    async def qos_schedule_create_qos_schedules_profile_wfq_by_id_v1(
        self,
        sched_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Create wfq by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/wfq/{queue}"

        return await self.post(url)

    async def qos_schedule_read_qos_schedules_profile_wfq_by_id_v1(
        self,
        sched_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Get wfq by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/wfq/{queue}"

        return await self.get(url)

    async def qos_schedule_delete_qos_schedules_profile_wfq_by_id_v1(
        self,
        sched_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Delete wfq by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/wfq/{queue}"

        return await self.delete(url)

    async def qos_schedule_create_qos_schedules_profile_strict_by_id_v1(
        self,
        sched_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Create strict by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/strict/{queue}"

        return await self.post(url)

    async def qos_schedule_read_qos_schedules_profile_strict_by_id_v1(
        self,
        sched_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Get strict by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/strict/{queue}"

        return await self.get(url)

    async def qos_schedule_delete_qos_schedules_profile_strict_by_id_v1(
        self,
        sched_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Delete strict by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/strict/{queue}"

        return await self.delete(url)

    async def qos_schedule_create_qos_schedules_profile_min_bandwidths_by_id_v1(
        self,
        sched_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Create min-bandwidths by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/min-bandwidths/{queue}"

        return await self.post(url)

    async def qos_schedule_read_qos_schedules_profile_min_bandwidths_by_id_v1(
        self,
        sched_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Get min-bandwidths by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/min-bandwidths/{queue}"

        return await self.get(url)

    async def qos_schedule_delete_qos_schedules_profile_min_bandwidths_by_id_v1(
        self,
        sched_profil_ename: str = None,
        queue: str = None,
    ) -> Response:
        """Delete min-bandwidths by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/min-bandwidths/{queue}"

        return await self.delete(url)

    async def qos_schedule_create_qos_schedules_profile_priority_maps_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Create priority-maps by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps"

        return await self.post(url)

    async def qos_schedule_read_qos_schedules_profile_priority_maps_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Get priority-maps by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps"

        return await self.get(url)

    async def qos_schedule_create_qos_schedules_profile_priority_maps_priority_q0_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Create priority-q0 by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps/priority-q0"

        return await self.post(url)

    async def qos_schedule_read_qos_schedules_profile_priority_maps_priority_q0_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Get priority-q0 by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps/priority-q0"

        return await self.get(url)

    async def qos_schedule_delete_qos_schedules_profile_priority_maps_priority_q0_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Delete priority-q0 by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps/priority-q0"

        return await self.delete(url)

    async def qos_schedule_create_qos_schedules_profile_priority_maps_priority_q1_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Create priority-q1 by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps/priority-q1"

        return await self.post(url)

    async def qos_schedule_read_qos_schedules_profile_priority_maps_priority_q1_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Get priority-q1 by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps/priority-q1"

        return await self.get(url)

    async def qos_schedule_delete_qos_schedules_profile_priority_maps_priority_q1_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Delete priority-q1 by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps/priority-q1"

        return await self.delete(url)

    async def qos_schedule_create_qos_schedules_profile_priority_maps_priority_q2_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Create priority-q2 by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps/priority-q2"

        return await self.post(url)

    async def qos_schedule_read_qos_schedules_profile_priority_maps_priority_q2_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Get priority-q2 by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps/priority-q2"

        return await self.get(url)

    async def qos_schedule_delete_qos_schedules_profile_priority_maps_priority_q2_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Delete priority-q2 by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps/priority-q2"

        return await self.delete(url)

    async def qos_schedule_create_qos_schedules_profile_priority_maps_priority_q3_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Create priority-q3 by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps/priority-q3"

        return await self.post(url)

    async def qos_schedule_read_qos_schedules_profile_priority_maps_priority_q3_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Get priority-q3 by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps/priority-q3"

        return await self.get(url)

    async def qos_schedule_delete_qos_schedules_profile_priority_maps_priority_q3_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Delete priority-q3 by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/priority-maps/priority-q3"

        return await self.delete(url)

    async def qos_schedule_create_qos_schedules_profile_weights_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Create weights by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/weights"

        return await self.post(url)

    async def qos_schedule_read_qos_schedules_profile_weights_by_id_v1(
        self,
        sched_profil_ename: str = None,
    ) -> Response:
        """Get weights by ID.

        Args:
            sched_profil_ename (str, optional): schedProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-schedules/{sched_profil_ename}/weights"

        return await self.get(url)

    async def qos_threshold_profile_create_qos_thresholds_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create qos-thresholds by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): QoS threshold Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): QoS threshold Profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-thresholds"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def qos_threshold_profile_read_qos_thresholds_v1(
        self,
    ) -> Response:
        """Get qos-thresholds.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-thresholds"

        return await self.get(url)

    async def qos_threshold_profile_create_qos_thresholds_profile_by_id_v1(
        self,
        thresh_profil_ename: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}"

        return await self.post(url)

    async def qos_threshold_profile_read_qos_thresholds_profile_by_id_v1(
        self,
        thresh_profil_ename: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}"

        return await self.get(url)

    async def qos_threshold_profile_delete_qos_thresholds_profile_by_id_v1(
        self,
        thresh_profil_ename: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}"

        return await self.delete(url)

    async def qos_threshold_profile_create_qos_thresholds_profile_queue_by_id_v1(
        self,
        thresh_profil_ename: str = None,
        queue_num: str = None,
    ) -> Response:
        """Create queue by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName
            queue_num (str, optional): queueNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}/queue/{queue_num}"

        return await self.post(url)

    async def qos_threshold_profile_read_qos_thresholds_profile_queue_by_id_v1(
        self,
        thresh_profil_ename: str = None,
        queue_num: str = None,
    ) -> Response:
        """Get queue by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName
            queue_num (str, optional): queueNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}/queue/{queue_num}"

        return await self.get(url)

    async def qos_threshold_profile_delete_qos_thresholds_profile_queue_by_id_v1(
        self,
        thresh_profil_ename: str = None,
        queue_num: str = None,
    ) -> Response:
        """Delete queue by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName
            queue_num (str, optional): queueNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}/queue/{queue_num}"

        return await self.delete(url)

    async def qos_threshold_profile_create_qos_thresholds_profile_queue_ecn_entry_by_id_v1(
        self,
        thresh_profil_ename: str = None,
        queue_num: str = None,
    ) -> Response:
        """Create ecn-entry by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName
            queue_num (str, optional): queueNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}/queue/{queue_num}/ecn-entry"

        return await self.post(url)

    async def qos_threshold_profile_read_qos_thresholds_profile_queue_ecn_entry_by_id_v1(
        self,
        thresh_profil_ename: str = None,
        queue_num: str = None,
    ) -> Response:
        """Get ecn-entry by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName
            queue_num (str, optional): queueNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}/queue/{queue_num}/ecn-entry"

        return await self.get(url)

    async def qos_threshold_profile_create_qos_thresholds_profile_queue_wred_non_resp_entry_by_id_v1(
        self,
        thresh_profil_ename: str = None,
        queue_num: str = None,
    ) -> Response:
        """Create wred-non-resp-entry by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName
            queue_num (str, optional): queueNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}/queue/{queue_num}/wred-non-resp-entry"

        return await self.post(url)

    async def qos_threshold_profile_read_qos_thresholds_profile_queue_wred_non_resp_entry_by_id_v1(
        self,
        thresh_profil_ename: str = None,
        queue_num: str = None,
    ) -> Response:
        """Get wred-non-resp-entry by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName
            queue_num (str, optional): queueNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}/queue/{queue_num}/wred-non-resp-entry"

        return await self.get(url)

    async def qos_threshold_profile_create_qos_thresholds_profile_queue_wred_entry_by_id_v1(
        self,
        thresh_profil_ename: str = None,
        queue_num: str = None,
    ) -> Response:
        """Create wred-entry by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName
            queue_num (str, optional): queueNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}/queue/{queue_num}/wred-entry"

        return await self.post(url)

    async def qos_threshold_profile_read_qos_thresholds_profile_queue_wred_entry_by_id_v1(
        self,
        thresh_profil_ename: str = None,
        queue_num: str = None,
    ) -> Response:
        """Get wred-entry by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName
            queue_num (str, optional): queueNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}/queue/{queue_num}/wred-entry"

        return await self.get(url)

    async def qos_threshold_profile_create_qos_thresholds_profile_queue_wred_resp_entry_by_id_v1(
        self,
        thresh_profil_ename: str = None,
        queue_num: str = None,
    ) -> Response:
        """Create wred-resp-entry by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName
            queue_num (str, optional): queueNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}/queue/{queue_num}/wred-resp-entry"

        return await self.post(url)

    async def qos_threshold_profile_read_qos_thresholds_profile_queue_wred_resp_entry_by_id_v1(
        self,
        thresh_profil_ename: str = None,
        queue_num: str = None,
    ) -> Response:
        """Get wred-resp-entry by ID.

        Args:
            thresh_profil_ename (str, optional): threshProfileName
            queue_num (str, optional): queueNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-thresholds/{thresh_profil_ename}/queue/{queue_num}/wred-resp-entry"

        return await self.get(url)

    async def qos_tos_create_qos_type_of_services_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create qos-type-of-services by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): QoS type of service Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): QoS type of service Profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-type-of-services"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def qos_tos_read_qos_type_of_services_v1(
        self,
    ) -> Response:
        """Get qos-type-of-services.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-type-of-services"

        return await self.get(url)

    async def qos_tos_create_qos_type_of_services_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-type-of-services/{name}"

        return await self.post(url)

    async def qos_tos_read_qos_type_of_services_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-type-of-services/{name}"

        return await self.get(url)

    async def qos_tos_delete_qos_type_of_services_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-type-of-services/{name}"

        return await self.delete(url)

    async def qos_tos_create_qos_type_of_services_profile_diff_services_by_id_v1(
        self,
        name: str = None,
        diff_servic_enum: str = None,
    ) -> Response:
        """Create diff-services by ID.

        Args:
            name (str, optional): name
            diff_servic_enum (str, optional): diffServiceNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-type-of-services/{name}/diff-services/{diff_servic_enum}"

        return await self.post(url)

    async def qos_tos_read_qos_type_of_services_profile_diff_services_by_id_v1(
        self,
        name: str = None,
        diff_servic_enum: str = None,
    ) -> Response:
        """Get diff-services by ID.

        Args:
            name (str, optional): name
            diff_servic_enum (str, optional): diffServiceNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-type-of-services/{name}/diff-services/{diff_servic_enum}"

        return await self.get(url)

    async def qos_tos_delete_qos_type_of_services_profile_diff_services_by_id_v1(
        self,
        name: str = None,
        diff_servic_enum: str = None,
    ) -> Response:
        """Delete diff-services by ID.

        Args:
            name (str, optional): name
            diff_servic_enum (str, optional): diffServiceNum

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-type-of-services/{name}/diff-services/{diff_servic_enum}"

        return await self.delete(url)

    async def qos_traffic_template_create_qos_traffic_templates_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create qos-traffic-templates by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): QoS traffic template Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): QoS traffic template Profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-traffic-templates"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def qos_traffic_template_read_qos_traffic_templates_v1(
        self,
    ) -> Response:
        """Get qos-traffic-templates.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/qos-traffic-templates"

        return await self.get(url)

    async def qos_traffic_template_create_qos_traffic_templates_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-traffic-templates/{name}"

        return await self.post(url)

    async def qos_traffic_template_read_qos_traffic_templates_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-traffic-templates/{name}"

        return await self.get(url)

    async def qos_traffic_template_delete_qos_traffic_templates_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-traffic-templates/{name}"

        return await self.delete(url)

    async def qos_traffic_template_create_qos_traffic_templates_profile_map_traffic_by_id_v1(
        self,
        name: str = None,
        queue: str = None,
    ) -> Response:
        """Create map-traffic by ID.

        Args:
            name (str, optional): name
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-traffic-templates/{name}/map-traffic/{queue}"

        return await self.post(url)

    async def qos_traffic_template_read_qos_traffic_templates_profile_map_traffic_by_id_v1(
        self,
        name: str = None,
        queue: str = None,
    ) -> Response:
        """Get map-traffic by ID.

        Args:
            name (str, optional): name
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-traffic-templates/{name}/map-traffic/{queue}"

        return await self.get(url)

    async def qos_traffic_template_delete_qos_traffic_templates_profile_map_traffic_by_id_v1(
        self,
        name: str = None,
        queue: str = None,
    ) -> Response:
        """Delete map-traffic by ID.

        Args:
            name (str, optional): name
            queue (str, optional): queue

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/qos-traffic-templates/{name}/map-traffic/{queue}"

        return await self.delete(url)

    async def qos_create_global_qos_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        l4_qos_name: str = None,
        description: str = None,
        tcp_ports: list = None,
        udp_ports: list = None,
        trust: str = None,
        q_profile: str = None,
        sched_profile: str = None,
    ) -> Response:
        """Create global-qos by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): QoS tcp or udp port Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            l4_qos_name (str): QoS tcp or udp port profile name.
            description (str): QoS tcp or udp port profile description.
            tcp_ports (list): TCP port-based priority.
            udp_ports (list): UDP port-based priority.
            trust (str): Global QoS Trust Mode Configuration.  Valid Values: DEVICE_ARUBA_AP,
                DEVICE_NONE, DEFAULT, DOT1P, DSCP, DSCP_WITH_REMARK, IP_PRECEDENCE, NONE,
                NONE_WITH_REMARK
            q_profile (str): Queue profile to apply.
            sched_profile (str): Schedule profile to apply.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/global-qos"

        json_data = {
            'l4_qos_name': l4_qos_name,
            'description': description,
            'tcp_ports': tcp_ports,
            'udp_ports': udp_ports,
            'trust': trust,
            'q_profile': q_profile,
            'sched_profile': sched_profile
        }

        return await self.post(url, json_data=json_data)

    async def qos_read_global_qos_v1(
        self,
    ) -> Response:
        """Get global-qos.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/global-qos"

        return await self.get(url)

    async def qos_create_global_qos_profile_by_id_v1(
        self,
        l4_qo_sname: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            l4_qo_sname (str, optional): l4QosName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/global-qos/{l4_qo_sname}"

        return await self.post(url)

    async def qos_read_global_qos_profile_by_id_v1(
        self,
        l4_qo_sname: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            l4_qo_sname (str, optional): l4QosName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/global-qos/{l4_qo_sname}"

        return await self.get(url)

    async def qos_delete_global_qos_profile_by_id_v1(
        self,
        l4_qo_sname: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            l4_qo_sname (str, optional): l4QosName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/global-qos/{l4_qo_sname}"

        return await self.delete(url)

    async def qos_create_global_qos_profile_tcp_ports_by_id_v1(
        self,
        l4_qo_sname: str = None,
        ip_service: str = None,
    ) -> Response:
        """Create tcp-ports by ID.

        Args:
            l4_qo_sname (str, optional): l4QosName
            ip_service (str, optional): ipService

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/global-qos/{l4_qo_sname}/tcp-ports/{ip_service}"

        return await self.post(url)

    async def qos_read_global_qos_profile_tcp_ports_by_id_v1(
        self,
        l4_qo_sname: str = None,
        ip_service: str = None,
    ) -> Response:
        """Get tcp-ports by ID.

        Args:
            l4_qo_sname (str, optional): l4QosName
            ip_service (str, optional): ipService

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/global-qos/{l4_qo_sname}/tcp-ports/{ip_service}"

        return await self.get(url)

    async def qos_delete_global_qos_profile_tcp_ports_by_id_v1(
        self,
        l4_qo_sname: str = None,
        ip_service: str = None,
    ) -> Response:
        """Delete tcp-ports by ID.

        Args:
            l4_qo_sname (str, optional): l4QosName
            ip_service (str, optional): ipService

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/global-qos/{l4_qo_sname}/tcp-ports/{ip_service}"

        return await self.delete(url)

    async def qos_create_global_qos_profile_udp_ports_by_id_v1(
        self,
        l4_qo_sname: str = None,
        ip_service: str = None,
    ) -> Response:
        """Create udp-ports by ID.

        Args:
            l4_qo_sname (str, optional): l4QosName
            ip_service (str, optional): ipService

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/global-qos/{l4_qo_sname}/udp-ports/{ip_service}"

        return await self.post(url)

    async def qos_read_global_qos_profile_udp_ports_by_id_v1(
        self,
        l4_qo_sname: str = None,
        ip_service: str = None,
    ) -> Response:
        """Get udp-ports by ID.

        Args:
            l4_qo_sname (str, optional): l4QosName
            ip_service (str, optional): ipService

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/global-qos/{l4_qo_sname}/udp-ports/{ip_service}"

        return await self.get(url)

    async def qos_delete_global_qos_profile_udp_ports_by_id_v1(
        self,
        l4_qo_sname: str = None,
        ip_service: str = None,
    ) -> Response:
        """Delete udp-ports by ID.

        Args:
            l4_qo_sname (str, optional): l4QosName
            ip_service (str, optional): ipService

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/global-qos/{l4_qo_sname}/udp-ports/{ip_service}"

        return await self.delete(url)

    async def radio_create_radios_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        radio: list = None,
    ) -> Response:
        """Create radios by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of Radio profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Radio profile name.
            description (str): Radio profile description.
            radio (list): List of radios

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/radios"

        json_data = {
            'name': name,
            'description': description,
            'radio': radio
        }

        return await self.post(url, json_data=json_data)

    async def radio_read_radios_v1(
        self,
    ) -> Response:
        """Get radios.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/radios"

        return await self.get(url)

    async def radio_create_radios_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}"

        return await self.post(url)

    async def radio_read_radios_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}"

        return await self.get(url)

    async def radio_delete_radios_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}"

        return await self.delete(url)

    async def radio_create_radios_profile_radio_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Create radio by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}"

        return await self.post(url)

    async def radio_read_radios_profile_radio_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Get radio by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}"

        return await self.get(url)

    async def radio_delete_radios_profile_radio_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Delete radio by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}"

        return await self.delete(url)

    async def radio_create_radios_profile_radio_basic_rates_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Create basic-rates by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}/basic-rates"

        return await self.post(url)

    async def radio_read_radios_profile_radio_basic_rates_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Get basic-rates by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}/basic-rates"

        return await self.get(url)

    async def radio_delete_radios_profile_radio_basic_rates_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Delete basic-rates by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}/basic-rates"

        return await self.delete(url)

    async def radio_create_radios_profile_radio_tx_rates_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Create tx-rates by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}/tx-rates"

        return await self.post(url)

    async def radio_read_radios_profile_radio_tx_rates_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Get tx-rates by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}/tx-rates"

        return await self.get(url)

    async def radio_delete_radios_profile_radio_tx_rates_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Delete tx-rates by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}/tx-rates"

        return await self.delete(url)

    async def radio_create_radios_profile_radio_very_high_throughput_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Create very-high-throughput by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}/very-high-throughput"

        return await self.post(url)

    async def radio_read_radios_profile_radio_very_high_throughput_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Get very-high-throughput by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}/very-high-throughput"

        return await self.get(url)

    async def radio_create_radios_profile_radio_high_efficiency_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Create high-efficiency by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}/high-efficiency"

        return await self.post(url)

    async def radio_read_radios_profile_radio_high_efficiency_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Get high-efficiency by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}/high-efficiency"

        return await self.get(url)

    async def radio_create_radios_profile_radio_arm_control_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Create arm-control by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}/arm-control"

        return await self.post(url)

    async def radio_read_radios_profile_radio_arm_control_by_id_v1(
        self,
        name: str = None,
        profile: str = None,
    ) -> Response:
        """Get arm-control by ID.

        Args:
            name (str, optional): name
            profile (str, optional): profile

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radios/{name}/radio/{profile}/arm-control"

        return await self.get(url)

    async def radius_modifiers_create_radius_attributes_modifier_config_by_id_v1(
        self,
        radius_modifier: list,
        description: str,
        name: str,
        attribute_id: int,
        type: str,
        vendor_name: str,
        vendor_id: int,
    ) -> Response:
        """Create radius-attributes-modifier-config by ID.

        Args:
            radius_modifier (list): RADIUS Modifier Profile.
            description (str): Profile description.
            name (str): Attribute name
            attribute_id (int): Attribute id.
            type (str): AAA attribute type.  Valid Values: DATE, INTEGER, IPADDR, STRING, TUNNEL_ID,
                FRAMED_IP, NAS_ID, NAS_IP_ADDR, VSA
            vendor_name (str): Vendor name.
            vendor_id (int): Vendor ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/radius-attributes-modifier-config"

        json_data = {
            'radius_modifier': radius_modifier,
            'description': description,
            'name': name,
            'attribute_id': attribute_id,
            'type': type,
            'vendor_name': vendor_name,
            'vendor_id': vendor_id
        }

        return await self.post(url, json_data=json_data)

    async def radius_modifiers_read_radius_attributes_modifier_config_v1(
        self,
    ) -> Response:
        """Get radius-attributes-modifier-config.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/radius-attributes-modifier-config"

        return await self.get(url)

    async def radius_modifiers_create_radius_attributes_modifier_config_radius_modifiers_by_id_v1(
        self,
        name: str,
        exclude: list,
        include: list,
    ) -> Response:
        """Create radius-modifiers by ID.

        Args:
            name (str): The name of the RADIUS Modifier.
            exclude (list): List of attributes to exclude.
            include (list): List of attributes to include.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/radius-attributes-modifier-config/radius-modifiers"

        json_data = {
            'name': name,
            'exclude': exclude,
            'include': include
        }

        return await self.post(url, json_data=json_data)

    async def radius_modifiers_read_radius_attributes_modifier_config_radius_modifiers_v1(
        self,
    ) -> Response:
        """Get radius-modifiers.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/radius-attributes-modifier-config/radius-modifiers"

        return await self.get(url)

    async def radius_modifiers_create_radius_attributes_modifier_config_radius_modifiers_radius_modifier_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create radius-modifier by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radius-attributes-modifier-config/radius-modifiers/radius-modifier/{name}"

        return await self.post(url)

    async def radius_modifiers_read_radius_attributes_modifier_config_radius_modifiers_radius_modifier_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get radius-modifier by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radius-attributes-modifier-config/radius-modifiers/radius-modifier/{name}"

        return await self.get(url)

    async def radius_modifiers_delete_radius_attributes_modifier_config_radius_modifiers_radius_modifier_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete radius-modifier by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radius-attributes-modifier-config/radius-modifiers/radius-modifier/{name}"

        return await self.delete(url)

    async def radius_modifiers_create_radius_attributes_modifier_config_radius_modifiers_radius_modifier_exclude_by_id_v1(
        self,
        name: str = None,
        exc_name: str = None,
    ) -> Response:
        """Create exclude by ID.

        Args:
            name (str, optional): name
            exc_name (str, optional): excName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radius-attributes-modifier-config/radius-modifiers/radius-modifier/{name}/exclude/{exc_name}"

        return await self.post(url)

    async def radius_modifiers_read_radius_attributes_modifier_config_radius_modifiers_radius_modifier_exclude_by_id_v1(
        self,
        name: str = None,
        exc_name: str = None,
    ) -> Response:
        """Get exclude by ID.

        Args:
            name (str, optional): name
            exc_name (str, optional): excName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radius-attributes-modifier-config/radius-modifiers/radius-modifier/{name}/exclude/{exc_name}"

        return await self.get(url)

    async def radius_modifiers_delete_radius_attributes_modifier_config_radius_modifiers_radius_modifier_exclude_by_id_v1(
        self,
        name: str = None,
        exc_name: str = None,
    ) -> Response:
        """Delete exclude by ID.

        Args:
            name (str, optional): name
            exc_name (str, optional): excName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radius-attributes-modifier-config/radius-modifiers/radius-modifier/{name}/exclude/{exc_name}"

        return await self.delete(url)

    async def radius_modifiers_create_radius_attributes_modifier_config_radius_modifiers_radius_modifier_include_by_id_v1(
        self,
        name: str = None,
        inc_name: str = None,
    ) -> Response:
        """Create include by ID.

        Args:
            name (str, optional): name
            inc_name (str, optional): incName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radius-attributes-modifier-config/radius-modifiers/radius-modifier/{name}/include/{inc_name}"

        return await self.post(url)

    async def radius_modifiers_read_radius_attributes_modifier_config_radius_modifiers_radius_modifier_include_by_id_v1(
        self,
        name: str = None,
        inc_name: str = None,
    ) -> Response:
        """Get include by ID.

        Args:
            name (str, optional): name
            inc_name (str, optional): incName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radius-attributes-modifier-config/radius-modifiers/radius-modifier/{name}/include/{inc_name}"

        return await self.get(url)

    async def radius_modifiers_delete_radius_attributes_modifier_config_radius_modifiers_radius_modifier_include_by_id_v1(
        self,
        name: str = None,
        inc_name: str = None,
    ) -> Response:
        """Delete include by ID.

        Args:
            name (str, optional): name
            inc_name (str, optional): incName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radius-attributes-modifier-config/radius-modifiers/radius-modifier/{name}/include/{inc_name}"

        return await self.delete(url)

    async def radius_modifiers_create_radius_attributes_modifier_config_attribute_add_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create attribute-add by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radius-attributes-modifier-config/attribute-add/{name}"

        return await self.post(url)

    async def radius_modifiers_read_radius_attributes_modifier_config_attribute_add_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get attribute-add by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radius-attributes-modifier-config/attribute-add/{name}"

        return await self.get(url)

    async def radius_modifiers_delete_radius_attributes_modifier_config_attribute_add_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete attribute-add by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/radius-attributes-modifier-config/attribute-add/{name}"

        return await self.delete(url)

    async def remote_management_create_remote_management_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        activate_enable: bool = None,
        activate_force_provision: bool = None,
        central_enable: bool = None,
        central_custom_ca: str = None,
        central_location: str = None,
        central_location_vrf: str = None,
        central_alternative_location: str = None,
        central_alternative_location_vrf: str = None,
    ) -> Response:
        """Create remote-management by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Remote management profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Remote management profile name.
            description (str): Remote management profile description.
            enable (bool): Limits the device configuration interfaces when it is remotely
                managed by Central.
            activate_enable (bool): Enable the communication between the device and Activate.
            activate_force_provision (bool): Override default configuration check to initiate
                Activate                                              provision service.
            central_enable (bool): Enable the connection to Aruba Central.
            central_custom_ca (str): Trusted CA Custom Certificate used to connect with Aruba
                Central
            central_location (str): Aruba Central location. Accepts FQDN or IP address.
            central_location_vrf (str): VRF to connect Aruba Central.
            central_alternative_location (str): Aruba Central alternative location for CoP High
                Availability. Accepts FQDN or IP address.
            central_alternative_location_vrf (str): VRF to connect to Aruba Central when using the
                alternative                                                     location.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/remote-management"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'activate_enable': activate_enable,
            'activate_force_provision': activate_force_provision,
            'central_enable': central_enable,
            'central_custom_ca': central_custom_ca,
            'central_location': central_location,
            'central_location_vrf': central_location_vrf,
            'central_alternative_location': central_alternative_location,
            'central_alternative_location_vrf': central_alternative_location_vrf
        }

        return await self.post(url, json_data=json_data)

    async def remote_management_read_remote_management_v1(
        self,
    ) -> Response:
        """Get remote-management.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/remote-management"

        return await self.get(url)

    async def remote_management_create_remote_management_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/remote-management/{name}"

        return await self.post(url)

    async def remote_management_read_remote_management_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/remote-management/{name}"

        return await self.get(url)

    async def remote_management_delete_remote_management_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/remote-management/{name}"

        return await self.delete(url)

    async def rip_create_rip_by_id_v1(
        self,
        router: list,
    ) -> Response:
        """Create rip by ID.

        Args:
            router (list): The list of all the RIP Router instances.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/rip"

        json_data = {
            'router': router
        }

        return await self.post(url, json_data=json_data)

    async def rip_read_rip_v1(
        self,
    ) -> Response:
        """Get rip.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/rip"

        return await self.get(url)

    async def rip_create_rip_router_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
    ) -> Response:
        """Create router by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}"

        return await self.post(url)

    async def rip_read_rip_router_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
    ) -> Response:
        """Get router by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}"

        return await self.get(url)

    async def rip_delete_rip_router_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
    ) -> Response:
        """Delete router by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}"

        return await self.delete(url)

    async def rip_create_rip_router_restrict_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
    ) -> Response:
        """Create restrict by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/restrict"

        return await self.post(url)

    async def rip_read_rip_router_restrict_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
    ) -> Response:
        """Get restrict by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/restrict"

        return await self.get(url)

    async def rip_delete_rip_router_restrict_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
    ) -> Response:
        """Delete restrict by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/restrict"

        return await self.delete(url)

    async def rip_create_rip_router_redistribute_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        redistribute_id: str = None,
    ) -> Response:
        """Create redistribute by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            redistribute_id (str, optional): redistributeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/redistribute/{redistribute_id}"

        return await self.post(url)

    async def rip_read_rip_router_redistribute_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        redistribute_id: str = None,
    ) -> Response:
        """Get redistribute by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            redistribute_id (str, optional): redistributeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/redistribute/{redistribute_id}"

        return await self.get(url)

    async def rip_delete_rip_router_redistribute_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        redistribute_id: str = None,
    ) -> Response:
        """Delete redistribute by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            redistribute_id (str, optional): redistributeId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/redistribute/{redistribute_id}"

        return await self.delete(url)

    async def rip_create_rip_router_timers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
    ) -> Response:
        """Create timers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/timers"

        return await self.post(url)

    async def rip_read_rip_router_timers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
    ) -> Response:
        """Get timers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/timers"

        return await self.get(url)

    async def rip_create_rip_router_ether_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        interface_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create ether-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            interface_name (str, optional): interfaceName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/ether-interfaces/{interface_name}/{address_family}"

        return await self.post(url)

    async def rip_read_rip_router_ether_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        interface_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get ether-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            interface_name (str, optional): interfaceName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/ether-interfaces/{interface_name}/{address_family}"

        return await self.get(url)

    async def rip_delete_rip_router_ether_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        interface_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete ether-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            interface_name (str, optional): interfaceName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/ether-interfaces/{interface_name}/{address_family}"

        return await self.delete(url)

    async def rip_create_rip_router_ether_interfaces_timers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        interface_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create timers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            interface_name (str, optional): interfaceName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/ether-interfaces/{interface_name}/{address_family}/timers"

        return await self.post(url)

    async def rip_read_rip_router_ether_interfaces_timers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        interface_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get timers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            interface_name (str, optional): interfaceName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/ether-interfaces/{interface_name}/{address_family}/timers"

        return await self.get(url)

    async def rip_create_rip_router_ether_interfaces_authentication_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        interface_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create authentication by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            interface_name (str, optional): interfaceName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/ether-interfaces/{interface_name}/{address_family}/authentication"

        return await self.post(url)

    async def rip_read_rip_router_ether_interfaces_authentication_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        interface_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get authentication by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            interface_name (str, optional): interfaceName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/ether-interfaces/{interface_name}/{address_family}/authentication"

        return await self.get(url)

    async def rip_create_rip_router_lag_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        lag_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create lag-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            lag_name (str, optional): lagName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/lag-interfaces/{lag_name}/{address_family}"

        return await self.post(url)

    async def rip_read_rip_router_lag_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        lag_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get lag-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            lag_name (str, optional): lagName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/lag-interfaces/{lag_name}/{address_family}"

        return await self.get(url)

    async def rip_delete_rip_router_lag_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        lag_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete lag-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            lag_name (str, optional): lagName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/lag-interfaces/{lag_name}/{address_family}"

        return await self.delete(url)

    async def rip_create_rip_router_lag_interfaces_timers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        lag_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create timers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            lag_name (str, optional): lagName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/lag-interfaces/{lag_name}/{address_family}/timers"

        return await self.post(url)

    async def rip_read_rip_router_lag_interfaces_timers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        lag_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get timers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            lag_name (str, optional): lagName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/lag-interfaces/{lag_name}/{address_family}/timers"

        return await self.get(url)

    async def rip_create_rip_router_lag_interfaces_authentication_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        lag_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create authentication by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            lag_name (str, optional): lagName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/lag-interfaces/{lag_name}/{address_family}/authentication"

        return await self.post(url)

    async def rip_read_rip_router_lag_interfaces_authentication_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        lag_name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get authentication by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            lag_name (str, optional): lagName
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/lag-interfaces/{lag_name}/{address_family}/authentication"

        return await self.get(url)

    async def rip_create_rip_router_svi_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        svi_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Create svi-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            svi_id (str, optional): sviId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/svi-interfaces/{svi_id}/{address_family}"

        return await self.post(url)

    async def rip_read_rip_router_svi_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        svi_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Get svi-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            svi_id (str, optional): sviId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/svi-interfaces/{svi_id}/{address_family}"

        return await self.get(url)

    async def rip_delete_rip_router_svi_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        svi_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete svi-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            svi_id (str, optional): sviId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/svi-interfaces/{svi_id}/{address_family}"

        return await self.delete(url)

    async def rip_create_rip_router_svi_interfaces_timers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        svi_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Create timers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            svi_id (str, optional): sviId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/svi-interfaces/{svi_id}/{address_family}/timers"

        return await self.post(url)

    async def rip_read_rip_router_svi_interfaces_timers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        svi_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Get timers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            svi_id (str, optional): sviId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/svi-interfaces/{svi_id}/{address_family}/timers"

        return await self.get(url)

    async def rip_create_rip_router_svi_interfaces_authentication_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        svi_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Create authentication by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            svi_id (str, optional): sviId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/svi-interfaces/{svi_id}/{address_family}/authentication"

        return await self.post(url)

    async def rip_read_rip_router_svi_interfaces_authentication_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        svi_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Get authentication by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            svi_id (str, optional): sviId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/svi-interfaces/{svi_id}/{address_family}/authentication"

        return await self.get(url)

    async def rip_create_rip_router_loopback_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        loopback_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Create loopback-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            loopback_id (str, optional): loopbackId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/loopback-interfaces/{loopback_id}/{address_family}"

        return await self.post(url)

    async def rip_read_rip_router_loopback_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        loopback_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Get loopback-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            loopback_id (str, optional): loopbackId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/loopback-interfaces/{loopback_id}/{address_family}"

        return await self.get(url)

    async def rip_delete_rip_router_loopback_interfaces_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        loopback_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete loopback-interfaces by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            loopback_id (str, optional): loopbackId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/loopback-interfaces/{loopback_id}/{address_family}"

        return await self.delete(url)

    async def rip_create_rip_router_loopback_interfaces_timers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        loopback_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Create timers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            loopback_id (str, optional): loopbackId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/loopback-interfaces/{loopback_id}/{address_family}/timers"

        return await self.post(url)

    async def rip_read_rip_router_loopback_interfaces_timers_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        loopback_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Get timers by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            loopback_id (str, optional): loopbackId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/loopback-interfaces/{loopback_id}/{address_family}/timers"

        return await self.get(url)

    async def rip_create_rip_router_loopback_interfaces_authentication_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        loopback_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Create authentication by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            loopback_id (str, optional): loopbackId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/loopback-interfaces/{loopback_id}/{address_family}/authentication"

        return await self.post(url)

    async def rip_read_rip_router_loopback_interfaces_authentication_by_id_v1(
        self,
        instance_tag: str = None,
        vrf: str = None,
        proto_type: str = None,
        loopback_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Get authentication by ID.

        Args:
            instance_tag (str, optional): instanceTag
            vrf (str, optional): vrf
            proto_type (str, optional): protoType
            loopback_id (str, optional): loopbackId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rip/{instance_tag}/{vrf}/{proto_type}/loopback-interfaces/{loopback_id}/{address_family}/authentication"

        return await self.get(url)

    async def rmon_alarm_create_rmon_alarms_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        rmon: list = None,
    ) -> Response:
        """Create rmon-alarms by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): RMON alarm parameters.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): RMON alarm profile name.
            description (str): RMON alarm profile description.
            rmon (list): RMON alarm parameters.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/rmon-alarms"

        json_data = {
            'name': name,
            'description': description,
            'rmon': rmon
        }

        return await self.post(url, json_data=json_data)

    async def rmon_alarm_read_rmon_alarms_v1(
        self,
    ) -> Response:
        """Get rmon-alarms.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/rmon-alarms"

        return await self.get(url)

    async def rmon_alarm_create_rmon_alarms_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rmon-alarms/{name}"

        return await self.post(url)

    async def rmon_alarm_read_rmon_alarms_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rmon-alarms/{name}"

        return await self.get(url)

    async def rmon_alarm_delete_rmon_alarms_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rmon-alarms/{name}"

        return await self.delete(url)

    async def rmon_alarm_create_rmon_alarms_profile_rmon_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Create rmon by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rmon-alarms/{name}/rmon/{index}"

        return await self.post(url)

    async def rmon_alarm_read_rmon_alarms_profile_rmon_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Get rmon by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rmon-alarms/{name}/rmon/{index}"

        return await self.get(url)

    async def rmon_alarm_delete_rmon_alarms_profile_rmon_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Delete rmon by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/rmon-alarms/{name}/rmon/{index}"

        return await self.delete(url)

    async def role_gpid_create_role_gpids_by_id_v1(
        self,
        name: str,
        gpid: int,
        description: str,
    ) -> Response:
        """Create role-gpids by ID.

        Args:
            name (str): Role name.
            gpid (int): Role Group Policy ID.
            description (str): Description for the Role and GPID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/role-gpids"

        json_data = {
            'name': name,
            'gpid': gpid,
            'description': description
        }

        return await self.post(url, json_data=json_data)

    async def role_gpid_read_role_gpids_v1(
        self,
    ) -> Response:
        """Get role-gpids.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/role-gpids"

        return await self.get(url)

    async def role_gpid_create_role_gpids_role_gpid_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create role-gpid by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/role-gpids/{name}"

        return await self.post(url)

    async def role_gpid_read_role_gpids_role_gpid_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get role-gpid by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/role-gpids/{name}"

        return await self.get(url)

    async def role_gpid_delete_role_gpids_role_gpid_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete role-gpid by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/role-gpids/{name}"

        return await self.delete(url)

    async def role_status_read_role_summary_v1(
        self,
    ) -> Response:
        """Get role-summary.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/role-summary"

        return await self.get(url)

    async def role_status_read_role_summary_role_status_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get role-status by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/role-summary/{name}"

        return await self.get(url)

    async def role_status_read_role_summary_role_status_scopes_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get scopes by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/role-summary/{name}/scopes"

        return await self.get(url)

    async def role_status_read_role_summary_role_status_personas_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get personas by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/role-summary/{name}/personas"

        return await self.get(url)

    async def role_create_roles_by_id_v1(
        self,
        role: list,
    ) -> Response:
        """Create roles by ID.

        Args:
            role (list): List of Roles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/roles"

        json_data = {
            'role': role
        }

        return await self.post(url, json_data=json_data)

    async def role_read_roles_v1(
        self,
    ) -> Response:
        """Get roles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/roles"

        return await self.get(url)

    async def role_create_roles_role_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create role by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}"

        return await self.post(url)

    async def role_read_roles_role_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get role by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}"

        return await self.get(url)

    async def role_delete_roles_role_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete role by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}"

        return await self.delete(url)

    async def role_create_roles_role_policies_by_id_v1(
        self,
        name: str = None,
        policies_name: str = None,
    ) -> Response:
        """Create policies by ID.

        Args:
            name (str, optional): name
            policies_name (str, optional): policies_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/policies/{policies_name}"

        return await self.post(url)

    async def role_read_roles_role_policies_by_id_v1(
        self,
        name: str = None,
        policies_name: str = None,
    ) -> Response:
        """Get policies by ID.

        Args:
            name (str, optional): name
            policies_name (str, optional): policies_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/policies/{policies_name}"

        return await self.get(url)

    async def role_delete_roles_role_policies_by_id_v1(
        self,
        name: str = None,
        policies_name: str = None,
    ) -> Response:
        """Delete policies by ID.

        Args:
            name (str, optional): name
            policies_name (str, optional): policies_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/policies/{policies_name}"

        return await self.delete(url)

    async def role_create_roles_role_airslice_application_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create airslice-application-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/airslice-application-list"

        return await self.post(url)

    async def role_read_roles_role_airslice_application_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get airslice-application-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/airslice-application-list"

        return await self.get(url)

    async def role_delete_roles_role_airslice_application_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete airslice-application-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/airslice-application-list"

        return await self.delete(url)

    async def role_create_roles_role_monitoring_application_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create monitoring-application-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/monitoring-application-list"

        return await self.post(url)

    async def role_read_roles_role_monitoring_application_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get monitoring-application-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/monitoring-application-list"

        return await self.get(url)

    async def role_delete_roles_role_monitoring_application_list_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete monitoring-application-list by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/monitoring-application-list"

        return await self.delete(url)

    async def role_create_roles_role_session_parameters_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create session-parameters by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/session-parameters"

        return await self.post(url)

    async def role_read_roles_role_session_parameters_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get session-parameters by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/session-parameters"

        return await self.get(url)

    async def role_create_roles_role_vlan_parameters_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create vlan-parameters by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/vlan-parameters"

        return await self.post(url)

    async def role_read_roles_role_vlan_parameters_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get vlan-parameters by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/vlan-parameters"

        return await self.get(url)

    async def role_create_roles_role_vlan_parameters_trunk_allowed_vlan_names_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create trunk-allowed-vlan-names by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/vlan-parameters/trunk-allowed-vlan-names"

        return await self.post(url)

    async def role_read_roles_role_vlan_parameters_trunk_allowed_vlan_names_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get trunk-allowed-vlan-names by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/vlan-parameters/trunk-allowed-vlan-names"

        return await self.get(url)

    async def role_delete_roles_role_vlan_parameters_trunk_allowed_vlan_names_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete trunk-allowed-vlan-names by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/vlan-parameters/trunk-allowed-vlan-names"

        return await self.delete(url)

    async def role_create_roles_role_qos_parameters_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create qos-parameters by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/qos-parameters"

        return await self.post(url)

    async def role_read_roles_role_qos_parameters_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get qos-parameters by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/qos-parameters"

        return await self.get(url)

    async def role_create_roles_role_classification_parameters_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create classification-parameters by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/classification-parameters"

        return await self.post(url)

    async def role_read_roles_role_classification_parameters_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get classification-parameters by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/classification-parameters"

        return await self.get(url)

    async def role_create_roles_role_app_aaa_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create app-aaa-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/app-aaa-contract"

        return await self.post(url)

    async def role_read_roles_role_app_aaa_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get app-aaa-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/app-aaa-contract"

        return await self.get(url)

    async def role_create_roles_role_app_aaa_contract_app_by_id_v1(
        self,
        name: str = None,
        app_name: str = None,
        direction: str = None,
    ) -> Response:
        """Create app by ID.

        Args:
            name (str, optional): name
            app_name (str, optional): app_name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/app-aaa-contract/app/{app_name}/{direction}"

        return await self.post(url)

    async def role_read_roles_role_app_aaa_contract_app_by_id_v1(
        self,
        name: str = None,
        app_name: str = None,
        direction: str = None,
    ) -> Response:
        """Get app by ID.

        Args:
            name (str, optional): name
            app_name (str, optional): app_name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/app-aaa-contract/app/{app_name}/{direction}"

        return await self.get(url)

    async def role_delete_roles_role_app_aaa_contract_app_by_id_v1(
        self,
        name: str = None,
        app_name: str = None,
        direction: str = None,
    ) -> Response:
        """Delete app by ID.

        Args:
            name (str, optional): name
            app_name (str, optional): app_name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/app-aaa-contract/app/{app_name}/{direction}"

        return await self.delete(url)

    async def role_create_roles_role_app_category_aaa_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create app-category-aaa-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/app-category-aaa-contract"

        return await self.post(url)

    async def role_read_roles_role_app_category_aaa_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get app-category-aaa-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/app-category-aaa-contract"

        return await self.get(url)

    async def role_create_roles_role_app_category_aaa_contract_app_category_by_id_v1(
        self,
        name: str = None,
        app_category_name: str = None,
        direction: str = None,
    ) -> Response:
        """Create app-category by ID.

        Args:
            name (str, optional): name
            app_category_name (str, optional): app-category_name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/app-category-aaa-contract/app-category/{app_category_name}/{direction}"

        return await self.post(url)

    async def role_read_roles_role_app_category_aaa_contract_app_category_by_id_v1(
        self,
        name: str = None,
        app_category_name: str = None,
        direction: str = None,
    ) -> Response:
        """Get app-category by ID.

        Args:
            name (str, optional): name
            app_category_name (str, optional): app-category_name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/app-category-aaa-contract/app-category/{app_category_name}/{direction}"

        return await self.get(url)

    async def role_delete_roles_role_app_category_aaa_contract_app_category_by_id_v1(
        self,
        name: str = None,
        app_category_name: str = None,
        direction: str = None,
    ) -> Response:
        """Delete app-category by ID.

        Args:
            name (str, optional): name
            app_category_name (str, optional): app-category_name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/app-category-aaa-contract/app-category/{app_category_name}/{direction}"

        return await self.delete(url)

    async def role_create_roles_role_web_category_aaa_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create web-category-aaa-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/web-category-aaa-contract"

        return await self.post(url)

    async def role_read_roles_role_web_category_aaa_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get web-category-aaa-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/web-category-aaa-contract"

        return await self.get(url)

    async def role_create_roles_role_web_category_aaa_contract_web_category_by_id_v1(
        self,
        name: str = None,
        web_category_name: str = None,
        direction: str = None,
    ) -> Response:
        """Create web-category by ID.

        Args:
            name (str, optional): name
            web_category_name (str, optional): web-category_name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/web-category-aaa-contract/web-category/{web_category_name}/{direction}"

        return await self.post(url)

    async def role_read_roles_role_web_category_aaa_contract_web_category_by_id_v1(
        self,
        name: str = None,
        web_category_name: str = None,
        direction: str = None,
    ) -> Response:
        """Get web-category by ID.

        Args:
            name (str, optional): name
            web_category_name (str, optional): web-category_name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/web-category-aaa-contract/web-category/{web_category_name}/{direction}"

        return await self.get(url)

    async def role_delete_roles_role_web_category_aaa_contract_web_category_by_id_v1(
        self,
        name: str = None,
        web_category_name: str = None,
        direction: str = None,
    ) -> Response:
        """Delete web-category by ID.

        Args:
            name (str, optional): name
            web_category_name (str, optional): web-category_name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/web-category-aaa-contract/web-category/{web_category_name}/{direction}"

        return await self.delete(url)

    async def role_create_roles_role_web_reputation_aaa_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create web-reputation-aaa-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/web-reputation-aaa-contract"

        return await self.post(url)

    async def role_read_roles_role_web_reputation_aaa_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get web-reputation-aaa-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/web-reputation-aaa-contract"

        return await self.get(url)

    async def role_create_roles_role_web_reputation_aaa_contract_web_reputation_by_id_v1(
        self,
        name: str = None,
        web_reputation_name: str = None,
        direction: str = None,
    ) -> Response:
        """Create web-reputation by ID.

        Args:
            name (str, optional): name
            web_reputation_name (str, optional): web-reputation_name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/web-reputation-aaa-contract/web-reputation/{web_reputation_name}/{direction}"

        return await self.post(url)

    async def role_read_roles_role_web_reputation_aaa_contract_web_reputation_by_id_v1(
        self,
        name: str = None,
        web_reputation_name: str = None,
        direction: str = None,
    ) -> Response:
        """Get web-reputation by ID.

        Args:
            name (str, optional): name
            web_reputation_name (str, optional): web-reputation_name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/web-reputation-aaa-contract/web-reputation/{web_reputation_name}/{direction}"

        return await self.get(url)

    async def role_delete_roles_role_web_reputation_aaa_contract_web_reputation_by_id_v1(
        self,
        name: str = None,
        web_reputation_name: str = None,
        direction: str = None,
    ) -> Response:
        """Delete web-reputation by ID.

        Args:
            name (str, optional): name
            web_reputation_name (str, optional): web-reputation_name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/web-reputation-aaa-contract/web-reputation/{web_reputation_name}/{direction}"

        return await self.delete(url)

    async def role_create_roles_role_exclude_app_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create exclude-app-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/exclude-app-contract"

        return await self.post(url)

    async def role_read_roles_role_exclude_app_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get exclude-app-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/exclude-app-contract"

        return await self.get(url)

    async def role_create_roles_role_exclude_app_contract_exclude_app_by_id_v1(
        self,
        name: str = None,
        exclude_ap_pname: str = None,
    ) -> Response:
        """Create exclude-app by ID.

        Args:
            name (str, optional): name
            exclude_ap_pname (str, optional): excludeAppName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/exclude-app-contract/exclude-app/{exclude_ap_pname}"

        return await self.post(url)

    async def role_read_roles_role_exclude_app_contract_exclude_app_by_id_v1(
        self,
        name: str = None,
        exclude_ap_pname: str = None,
    ) -> Response:
        """Get exclude-app by ID.

        Args:
            name (str, optional): name
            exclude_ap_pname (str, optional): excludeAppName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/exclude-app-contract/exclude-app/{exclude_ap_pname}"

        return await self.get(url)

    async def role_delete_roles_role_exclude_app_contract_exclude_app_by_id_v1(
        self,
        name: str = None,
        exclude_ap_pname: str = None,
    ) -> Response:
        """Delete exclude-app by ID.

        Args:
            name (str, optional): name
            exclude_ap_pname (str, optional): excludeAppName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/exclude-app-contract/exclude-app/{exclude_ap_pname}"

        return await self.delete(url)

    async def role_create_roles_role_exclude_app_cat_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create exclude-app-cat-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/exclude-app-cat-contract"

        return await self.post(url)

    async def role_read_roles_role_exclude_app_cat_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get exclude-app-cat-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/exclude-app-cat-contract"

        return await self.get(url)

    async def role_create_roles_role_exclude_app_cat_contract_exclude_app_category_by_id_v1(
        self,
        name: str = None,
        exclude_ap_pcatego_ryname: str = None,
    ) -> Response:
        """Create exclude-app-category by ID.

        Args:
            name (str, optional): name
            exclude_ap_pcatego_ryname (str, optional): excludeAppCategoryName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/exclude-app-cat-contract/exclude-app-category/{exclude_ap_pcatego_ryname}"

        return await self.post(url)

    async def role_read_roles_role_exclude_app_cat_contract_exclude_app_category_by_id_v1(
        self,
        name: str = None,
        exclude_ap_pcatego_ryname: str = None,
    ) -> Response:
        """Get exclude-app-category by ID.

        Args:
            name (str, optional): name
            exclude_ap_pcatego_ryname (str, optional): excludeAppCategoryName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/exclude-app-cat-contract/exclude-app-category/{exclude_ap_pcatego_ryname}"

        return await self.get(url)

    async def role_delete_roles_role_exclude_app_cat_contract_exclude_app_category_by_id_v1(
        self,
        name: str = None,
        exclude_ap_pcatego_ryname: str = None,
    ) -> Response:
        """Delete exclude-app-category by ID.

        Args:
            name (str, optional): name
            exclude_ap_pcatego_ryname (str, optional): excludeAppCategoryName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/exclude-app-cat-contract/exclude-app-category/{exclude_ap_pcatego_ryname}"

        return await self.delete(url)

    async def role_create_roles_role_aaa_bw_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create aaa-bw-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/aaa-bw-contract"

        return await self.post(url)

    async def role_read_roles_role_aaa_bw_contract_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get aaa-bw-contract by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/aaa-bw-contract"

        return await self.get(url)

    async def role_create_roles_role_aaa_bw_contract_bw_contract_by_id_v1(
        self,
        name: str = None,
        direction: str = None,
    ) -> Response:
        """Create bw-contract by ID.

        Args:
            name (str, optional): name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/aaa-bw-contract/bw-contract/{direction}"

        return await self.post(url)

    async def role_read_roles_role_aaa_bw_contract_bw_contract_by_id_v1(
        self,
        name: str = None,
        direction: str = None,
    ) -> Response:
        """Get bw-contract by ID.

        Args:
            name (str, optional): name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/aaa-bw-contract/bw-contract/{direction}"

        return await self.get(url)

    async def role_delete_roles_role_aaa_bw_contract_bw_contract_by_id_v1(
        self,
        name: str = None,
        direction: str = None,
    ) -> Response:
        """Delete bw-contract by ID.

        Args:
            name (str, optional): name
            direction (str, optional): direction

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/roles/{name}/aaa-bw-contract/bw-contract/{direction}"

        return await self.delete(url)

    async def routemap_create_route_maps_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create route-maps by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Routemap Profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): Routemap Profile

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/route-maps"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def routemap_read_route_maps_v1(
        self,
    ) -> Response:
        """Get route-maps.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/route-maps"

        return await self.get(url)

    async def routemap_create_route_maps_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}"

        return await self.post(url)

    async def routemap_read_route_maps_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}"

        return await self.get(url)

    async def routemap_delete_route_maps_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}"

        return await self.delete(url)

    async def routemap_create_route_maps_profile_route_map_by_id_v1(
        self,
        name: str = None,
        route_map_name: str = None,
    ) -> Response:
        """Create route-map by ID.

        Args:
            name (str, optional): name
            route_map_name (str, optional): route-map_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/route-map/{route_map_name}"

        return await self.post(url)

    async def routemap_read_route_maps_profile_route_map_by_id_v1(
        self,
        name: str = None,
        route_map_name: str = None,
    ) -> Response:
        """Get route-map by ID.

        Args:
            name (str, optional): name
            route_map_name (str, optional): route-map_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/route-map/{route_map_name}"

        return await self.get(url)

    async def routemap_delete_route_maps_profile_route_map_by_id_v1(
        self,
        name: str = None,
        route_map_name: str = None,
    ) -> Response:
        """Delete route-map by ID.

        Args:
            name (str, optional): name
            route_map_name (str, optional): route-map_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/route-map/{route_map_name}"

        return await self.delete(url)

    async def routemap_create_route_maps_profile_route_map_route_map_entry_by_id_v1(
        self,
        name: str = None,
        route_map_name: str = None,
        seq_no: str = None,
    ) -> Response:
        """Create route-map-entry by ID.

        Args:
            name (str, optional): name
            route_map_name (str, optional): route-map_name
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/route-map/{route_map_name}/route-map-entry/{seq_no}"

        return await self.post(url)

    async def routemap_read_route_maps_profile_route_map_route_map_entry_by_id_v1(
        self,
        name: str = None,
        route_map_name: str = None,
        seq_no: str = None,
    ) -> Response:
        """Get route-map-entry by ID.

        Args:
            name (str, optional): name
            route_map_name (str, optional): route-map_name
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/route-map/{route_map_name}/route-map-entry/{seq_no}"

        return await self.get(url)

    async def routemap_delete_route_maps_profile_route_map_route_map_entry_by_id_v1(
        self,
        name: str = None,
        route_map_name: str = None,
        seq_no: str = None,
    ) -> Response:
        """Delete route-map-entry by ID.

        Args:
            name (str, optional): name
            route_map_name (str, optional): route-map_name
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/route-map/{route_map_name}/route-map-entry/{seq_no}"

        return await self.delete(url)

    async def routemap_create_route_maps_profile_ip_community_by_id_v1(
        self,
        name: str = None,
        ip_community_name: str = None,
    ) -> Response:
        """Create ip-community by ID.

        Args:
            name (str, optional): name
            ip_community_name (str, optional): ip-community_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/ip-community/{ip_community_name}"

        return await self.post(url)

    async def routemap_read_route_maps_profile_ip_community_by_id_v1(
        self,
        name: str = None,
        ip_community_name: str = None,
    ) -> Response:
        """Get ip-community by ID.

        Args:
            name (str, optional): name
            ip_community_name (str, optional): ip-community_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/ip-community/{ip_community_name}"

        return await self.get(url)

    async def routemap_delete_route_maps_profile_ip_community_by_id_v1(
        self,
        name: str = None,
        ip_community_name: str = None,
    ) -> Response:
        """Delete ip-community by ID.

        Args:
            name (str, optional): name
            ip_community_name (str, optional): ip-community_name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/ip-community/{ip_community_name}"

        return await self.delete(url)

    async def routemap_create_route_maps_profile_community_lists_by_id_v1(
        self,
        name: str = None,
        community_lists_name: str = None,
        community_type: str = None,
    ) -> Response:
        """Create community-lists by ID.

        Args:
            name (str, optional): name
            community_lists_name (str, optional): community-lists_name
            community_type (str, optional): communityType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/community-lists/{community_lists_name}/{community_type}"

        return await self.post(url)

    async def routemap_read_route_maps_profile_community_lists_by_id_v1(
        self,
        name: str = None,
        community_lists_name: str = None,
        community_type: str = None,
    ) -> Response:
        """Get community-lists by ID.

        Args:
            name (str, optional): name
            community_lists_name (str, optional): community-lists_name
            community_type (str, optional): communityType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/community-lists/{community_lists_name}/{community_type}"

        return await self.get(url)

    async def routemap_delete_route_maps_profile_community_lists_by_id_v1(
        self,
        name: str = None,
        community_lists_name: str = None,
        community_type: str = None,
    ) -> Response:
        """Delete community-lists by ID.

        Args:
            name (str, optional): name
            community_lists_name (str, optional): community-lists_name
            community_type (str, optional): communityType

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/community-lists/{community_lists_name}/{community_type}"

        return await self.delete(url)

    async def routemap_create_route_maps_profile_community_lists_community_list_entry_by_id_v1(
        self,
        name: str = None,
        community_lists_name: str = None,
        community_type: str = None,
        seq_no: str = None,
    ) -> Response:
        """Create community-list-entry by ID.

        Args:
            name (str, optional): name
            community_lists_name (str, optional): community-lists_name
            community_type (str, optional): communityType
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/community-lists/{community_lists_name}/{community_type}/community-list-entry/{seq_no}"

        return await self.post(url)

    async def routemap_read_route_maps_profile_community_lists_community_list_entry_by_id_v1(
        self,
        name: str = None,
        community_lists_name: str = None,
        community_type: str = None,
        seq_no: str = None,
    ) -> Response:
        """Get community-list-entry by ID.

        Args:
            name (str, optional): name
            community_lists_name (str, optional): community-lists_name
            community_type (str, optional): communityType
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/community-lists/{community_lists_name}/{community_type}/community-list-entry/{seq_no}"

        return await self.get(url)

    async def routemap_delete_route_maps_profile_community_lists_community_list_entry_by_id_v1(
        self,
        name: str = None,
        community_lists_name: str = None,
        community_type: str = None,
        seq_no: str = None,
    ) -> Response:
        """Delete community-list-entry by ID.

        Args:
            name (str, optional): name
            community_lists_name (str, optional): community-lists_name
            community_type (str, optional): communityType
            seq_no (str, optional): seqNo

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/route-maps/{name}/community-lists/{community_lists_name}/{community_type}/community-list-entry/{seq_no}"

        return await self.delete(url)

    async def saas_express_create_saas_express_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create saas-express by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): SaaS Express profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): SaaS Express profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/saas-express"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def saas_express_read_saas_express_v1(
        self,
    ) -> Response:
        """Get saas-express.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/saas-express"

        return await self.get(url)

    async def saas_express_create_saas_express_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/saas-express/{name}"

        return await self.post(url)

    async def saas_express_read_saas_express_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/saas-express/{name}"

        return await self.get(url)

    async def saas_express_delete_saas_express_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/saas-express/{name}"

        return await self.delete(url)

    async def saas_express_create_saas_express_profile_app_profile_by_id_v1(
        self,
        name: str = None,
        app_name: str = None,
    ) -> Response:
        """Create app-profile by ID.

        Args:
            name (str, optional): name
            app_name (str, optional): appName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/saas-express/{name}/app-profile/{app_name}"

        return await self.post(url)

    async def saas_express_read_saas_express_profile_app_profile_by_id_v1(
        self,
        name: str = None,
        app_name: str = None,
    ) -> Response:
        """Get app-profile by ID.

        Args:
            name (str, optional): name
            app_name (str, optional): appName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/saas-express/{name}/app-profile/{app_name}"

        return await self.get(url)

    async def saas_express_delete_saas_express_profile_app_profile_by_id_v1(
        self,
        name: str = None,
        app_name: str = None,
    ) -> Response:
        """Delete app-profile by ID.

        Args:
            name (str, optional): name
            app_name (str, optional): appName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/saas-express/{name}/app-profile/{app_name}"

        return await self.delete(url)

    async def saas_express_create_saas_express_profile_app_profile_fqdn_by_id_v1(
        self,
        name: str = None,
        app_name: str = None,
    ) -> Response:
        """Create fqdn by ID.

        Args:
            name (str, optional): name
            app_name (str, optional): appName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/saas-express/{name}/app-profile/{app_name}/fqdn"

        return await self.post(url)

    async def saas_express_read_saas_express_profile_app_profile_fqdn_by_id_v1(
        self,
        name: str = None,
        app_name: str = None,
    ) -> Response:
        """Get fqdn by ID.

        Args:
            name (str, optional): name
            app_name (str, optional): appName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/saas-express/{name}/app-profile/{app_name}/fqdn"

        return await self.get(url)

    async def saas_express_delete_saas_express_profile_app_profile_fqdn_by_id_v1(
        self,
        name: str = None,
        app_name: str = None,
    ) -> Response:
        """Delete fqdn by ID.

        Args:
            name (str, optional): name
            app_name (str, optional): appName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/saas-express/{name}/app-profile/{app_name}/fqdn"

        return await self.delete(url)

    async def saas_express_create_saas_express_profile_uplink_dns_by_id_v1(
        self,
        name: str = None,
        uplink_id: str = None,
    ) -> Response:
        """Create uplink-dns by ID.

        Args:
            name (str, optional): name
            uplink_id (str, optional): uplinkId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/saas-express/{name}/uplink-dns/{uplink_id}"

        return await self.post(url)

    async def saas_express_read_saas_express_profile_uplink_dns_by_id_v1(
        self,
        name: str = None,
        uplink_id: str = None,
    ) -> Response:
        """Get uplink-dns by ID.

        Args:
            name (str, optional): name
            uplink_id (str, optional): uplinkId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/saas-express/{name}/uplink-dns/{uplink_id}"

        return await self.get(url)

    async def saas_express_delete_saas_express_profile_uplink_dns_by_id_v1(
        self,
        name: str = None,
        uplink_id: str = None,
    ) -> Response:
        """Delete uplink-dns by ID.

        Args:
            name (str, optional): name
            uplink_id (str, optional): uplinkId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/saas-express/{name}/uplink-dns/{uplink_id}"

        return await self.delete(url)

    async def scope_cfg_meta_create_scope_cfg_metas_by_id_v1(
        self,
        cfg_uuid: str,
        inst_key: str,
        module_name: str,
        scope_id: str,
        persona: str,
        ns_uuid: str,
        is_default_cfg: bool,
    ) -> Response:
        """Create scope-cfg-metas by ID.

        Args:
            cfg_uuid (str): UUID for config in DB
            inst_key (str): instance name
            module_name (str): Module name
            scope_id (str): Scope ID
            persona (str): Persona identifier.
            ns_uuid (str): name space uuid
            is_default_cfg (bool): Indicates if config is default configuration

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-cfg-metas"

        json_data = {
            'cfg_uuid': cfg_uuid,
            'inst_key': inst_key,
            'module_name': module_name,
            'scope_id': scope_id,
            'persona': persona,
            'ns_uuid': ns_uuid,
            'is_default_cfg': is_default_cfg
        }

        return await self.post(url, json_data=json_data)

    async def scope_cfg_meta_read_scope_cfg_metas_v1(
        self,
    ) -> Response:
        """Get scope-cfg-metas.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-cfg-metas"

        return await self.get(url)

    async def scope_cfg_meta_create_scope_cfg_metas_scope_cfg_meta_by_id_v1(
        self,
        module_name: str = None,
        inst_key: str = None,
        ns_uuid: str = None,
    ) -> Response:
        """Create scope-cfg-meta by ID.

        Args:
            module_name (str, optional): moduleName
            inst_key (str, optional): instKey
            ns_uuid (str, optional): nsUuid

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/scope-cfg-metas/{module_name}/{inst_key}/{ns_uuid}"

        return await self.post(url)

    async def scope_cfg_meta_read_scope_cfg_metas_scope_cfg_meta_by_id_v1(
        self,
        module_name: str = None,
        inst_key: str = None,
        ns_uuid: str = None,
    ) -> Response:
        """Get scope-cfg-meta by ID.

        Args:
            module_name (str, optional): moduleName
            inst_key (str, optional): instKey
            ns_uuid (str, optional): nsUuid

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/scope-cfg-metas/{module_name}/{inst_key}/{ns_uuid}"

        return await self.get(url)

    async def scope_cfg_meta_delete_scope_cfg_metas_scope_cfg_meta_by_id_v1(
        self,
        module_name: str = None,
        inst_key: str = None,
        ns_uuid: str = None,
    ) -> Response:
        """Delete scope-cfg-meta by ID.

        Args:
            module_name (str, optional): moduleName
            inst_key (str, optional): instKey
            ns_uuid (str, optional): nsUuid

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/scope-cfg-metas/{module_name}/{inst_key}/{ns_uuid}"

        return await self.delete(url)

    async def scope_reference_info_read_scope_ref_summary_v1(
        self,
    ) -> Response:
        """Get scope-ref-summary.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-ref-summary"

        return await self.get(url)

    async def scope_reference_info_read_scope_ref_summary_references_by_id_v1(
        self,
    ) -> Response:
        """Get references by ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-ref-summary/references"

        return await self.get(url)

    async def scope_reference_info_read_scope_ref_summary_references_referred_v1(
        self,
    ) -> Response:
        """Get referred.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-ref-summary/references/referred"

        return await self.get(url)

    async def scope_reference_info_read_scope_ref_summary_references_referred_mapped_resource_v1(
        self,
    ) -> Response:
        """Get mapped-resource.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-ref-summary/references/referred/mapped-resource"

        return await self.get(url)

    async def scope_reference_info_read_scope_ref_summary_references_referred_referring_resources_by_id_v1(
        self,
    ) -> Response:
        """Get referring-resources by ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-ref-summary/references/referred/referring-resources"

        return await self.get(url)

    async def scope_reference_info_read_scope_ref_summary_references_referred_referring_resources_mapped_resource_v1(
        self,
    ) -> Response:
        """Get mapped-resource.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-ref-summary/references/referred/referring-resources/mapped-resource"

        return await self.get(url)

    async def scope_reference_info_read_scope_ref_summary_references_referring_v1(
        self,
    ) -> Response:
        """Get referring.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-ref-summary/references/referring"

        return await self.get(url)

    async def scope_reference_info_read_scope_ref_summary_references_referring_mapped_resource_v1(
        self,
    ) -> Response:
        """Get mapped-resource.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-ref-summary/references/referring/mapped-resource"

        return await self.get(url)

    async def scope_reference_info_read_scope_ref_summary_references_referring_referred_resources_by_id_v1(
        self,
    ) -> Response:
        """Get referred-resources by ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-ref-summary/references/referring/referred-resources"

        return await self.get(url)

    async def scope_reference_info_read_scope_ref_summary_references_referring_referred_resources_mapped_resource_v1(
        self,
    ) -> Response:
        """Get mapped-resource.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-ref-summary/references/referring/referred-resources/mapped-resource"

        return await self.get(url)

    async def scope_references_create_scope_references_by_id_v1(
        self,
        ref_from_cfg_uuid: str,
        ref_from_xpath: str,
        ref_from_scope: str,
        ref_to_cfg_uuid: str,
        ref_to_xpath: str,
        ref_to_scope: str,
        persona: str,
    ) -> Response:
        """Create scope-references by ID.

        Args:
            ref_from_cfg_uuid (str): UUID for referring config in DB
            ref_from_xpath (str): referring config leaf xpath
            ref_from_scope (str): scope where referring config is mapped
            ref_to_cfg_uuid (str): UUID for referred config in DB
            ref_to_xpath (str): xpath of config being referred
            ref_to_scope (str): scope where config being referred is mapped
            persona (str): Persona identifier.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-references"

        json_data = {
            'ref_from_cfg_uuid': ref_from_cfg_uuid,
            'ref_from_xpath': ref_from_xpath,
            'ref_from_scope': ref_from_scope,
            'ref_to_cfg_uuid': ref_to_cfg_uuid,
            'ref_to_xpath': ref_to_xpath,
            'ref_to_scope': ref_to_scope,
            'persona': persona
        }

        return await self.post(url, json_data=json_data)

    async def scope_references_read_scope_references_v1(
        self,
    ) -> Response:
        """Get scope-references.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-references"

        return await self.get(url)

    async def scope_references_create_scope_references_scope_refs_by_id_v1(
        self,
        ref_fro_mc_fguuid: str = None,
        ref_fro_mxpath: str = None,
        ref_fro_mscope: str = None,
    ) -> Response:
        """Create scope-refs by ID.

        Args:
            ref_fro_mc_fguuid (str, optional): refFromCfgUuid
            ref_fro_mxpath (str, optional): refFromXpath
            ref_fro_mscope (str, optional): refFromScope

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/scope-references/{ref_fro_mc_fguuid}/{ref_fro_mxpath}/{ref_fro_mscope}"

        return await self.post(url)

    async def scope_references_read_scope_references_scope_refs_by_id_v1(
        self,
        ref_fro_mc_fguuid: str = None,
        ref_fro_mxpath: str = None,
        ref_fro_mscope: str = None,
    ) -> Response:
        """Get scope-refs by ID.

        Args:
            ref_fro_mc_fguuid (str, optional): refFromCfgUuid
            ref_fro_mxpath (str, optional): refFromXpath
            ref_fro_mscope (str, optional): refFromScope

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/scope-references/{ref_fro_mc_fguuid}/{ref_fro_mxpath}/{ref_fro_mscope}"

        return await self.get(url)

    async def scope_references_delete_scope_references_scope_refs_by_id_v1(
        self,
        ref_fro_mc_fguuid: str = None,
        ref_fro_mxpath: str = None,
        ref_fro_mscope: str = None,
    ) -> Response:
        """Delete scope-refs by ID.

        Args:
            ref_fro_mc_fguuid (str, optional): refFromCfgUuid
            ref_fro_mxpath (str, optional): refFromXpath
            ref_fro_mscope (str, optional): refFromScope

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/scope-references/{ref_fro_mc_fguuid}/{ref_fro_mxpath}/{ref_fro_mscope}"

        return await self.delete(url)

    async def scopemap_create_scope_maps_by_id_v1(
        self,
        scope_name: str,
        persona: str,
        resource: str,
    ) -> Response:
        """Create scope-maps by ID.

        Args:
            scope_name (str): Scope name
            persona (str): Persona identifier.  Valid Values: MOBILITY_GW, BRANCH_GW, VPNC,
                CAMPUS_AP, MICROBRANCH_AP, SWITCH, ALL, SERVICE_PERSONA
            resource (str): Resource. XPath to the configuration parameter

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-maps"

        json_data = {
            'scope_name': scope_name,
            'persona': persona,
            'resource': resource
        }

        return await self.post(url, json_data=json_data)

    async def scopemap_read_scope_maps_v1(
        self,
    ) -> Response:
        """Get scope-maps.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/scope-maps"

        return await self.get(url)

    async def scopemap_create_scope_maps_scope_map_by_id_v1(
        self,
        scope_name: str = None,
        persona: str = None,
        resource: str = None,
    ) -> Response:
        """Create scope-map by ID.

        Args:
            scope_name (str, optional): scopeName
            persona (str, optional): persona
            resource (str, optional): resource

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/scope-maps/{scope_name}/{persona}/{resource}"

        return await self.post(url)

    async def scopemap_read_scope_maps_scope_map_by_id_v1(
        self,
        scope_name: str = None,
        persona: str = None,
        resource: str = None,
    ) -> Response:
        """Get scope-map by ID.

        Args:
            scope_name (str, optional): scopeName
            persona (str, optional): persona
            resource (str, optional): resource

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/scope-maps/{scope_name}/{persona}/{resource}"

        return await self.get(url)

    async def scopemap_delete_scope_maps_scope_map_by_id_v1(
        self,
        scope_name: str = None,
        persona: str = None,
        resource: str = None,
    ) -> Response:
        """Delete scope-map by ID.

        Args:
            scope_name (str, optional): scopeName
            persona (str, optional): persona
            resource (str, optional): resource

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/scope-maps/{scope_name}/{persona}/{resource}"

        return await self.delete(url)

    async def sdb_branch_mesh_create_branch_meshes_by_id_v1(
        self,
        label: str,
    ) -> Response:
        """Create branch-meshes by ID.

        Args:
            label (str): Branch Mesh label

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/branch-meshes"

        json_data = {
            'label': label
        }

        return await self.post(url, json_data=json_data)

    async def sdb_branch_mesh_read_branch_meshes_v1(
        self,
    ) -> Response:
        """Get branch-meshes.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/branch-meshes"

        return await self.get(url)

    async def sdb_branch_mesh_create_branch_meshes_branch_mesh_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Create branch-mesh by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/branch-meshes/{label}"

        return await self.post(url)

    async def sdb_branch_mesh_read_branch_meshes_branch_mesh_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Get branch-mesh by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/branch-meshes/{label}"

        return await self.get(url)

    async def sdb_branch_mesh_delete_branch_meshes_branch_mesh_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Delete branch-mesh by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/branch-meshes/{label}"

        return await self.delete(url)

    async def sdb_global_create_tunnel_policies_by_id_v1(
        self,
        label: str,
        type: str,
        rekey_interval: int,
    ) -> Response:
        """Create tunnel-policies by ID.

        Args:
            label (str): Tunnel Policy label
            type (str): Type of tunnel  Valid Values: IPSEC
            rekey_interval (int): Time interval, in seconds, between rekeying.
                Value should be in the range 1 minute (60 seconds)
                to 14 days (1209600 seconds) and default is 24 hours.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/tunnel-policies"

        json_data = {
            'label': label,
            'type': type,
            'rekey_interval': rekey_interval
        }

        return await self.post(url, json_data=json_data)

    async def sdb_global_read_tunnel_policies_v1(
        self,
    ) -> Response:
        """Get tunnel-policies.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/tunnel-policies"

        return await self.get(url)

    async def sdb_global_create_tunnel_policies_tunnel_policy_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Create tunnel-policy by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel-policies/{label}"

        return await self.post(url)

    async def sdb_global_read_tunnel_policies_tunnel_policy_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Get tunnel-policy by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel-policies/{label}"

        return await self.get(url)

    async def sdb_global_delete_tunnel_policies_tunnel_policy_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Delete tunnel-policy by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/tunnel-policies/{label}"

        return await self.delete(url)

    async def sdb_hub_mesh_create_hub_meshes_by_id_v1(
        self,
        label: str,
    ) -> Response:
        """Create hub-meshes by ID.

        Args:
            label (str): Hub Mesh label

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/hub-meshes"

        json_data = {
            'label': label
        }

        return await self.post(url, json_data=json_data)

    async def sdb_hub_mesh_read_hub_meshes_v1(
        self,
    ) -> Response:
        """Get hub-meshes.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/hub-meshes"

        return await self.get(url)

    async def sdb_hub_mesh_create_hub_meshes_hub_mesh_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Create hub-mesh by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hub-meshes/{label}"

        return await self.post(url)

    async def sdb_hub_mesh_read_hub_meshes_hub_mesh_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Get hub-mesh by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hub-meshes/{label}"

        return await self.get(url)

    async def sdb_hub_mesh_delete_hub_meshes_hub_mesh_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Delete hub-mesh by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hub-meshes/{label}"

        return await self.delete(url)

    async def sdb_hub_spoke_create_hub_spokes_by_id_v1(
        self,
        label: str,
        hubs_type: str,
        hub_devices: List[str],
        hub_clusters: list,
    ) -> Response:
        """Create hub-spokes by ID.

        Args:
            label (str): Data Center Preference label
            hubs_type (str): This indicates whether DC Preference uses induvidual VPNC
                devices ('hubs' list) or VPNC Clusters ('hub-clusters' list).
                Value 'HUB_TYPE_DEVICE' is used to indicate 'hubs' is
                configured. Value 'HUB_TYPE_CLUSTER' is used to indicate
                'hub-clusters' is configured  Valid Values: HUB_TYPE_DEVICE, HUB_TYPE_CLUSTER
            hub_devices (List[str]): hub-devices
            hub_clusters (list): Cluster Scope and Name

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/hub-spokes"

        json_data = {
            'label': label,
            'hubs_type': hubs_type,
            'hub_devices': hub_devices,
            'hub_clusters': hub_clusters
        }

        return await self.post(url, json_data=json_data)

    async def sdb_hub_spoke_read_hub_spokes_v1(
        self,
    ) -> Response:
        """Get hub-spokes.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/hub-spokes"

        return await self.get(url)

    async def sdb_hub_spoke_create_hub_spokes_dc_preference_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Create dc-preference by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hub-spokes/{label}"

        return await self.post(url)

    async def sdb_hub_spoke_read_hub_spokes_dc_preference_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Get dc-preference by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hub-spokes/{label}"

        return await self.get(url)

    async def sdb_hub_spoke_delete_hub_spokes_dc_preference_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Delete dc-preference by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hub-spokes/{label}"

        return await self.delete(url)

    async def sdb_hub_spoke_create_hub_spokes_dc_preference_hub_devices_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Create hub-devices by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hub-spokes/{label}/hub-devices"

        return await self.post(url)

    async def sdb_hub_spoke_read_hub_spokes_dc_preference_hub_devices_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Get hub-devices by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hub-spokes/{label}/hub-devices"

        return await self.get(url)

    async def sdb_hub_spoke_delete_hub_spokes_dc_preference_hub_devices_by_id_v1(
        self,
        label: str = None,
    ) -> Response:
        """Delete hub-devices by ID.

        Args:
            label (str, optional): label

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hub-spokes/{label}/hub-devices"

        return await self.delete(url)

    async def sdb_hub_spoke_create_hub_spokes_dc_preference_hub_clusters_by_id_v1(
        self,
        label: str = None,
        cluster_scop_ename: str = None,
        cluster: str = None,
    ) -> Response:
        """Create hub-clusters by ID.

        Args:
            label (str, optional): label
            cluster_scop_ename (str, optional): clusterScopeName
            cluster (str, optional): cluster

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hub-spokes/{label}/hub-clusters/{cluster_scop_ename}/{cluster}"

        return await self.post(url)

    async def sdb_hub_spoke_read_hub_spokes_dc_preference_hub_clusters_by_id_v1(
        self,
        label: str = None,
        cluster_scop_ename: str = None,
        cluster: str = None,
    ) -> Response:
        """Get hub-clusters by ID.

        Args:
            label (str, optional): label
            cluster_scop_ename (str, optional): clusterScopeName
            cluster (str, optional): cluster

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hub-spokes/{label}/hub-clusters/{cluster_scop_ename}/{cluster}"

        return await self.get(url)

    async def sdb_hub_spoke_delete_hub_spokes_dc_preference_hub_clusters_by_id_v1(
        self,
        label: str = None,
        cluster_scop_ename: str = None,
        cluster: str = None,
    ) -> Response:
        """Delete hub-clusters by ID.

        Args:
            label (str, optional): label
            cluster_scop_ename (str, optional): clusterScopeName
            cluster (str, optional): cluster

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/hub-spokes/{label}/hub-clusters/{cluster_scop_ename}/{cluster}"

        return await self.delete(url)

    async def sflow_create_sflow_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        session: list = None,
    ) -> Response:
        """Create sflow by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): sFlow Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): sFlow profile name.
            description (str): sFlow profile description.
            session (list): sFlow session.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/sflow"

        json_data = {
            'name': name,
            'description': description,
            'session': session
        }

        return await self.post(url, json_data=json_data)

    async def sflow_read_sflow_v1(
        self,
    ) -> Response:
        """Get sflow.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/sflow"

        return await self.get(url)

    async def sflow_create_sflow_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sflow/{name}"

        return await self.post(url)

    async def sflow_read_sflow_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sflow/{name}"

        return await self.get(url)

    async def sflow_delete_sflow_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sflow/{name}"

        return await self.delete(url)

    async def sflow_create_sflow_profile_session_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
    ) -> Response:
        """Create session by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sflow/{name}/session/{session_id}"

        return await self.post(url)

    async def sflow_read_sflow_profile_session_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
    ) -> Response:
        """Get session by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sflow/{name}/session/{session_id}"

        return await self.get(url)

    async def sflow_delete_sflow_profile_session_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
    ) -> Response:
        """Delete session by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sflow/{name}/session/{session_id}"

        return await self.delete(url)

    async def sflow_create_sflow_profile_session_collector_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
        col_name: str = None,
    ) -> Response:
        """Create collector by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId
            col_name (str, optional): colName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sflow/{name}/session/{session_id}/collector/{col_name}"

        return await self.post(url)

    async def sflow_read_sflow_profile_session_collector_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
        col_name: str = None,
    ) -> Response:
        """Get collector by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId
            col_name (str, optional): colName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sflow/{name}/session/{session_id}/collector/{col_name}"

        return await self.get(url)

    async def sflow_delete_sflow_profile_session_collector_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
        col_name: str = None,
    ) -> Response:
        """Delete collector by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId
            col_name (str, optional): colName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sflow/{name}/session/{session_id}/collector/{col_name}"

        return await self.delete(url)

    async def sflow_create_sflow_profile_session_interfaces_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
        int_name: str = None,
    ) -> Response:
        """Create interfaces by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId
            int_name (str, optional): intName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sflow/{name}/session/{session_id}/interfaces/{int_name}"

        return await self.post(url)

    async def sflow_read_sflow_profile_session_interfaces_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
        int_name: str = None,
    ) -> Response:
        """Get interfaces by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId
            int_name (str, optional): intName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sflow/{name}/session/{session_id}/interfaces/{int_name}"

        return await self.get(url)

    async def sflow_delete_sflow_profile_session_interfaces_by_id_v1(
        self,
        name: str = None,
        session_id: str = None,
        int_name: str = None,
    ) -> Response:
        """Delete interfaces by ID.

        Args:
            name (str, optional): name
            session_id (str, optional): sessionId
            int_name (str, optional): intName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sflow/{name}/session/{session_id}/interfaces/{int_name}"

        return await self.delete(url)

    async def smartlink_create_smartlink_by_id_v1(
        self,
        group_id: int,
        description: str,
        primary_port: str,
        secondary_port: str,
        protected_vlans: List[int],
        control_vlan: int,
        preemption: bool,
        preemption_delay: int,
        trap: bool,
        recv_control_vlans: List[int],
    ) -> Response:
        """Create smartlink by ID.

        Args:
            group_id (int): Group identifier.
            description (str): Description for the group
            primary_port (str): Primary port for the group
            secondary_port (str): Secondary port for the group
            protected_vlans (List[int]): protected-vlans
            control_vlan (int): VLAN to send flush packet
            preemption (bool): Preemption is enabled or not
            preemption_delay (int): Delay to preempt active port
            trap (bool): Send a trap when preemption happens
            recv_control_vlans (List[int]): recv-control-vlans

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/smartlink"

        json_data = {
            'group_id': group_id,
            'description': description,
            'primary_port': primary_port,
            'secondary_port': secondary_port,
            'protected_vlans': protected_vlans,
            'control_vlan': control_vlan,
            'preemption': preemption,
            'preemption_delay': preemption_delay,
            'trap': trap,
            'recv_control_vlans': recv_control_vlans
        }

        return await self.post(url, json_data=json_data)

    async def smartlink_read_smartlink_v1(
        self,
    ) -> Response:
        """Get smartlink.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/smartlink"

        return await self.get(url)

    async def smartlink_create_smartlink_recv_control_vlans_by_id_v1(
        self,
        NoName: List[int] = None,
        NoName_: List[int] = None,
    ) -> Response:
        """Create recv-control-vlans by ID.

        Args:
            NoName (List[int]): ...
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            NoName (List[int]): ...

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/smartlink/recv-control-vlans"

        return await self.post(url)

    async def smartlink_read_smartlink_recv_control_vlans_by_id_v1(
        self,
    ) -> Response:
        """Get recv-control-vlans by ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/smartlink/recv-control-vlans"

        return await self.get(url)

    async def smartlink_delete_smartlink_recv_control_vlans_by_id_v1(
        self,
    ) -> Response:
        """Delete recv-control-vlans by ID.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/smartlink/recv-control-vlans"

        return await self.delete(url)

    async def smartlink_create_smartlink_group_by_id_v1(
        self,
        group_id: str = None,
    ) -> Response:
        """Create group by ID.

        Args:
            group_id (str, optional): groupId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/smartlink/{group_id}"

        return await self.post(url)

    async def smartlink_read_smartlink_group_by_id_v1(
        self,
        group_id: str = None,
    ) -> Response:
        """Get group by ID.

        Args:
            group_id (str, optional): groupId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/smartlink/{group_id}"

        return await self.get(url)

    async def smartlink_delete_smartlink_group_by_id_v1(
        self,
        group_id: str = None,
    ) -> Response:
        """Delete group by ID.

        Args:
            group_id (str, optional): groupId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/smartlink/{group_id}"

        return await self.delete(url)

    async def smartlink_create_smartlink_group_protected_vlans_by_id_v1(
        self,
        group_id: str = None,
    ) -> Response:
        """Create protected-vlans by ID.

        Args:
            group_id (str, optional): groupId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/smartlink/{group_id}/protected-vlans"

        return await self.post(url)

    async def smartlink_read_smartlink_group_protected_vlans_by_id_v1(
        self,
        group_id: str = None,
    ) -> Response:
        """Get protected-vlans by ID.

        Args:
            group_id (str, optional): groupId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/smartlink/{group_id}/protected-vlans"

        return await self.get(url)

    async def smartlink_delete_smartlink_group_protected_vlans_by_id_v1(
        self,
        group_id: str = None,
    ) -> Response:
        """Delete protected-vlans by ID.

        Args:
            group_id (str, optional): groupId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/smartlink/{group_id}/protected-vlans"

        return await self.delete(url)

    async def snmp_trap_create_snmp_trap_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        trap: list = None,
        trap_group: list = None,
    ) -> Response:
        """Create snmp-trap by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of SNMP traps
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): SNMP Traps profile name
            description (str): SNMP Traps profile description.
            trap (list): List of supported SNMP traps.
            trap_group (list): To define trap-groups.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/snmp-trap"

        json_data = {
            'name': name,
            'description': description,
            'trap': trap,
            'trap_group': trap_group
        }

        return await self.post(url, json_data=json_data)

    async def snmp_trap_read_snmp_trap_v1(
        self,
    ) -> Response:
        """Get snmp-trap.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/snmp-trap"

        return await self.get(url)

    async def snmp_trap_create_snmp_trap_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}"

        return await self.post(url)

    async def snmp_trap_read_snmp_trap_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}"

        return await self.get(url)

    async def snmp_trap_delete_snmp_trap_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}"

        return await self.delete(url)

    async def snmp_trap_create_snmp_trap_profile_trap_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Create trap by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap/{id}"

        return await self.post(url)

    async def snmp_trap_read_snmp_trap_profile_trap_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Get trap by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap/{id}"

        return await self.get(url)

    async def snmp_trap_delete_snmp_trap_profile_trap_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Delete trap by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap/{id}"

        return await self.delete(url)

    async def snmp_trap_create_snmp_trap_profile_trap_port_list_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Create port-list by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap/{id}/port-list"

        return await self.post(url)

    async def snmp_trap_read_snmp_trap_profile_trap_port_list_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Get port-list by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap/{id}/port-list"

        return await self.get(url)

    async def snmp_trap_delete_snmp_trap_profile_trap_port_list_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Delete port-list by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap/{id}/port-list"

        return await self.delete(url)

    async def snmp_trap_create_snmp_trap_profile_trap_event_list_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Create event-list by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap/{id}/event-list"

        return await self.post(url)

    async def snmp_trap_read_snmp_trap_profile_trap_event_list_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Get event-list by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap/{id}/event-list"

        return await self.get(url)

    async def snmp_trap_delete_snmp_trap_profile_trap_event_list_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Delete event-list by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap/{id}/event-list"

        return await self.delete(url)

    async def snmp_trap_create_snmp_trap_profile_trap_group_by_id_v1(
        self,
        name: str = None,
        group: str = None,
    ) -> Response:
        """Create trap-group by ID.

        Args:
            name (str, optional): name
            group (str, optional): group

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap-group/{group}"

        return await self.post(url)

    async def snmp_trap_read_snmp_trap_profile_trap_group_by_id_v1(
        self,
        name: str = None,
        group: str = None,
    ) -> Response:
        """Get trap-group by ID.

        Args:
            name (str, optional): name
            group (str, optional): group

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap-group/{group}"

        return await self.get(url)

    async def snmp_trap_delete_snmp_trap_profile_trap_group_by_id_v1(
        self,
        name: str = None,
        group: str = None,
    ) -> Response:
        """Delete trap-group by ID.

        Args:
            name (str, optional): name
            group (str, optional): group

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap-group/{group}"

        return await self.delete(url)

    async def snmp_trap_create_snmp_trap_profile_trap_group_trap_by_id_v1(
        self,
        name: str = None,
        group: str = None,
    ) -> Response:
        """Create trap by ID.

        Args:
            name (str, optional): name
            group (str, optional): group

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap-group/{group}/trap"

        return await self.post(url)

    async def snmp_trap_read_snmp_trap_profile_trap_group_trap_by_id_v1(
        self,
        name: str = None,
        group: str = None,
    ) -> Response:
        """Get trap by ID.

        Args:
            name (str, optional): name
            group (str, optional): group

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap-group/{group}/trap"

        return await self.get(url)

    async def snmp_trap_delete_snmp_trap_profile_trap_group_trap_by_id_v1(
        self,
        name: str = None,
        group: str = None,
    ) -> Response:
        """Delete trap by ID.

        Args:
            name (str, optional): name
            group (str, optional): group

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp-trap/{name}/trap-group/{group}/trap"

        return await self.delete(url)

    async def snmp_create_snmp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create snmp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): SNMP profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): SNMP profile.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/snmp"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def snmp_read_snmp_v1(
        self,
    ) -> Response:
        """Get snmp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/snmp"

        return await self.get(url)

    async def snmp_create_snmp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}"

        return await self.post(url)

    async def snmp_read_snmp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}"

        return await self.get(url)

    async def snmp_delete_snmp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}"

        return await self.delete(url)

    async def snmp_create_snmp_profile_context_by_id_v1(
        self,
        name: str = None,
        context_name: str = None,
    ) -> Response:
        """Create context by ID.

        Args:
            name (str, optional): name
            context_name (str, optional): contextName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/context/{context_name}"

        return await self.post(url)

    async def snmp_read_snmp_profile_context_by_id_v1(
        self,
        name: str = None,
        context_name: str = None,
    ) -> Response:
        """Get context by ID.

        Args:
            name (str, optional): name
            context_name (str, optional): contextName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/context/{context_name}"

        return await self.get(url)

    async def snmp_delete_snmp_profile_context_by_id_v1(
        self,
        name: str = None,
        context_name: str = None,
    ) -> Response:
        """Delete context by ID.

        Args:
            name (str, optional): name
            context_name (str, optional): contextName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/context/{context_name}"

        return await self.delete(url)

    async def snmp_create_snmp_profile_view_by_id_v1(
        self,
        name: str = None,
        view_name: str = None,
        oid_tree: str = None,
        mask: str = None,
    ) -> Response:
        """Create view by ID.

        Args:
            name (str, optional): name
            view_name (str, optional): viewName
            oid_tree (str, optional): oidTree
            mask (str, optional): mask

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/view/{view_name}/{oid_tree}/{mask}"

        return await self.post(url)

    async def snmp_read_snmp_profile_view_by_id_v1(
        self,
        name: str = None,
        view_name: str = None,
        oid_tree: str = None,
        mask: str = None,
    ) -> Response:
        """Get view by ID.

        Args:
            name (str, optional): name
            view_name (str, optional): viewName
            oid_tree (str, optional): oidTree
            mask (str, optional): mask

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/view/{view_name}/{oid_tree}/{mask}"

        return await self.get(url)

    async def snmp_delete_snmp_profile_view_by_id_v1(
        self,
        name: str = None,
        view_name: str = None,
        oid_tree: str = None,
        mask: str = None,
    ) -> Response:
        """Delete view by ID.

        Args:
            name (str, optional): name
            view_name (str, optional): viewName
            oid_tree (str, optional): oidTree
            mask (str, optional): mask

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/view/{view_name}/{oid_tree}/{mask}"

        return await self.delete(url)

    async def snmp_create_snmp_profile_community_by_id_v1(
        self,
        name: str = None,
        community: str = None,
    ) -> Response:
        """Create community by ID.

        Args:
            name (str, optional): name
            community (str, optional): community

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/community/{community}"

        return await self.post(url)

    async def snmp_read_snmp_profile_community_by_id_v1(
        self,
        name: str = None,
        community: str = None,
    ) -> Response:
        """Get community by ID.

        Args:
            name (str, optional): name
            community (str, optional): community

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/community/{community}"

        return await self.get(url)

    async def snmp_delete_snmp_profile_community_by_id_v1(
        self,
        name: str = None,
        community: str = None,
    ) -> Response:
        """Delete community by ID.

        Args:
            name (str, optional): name
            community (str, optional): community

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/community/{community}"

        return await self.delete(url)

    async def snmp_create_snmp_profile_user_by_id_v1(
        self,
        name: str = None,
        user_name: str = None,
    ) -> Response:
        """Create user by ID.

        Args:
            name (str, optional): name
            user_name (str, optional): userName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/user/{user_name}"

        return await self.post(url)

    async def snmp_read_snmp_profile_user_by_id_v1(
        self,
        name: str = None,
        user_name: str = None,
    ) -> Response:
        """Get user by ID.

        Args:
            name (str, optional): name
            user_name (str, optional): userName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/user/{user_name}"

        return await self.get(url)

    async def snmp_delete_snmp_profile_user_by_id_v1(
        self,
        name: str = None,
        user_name: str = None,
    ) -> Response:
        """Delete user by ID.

        Args:
            name (str, optional): name
            user_name (str, optional): userName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/user/{user_name}"

        return await self.delete(url)

    async def snmp_create_snmp_profile_user_remote_engine_id_by_id_v1(
        self,
        name: str = None,
        user_name: str = None,
    ) -> Response:
        """Create remote-engine-id by ID.

        Args:
            name (str, optional): name
            user_name (str, optional): userName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/user/{user_name}/remote-engine-id"

        return await self.post(url)

    async def snmp_read_snmp_profile_user_remote_engine_id_by_id_v1(
        self,
        name: str = None,
        user_name: str = None,
    ) -> Response:
        """Get remote-engine-id by ID.

        Args:
            name (str, optional): name
            user_name (str, optional): userName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/user/{user_name}/remote-engine-id"

        return await self.get(url)

    async def snmp_delete_snmp_profile_user_remote_engine_id_by_id_v1(
        self,
        name: str = None,
        user_name: str = None,
    ) -> Response:
        """Delete remote-engine-id by ID.

        Args:
            name (str, optional): name
            user_name (str, optional): userName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/user/{user_name}/remote-engine-id"

        return await self.delete(url)

    async def snmp_create_snmp_profile_notification_receiver_by_id_v1(
        self,
        name: str = None,
        host: str = None,
        port: str = None,
        version: str = None,
        receiver_name: str = None,
    ) -> Response:
        """Create notification-receiver by ID.

        Args:
            name (str, optional): name
            host (str, optional): host
            port (str, optional): port
            version (str, optional): version
            receiver_name (str, optional): receiverName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/notification-receiver/{host}/{port}/{version}/{receiver_name}"

        return await self.post(url)

    async def snmp_read_snmp_profile_notification_receiver_by_id_v1(
        self,
        name: str = None,
        host: str = None,
        port: str = None,
        version: str = None,
        receiver_name: str = None,
    ) -> Response:
        """Get notification-receiver by ID.

        Args:
            name (str, optional): name
            host (str, optional): host
            port (str, optional): port
            version (str, optional): version
            receiver_name (str, optional): receiverName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/notification-receiver/{host}/{port}/{version}/{receiver_name}"

        return await self.get(url)

    async def snmp_delete_snmp_profile_notification_receiver_by_id_v1(
        self,
        name: str = None,
        host: str = None,
        port: str = None,
        version: str = None,
        receiver_name: str = None,
    ) -> Response:
        """Delete notification-receiver by ID.

        Args:
            name (str, optional): name
            host (str, optional): host
            port (str, optional): port
            version (str, optional): version
            receiver_name (str, optional): receiverName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/notification-receiver/{host}/{port}/{version}/{receiver_name}"

        return await self.delete(url)

    async def snmp_create_snmp_profile_notification_receiver_trap_group_by_id_v1(
        self,
        name: str = None,
        host: str = None,
        port: str = None,
        version: str = None,
        receiver_name: str = None,
    ) -> Response:
        """Create trap-group by ID.

        Args:
            name (str, optional): name
            host (str, optional): host
            port (str, optional): port
            version (str, optional): version
            receiver_name (str, optional): receiverName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/notification-receiver/{host}/{port}/{version}/{receiver_name}/trap-group"

        return await self.post(url)

    async def snmp_read_snmp_profile_notification_receiver_trap_group_by_id_v1(
        self,
        name: str = None,
        host: str = None,
        port: str = None,
        version: str = None,
        receiver_name: str = None,
    ) -> Response:
        """Get trap-group by ID.

        Args:
            name (str, optional): name
            host (str, optional): host
            port (str, optional): port
            version (str, optional): version
            receiver_name (str, optional): receiverName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/notification-receiver/{host}/{port}/{version}/{receiver_name}/trap-group"

        return await self.get(url)

    async def snmp_delete_snmp_profile_notification_receiver_trap_group_by_id_v1(
        self,
        name: str = None,
        host: str = None,
        port: str = None,
        version: str = None,
        receiver_name: str = None,
    ) -> Response:
        """Delete trap-group by ID.

        Args:
            name (str, optional): name
            host (str, optional): host
            port (str, optional): port
            version (str, optional): version
            receiver_name (str, optional): receiverName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/notification-receiver/{host}/{port}/{version}/{receiver_name}/trap-group"

        return await self.delete(url)

    async def snmp_create_snmp_profile_snmp_response_source_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create snmp-response-source by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/snmp-response-source/{vrf}"

        return await self.post(url)

    async def snmp_read_snmp_profile_snmp_response_source_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get snmp-response-source by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/snmp-response-source/{vrf}"

        return await self.get(url)

    async def snmp_delete_snmp_profile_snmp_response_source_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete snmp-response-source by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/snmp-response-source/{vrf}"

        return await self.delete(url)

    async def snmp_create_snmp_profile_snmp_trap_source_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create snmp-trap-source by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/snmp-trap-source/{vrf}"

        return await self.post(url)

    async def snmp_read_snmp_profile_snmp_trap_source_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get snmp-trap-source by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/snmp-trap-source/{vrf}"

        return await self.get(url)

    async def snmp_delete_snmp_profile_snmp_trap_source_by_id_v1(
        self,
        name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete snmp-trap-source by ID.

        Args:
            name (str, optional): name
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/snmp-trap-source/{vrf}"

        return await self.delete(url)

    async def snmp_create_snmp_profile_notify_group_by_id_v1(
        self,
        name: str = None,
        notify_name: str = None,
    ) -> Response:
        """Create notify-group by ID.

        Args:
            name (str, optional): name
            notify_name (str, optional): notifyName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/notify-group/{notify_name}"

        return await self.post(url)

    async def snmp_read_snmp_profile_notify_group_by_id_v1(
        self,
        name: str = None,
        notify_name: str = None,
    ) -> Response:
        """Get notify-group by ID.

        Args:
            name (str, optional): name
            notify_name (str, optional): notifyName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/notify-group/{notify_name}"

        return await self.get(url)

    async def snmp_delete_snmp_profile_notify_group_by_id_v1(
        self,
        name: str = None,
        notify_name: str = None,
    ) -> Response:
        """Delete notify-group by ID.

        Args:
            name (str, optional): name
            notify_name (str, optional): notifyName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/notify-group/{notify_name}"

        return await self.delete(url)

    async def snmp_create_snmp_profile_target_by_id_v1(
        self,
        name: str = None,
        target_name: str = None,
    ) -> Response:
        """Create target by ID.

        Args:
            name (str, optional): name
            target_name (str, optional): targetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/target/{target_name}"

        return await self.post(url)

    async def snmp_read_snmp_profile_target_by_id_v1(
        self,
        name: str = None,
        target_name: str = None,
    ) -> Response:
        """Get target by ID.

        Args:
            name (str, optional): name
            target_name (str, optional): targetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/target/{target_name}"

        return await self.get(url)

    async def snmp_delete_snmp_profile_target_by_id_v1(
        self,
        name: str = None,
        target_name: str = None,
    ) -> Response:
        """Delete target by ID.

        Args:
            name (str, optional): name
            target_name (str, optional): targetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/target/{target_name}"

        return await self.delete(url)

    async def snmp_create_snmp_profile_target_ports_by_id_v1(
        self,
        name: str = None,
        target_name: str = None,
    ) -> Response:
        """Create ports by ID.

        Args:
            name (str, optional): name
            target_name (str, optional): targetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/target/{target_name}/ports"

        return await self.post(url)

    async def snmp_read_snmp_profile_target_ports_by_id_v1(
        self,
        name: str = None,
        target_name: str = None,
    ) -> Response:
        """Get ports by ID.

        Args:
            name (str, optional): name
            target_name (str, optional): targetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/target/{target_name}/ports"

        return await self.get(url)

    async def snmp_delete_snmp_profile_target_ports_by_id_v1(
        self,
        name: str = None,
        target_name: str = None,
    ) -> Response:
        """Delete ports by ID.

        Args:
            name (str, optional): name
            target_name (str, optional): targetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/target/{target_name}/ports"

        return await self.delete(url)

    async def snmp_create_snmp_profile_target_tags_by_id_v1(
        self,
        name: str = None,
        target_name: str = None,
    ) -> Response:
        """Create tags by ID.

        Args:
            name (str, optional): name
            target_name (str, optional): targetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/target/{target_name}/tags"

        return await self.post(url)

    async def snmp_read_snmp_profile_target_tags_by_id_v1(
        self,
        name: str = None,
        target_name: str = None,
    ) -> Response:
        """Get tags by ID.

        Args:
            name (str, optional): name
            target_name (str, optional): targetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/target/{target_name}/tags"

        return await self.get(url)

    async def snmp_delete_snmp_profile_target_tags_by_id_v1(
        self,
        name: str = None,
        target_name: str = None,
    ) -> Response:
        """Delete tags by ID.

        Args:
            name (str, optional): name
            target_name (str, optional): targetName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/target/{target_name}/tags"

        return await self.delete(url)

    async def snmp_create_snmp_profile_group_by_id_v1(
        self,
        name: str = None,
        group_name: str = None,
        user: str = None,
    ) -> Response:
        """Create group by ID.

        Args:
            name (str, optional): name
            group_name (str, optional): groupName
            user (str, optional): user

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/group/{group_name}/{user}"

        return await self.post(url)

    async def snmp_read_snmp_profile_group_by_id_v1(
        self,
        name: str = None,
        group_name: str = None,
        user: str = None,
    ) -> Response:
        """Get group by ID.

        Args:
            name (str, optional): name
            group_name (str, optional): groupName
            user (str, optional): user

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/group/{group_name}/{user}"

        return await self.get(url)

    async def snmp_delete_snmp_profile_group_by_id_v1(
        self,
        name: str = None,
        group_name: str = None,
        user: str = None,
    ) -> Response:
        """Delete group by ID.

        Args:
            name (str, optional): name
            group_name (str, optional): groupName
            user (str, optional): user

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/group/{group_name}/{user}"

        return await self.delete(url)

    async def snmp_create_snmp_profile_param_by_id_v1(
        self,
        name: str = None,
        param_name: str = None,
    ) -> Response:
        """Create param by ID.

        Args:
            name (str, optional): name
            param_name (str, optional): paramName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/param/{param_name}"

        return await self.post(url)

    async def snmp_read_snmp_profile_param_by_id_v1(
        self,
        name: str = None,
        param_name: str = None,
    ) -> Response:
        """Get param by ID.

        Args:
            name (str, optional): name
            param_name (str, optional): paramName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/param/{param_name}"

        return await self.get(url)

    async def snmp_delete_snmp_profile_param_by_id_v1(
        self,
        name: str = None,
        param_name: str = None,
    ) -> Response:
        """Delete param by ID.

        Args:
            name (str, optional): name
            param_name (str, optional): paramName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/param/{param_name}"

        return await self.delete(url)

    async def snmp_create_snmp_profile_v3_community_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Create v3-community by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/v3-community/{index}"

        return await self.post(url)

    async def snmp_read_snmp_profile_v3_community_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Get v3-community by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/v3-community/{index}"

        return await self.get(url)

    async def snmp_delete_snmp_profile_v3_community_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Delete v3-community by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/snmp/{name}/v3-community/{index}"

        return await self.delete(url)

    async def speed_test_create_speed_test_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        server_ip: str = None,
        protocol: str = None,
        on_boot: bool = None,
        include_reverse: bool = None,
        time_interval: int = None,
        test_duration: int = None,
        bandwidth: int = None,
        server_port: int = None,
        parallel: int = None,
        omit: int = None,
        window: int = None,
    ) -> Response:
        """Create speed-test by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Speed test profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Speed test profile name.
            description (str): Speed test profile description.
            server_ip (str): IP address of the Iperf server which is used to run the speed test.
            protocol (str): Speed test protocol.  Valid Values: TCP, UDP
            on_boot (bool): Run speed test on boot up.
            include_reverse (bool): The direction of traffic is reversed and sent from the server to
                the client.                                     This option enables Iperf to run the
                speed test for an extended duration.
            time_interval (int): Time interval(in seconds) to run the speed test on a regular basis.
                The minimum time interval is 60 seconds.
            test_duration (int): Speed test duration.
            bandwidth (int): Speed test bandwidth.
            server_port (int): Server port that the client needs to connect to execute the speed
                test.
            parallel (int): Number of parallel client streams.
            omit (int): Number of initial seconds to omit.
            window (int): TCP window size or socket buffer size sent to the server while running
                speed test.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/speed-test"

        json_data = {
            'name': name,
            'description': description,
            'server_ip': server_ip,
            'protocol': protocol,
            'on_boot': on_boot,
            'include_reverse': include_reverse,
            'time_interval': time_interval,
            'test_duration': test_duration,
            'bandwidth': bandwidth,
            'server_port': server_port,
            'parallel': parallel,
            'omit': omit,
            'window': window
        }

        return await self.post(url, json_data=json_data)

    async def speed_test_read_speed_test_v1(
        self,
    ) -> Response:
        """Get speed-test.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/speed-test"

        return await self.get(url)

    async def speed_test_create_speed_test_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/speed-test/{name}"

        return await self.post(url)

    async def speed_test_read_speed_test_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/speed-test/{name}"

        return await self.get(url)

    async def speed_test_delete_speed_test_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/speed-test/{name}"

        return await self.delete(url)

    async def static_mac_create_static_macs_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        static_mac: list = None,
    ) -> Response:
        """Create static-macs by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Static MAC List[Dict[str, Any]] | Dict[str, Any].
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Name for a list of static macs
            description (str): User-defined description for a list of static macs
            static_mac (list): List of static MAC addresses

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/static_macs"

        json_data = {
            'name': name,
            'description': description,
            'static_mac': static_mac
        }

        return await self.post(url, json_data=json_data)

    async def static_mac_read_static_macs_v1(
        self,
    ) -> Response:
        """Get static-macs.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/static-macs"

        return await self.get(url)

    async def static_mac_create_static_macs_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-macs/{name}"

        return await self.post(url)

    async def static_mac_read_static_macs_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-macs/{name}"

        return await self.get(url)

    async def static_mac_delete_static_macs_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-macs/{name}"

        return await self.delete(url)

    async def static_mac_create_static_macs_profile_static_mac_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
        vlan: str = None,
    ) -> Response:
        """Create static-mac by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac
            vlan (str, optional): vlan

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-macs/{name}/static-mac/{mac}/{vlan}"

        return await self.post(url)

    async def static_mac_read_static_macs_profile_static_mac_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
        vlan: str = None,
    ) -> Response:
        """Get static-mac by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac
            vlan (str, optional): vlan

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-macs/{name}/static-mac/{mac}/{vlan}"

        return await self.get(url)

    async def static_mac_delete_static_macs_profile_static_mac_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
        vlan: str = None,
    ) -> Response:
        """Delete static-mac by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac
            vlan (str, optional): vlan

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-macs/{name}/static-mac/{mac}/{vlan}"

        return await self.delete(url)

    async def static_mac_create_static_macs_profile_static_mac_destination_port_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
        vlan: str = None,
    ) -> Response:
        """Create destination-port by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac
            vlan (str, optional): vlan

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-macs/{name}/static-mac/{mac}/{vlan}/destination-port"

        return await self.post(url)

    async def static_mac_read_static_macs_profile_static_mac_destination_port_by_id_v1(
        self,
        name: str = None,
        mac: str = None,
        vlan: str = None,
    ) -> Response:
        """Get destination-port by ID.

        Args:
            name (str, optional): name
            mac (str, optional): mac
            vlan (str, optional): vlan

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-macs/{name}/static-mac/{mac}/{vlan}/destination-port"

        return await self.get(url)

    async def static_route_create_static_route_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        ipv4: list = None,
        ipv6: list = None,
        default_gateway: list = None,
        route_gc_interval: int = None,
        ip_routing: bool = None,
        ipv6_unicast_routing: bool = None,
    ) -> Response:
        """Create static-route by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Static route profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Static route profile name
            description (str): BFD user description.
            ipv4 (list): Configure IPV4 route
            ipv6 (list): Configure IPV6 route
            default_gateway (list): Default gateway
            route_gc_interval (int): Kernel route garbage collection interval.
            ip_routing (bool): Enable IP routing
            ipv6_unicast_routing (bool): Enable unicast IPv6 routing

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/static-route"

        json_data = {
            'name': name,
            'description': description,
            'ipv4': ipv4,
            'ipv6': ipv6,
            'default_gateway': default_gateway,
            'route_gc_interval': route_gc_interval,
            'ip_routing': ip_routing,
            'ipv6_unicast_routing': ipv6_unicast_routing
        }

        return await self.post(url, json_data=json_data)

    async def static_route_read_static_route_v1(
        self,
    ) -> Response:
        """Get static-route.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/static-route"

        return await self.get(url)

    async def static_route_create_static_route_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}"

        return await self.post(url)

    async def static_route_read_static_route_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}"

        return await self.get(url)

    async def static_route_delete_static_route_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}"

        return await self.delete(url)

    async def static_route_create_static_route_profile_ipv4_by_id_v1(
        self,
        name: str = None,
        prefix: str = None,
        vrf: str = None,
    ) -> Response:
        """Create ipv4 by ID.

        Args:
            name (str, optional): name
            prefix (str, optional): prefix
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}/ipv4/{prefix}/{vrf}"

        return await self.post(url)

    async def static_route_read_static_route_profile_ipv4_by_id_v1(
        self,
        name: str = None,
        prefix: str = None,
        vrf: str = None,
    ) -> Response:
        """Get ipv4 by ID.

        Args:
            name (str, optional): name
            prefix (str, optional): prefix
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}/ipv4/{prefix}/{vrf}"

        return await self.get(url)

    async def static_route_delete_static_route_profile_ipv4_by_id_v1(
        self,
        name: str = None,
        prefix: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete ipv4 by ID.

        Args:
            name (str, optional): name
            prefix (str, optional): prefix
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}/ipv4/{prefix}/{vrf}"

        return await self.delete(url)

    async def static_route_create_static_route_profile_ipv6_by_id_v1(
        self,
        name: str = None,
        prefix: str = None,
        vrf: str = None,
    ) -> Response:
        """Create ipv6 by ID.

        Args:
            name (str, optional): name
            prefix (str, optional): prefix
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}/ipv6/{prefix}/{vrf}"

        return await self.post(url)

    async def static_route_read_static_route_profile_ipv6_by_id_v1(
        self,
        name: str = None,
        prefix: str = None,
        vrf: str = None,
    ) -> Response:
        """Get ipv6 by ID.

        Args:
            name (str, optional): name
            prefix (str, optional): prefix
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}/ipv6/{prefix}/{vrf}"

        return await self.get(url)

    async def static_route_delete_static_route_profile_ipv6_by_id_v1(
        self,
        name: str = None,
        prefix: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete ipv6 by ID.

        Args:
            name (str, optional): name
            prefix (str, optional): prefix
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}/ipv6/{prefix}/{vrf}"

        return await self.delete(url)

    async def static_route_create_static_route_profile_ipv6_source_interface_by_id_v1(
        self,
        name: str = None,
        prefix: str = None,
        vrf: str = None,
    ) -> Response:
        """Create source-interface by ID.

        Args:
            name (str, optional): name
            prefix (str, optional): prefix
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}/ipv6/{prefix}/{vrf}/source-interface"

        return await self.post(url)

    async def static_route_read_static_route_profile_ipv6_source_interface_by_id_v1(
        self,
        name: str = None,
        prefix: str = None,
        vrf: str = None,
    ) -> Response:
        """Get source-interface by ID.

        Args:
            name (str, optional): name
            prefix (str, optional): prefix
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}/ipv6/{prefix}/{vrf}/source-interface"

        return await self.get(url)

    async def static_route_create_static_route_profile_default_gateway_by_id_v1(
        self,
        name: str = None,
        dg_name: str = None,
    ) -> Response:
        """Create default-gateway by ID.

        Args:
            name (str, optional): name
            dg_name (str, optional): dgName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}/default-gateway/{dg_name}"

        return await self.post(url)

    async def static_route_read_static_route_profile_default_gateway_by_id_v1(
        self,
        name: str = None,
        dg_name: str = None,
    ) -> Response:
        """Get default-gateway by ID.

        Args:
            name (str, optional): name
            dg_name (str, optional): dgName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}/default-gateway/{dg_name}"

        return await self.get(url)

    async def static_route_delete_static_route_profile_default_gateway_by_id_v1(
        self,
        name: str = None,
        dg_name: str = None,
    ) -> Response:
        """Delete default-gateway by ID.

        Args:
            name (str, optional): name
            dg_name (str, optional): dgName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/static-route/{name}/default-gateway/{dg_name}"

        return await self.delete(url)

    async def stp_create_stp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        bpdu_guard_enable_timer: int = None,
        bpdu_throttle: int = None,
        force_version: str = None,
        config_name: str = None,
        config_revision: int = None,
        mode: str = None,
        extend_system_id: bool = None,
        forward_delay: int = None,
        hello_time: int = None,
        ignore_pvid_inconsistency: bool = None,
        max_age: int = None,
        max_hops: int = None,
        pathcost_type: str = None,
        mstp_pathcost: str = None,
        rpvst_pathcost: str = None,
        cst_log_state_transitions: bool = None,
        priority: int = None,
        rpvst_mstp_interconnect_vlan: int = None,
        root: str = None,
        transmit_hold_count: int = None,
        traps: List[str] = None,
        topology_change_trap: bool = None,
        mstp: list = None,
        rpvst_auto_enable: bool = None,
        rpvst_auto_priority: int = None,
        rpvst_disabled_vlans: List[int] = None,
        rpvst: list = None,
    ) -> Response:
        """Create stp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Profile for STP.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): STP profile name.
            description (str): STP profile description.
            enable (bool): Enable Spanning Tree.
            bpdu_guard_enable_timer (int): Re-enable timeout after receipt of an unauthorized BPDU
            bpdu_throttle (int): BPDU throttle value in packets per second.
            force_version (str): Spanning Tree protocol compatibility mode.  Valid Values:
                STP_COMPATIBLE, RSTP_OPERATION, MSTP_OPERATION
            config_name (str): Multiple Spanning Tree (MST) region configuration name
            config_revision (int): Multiple Spanning Tree (MST) region configuration revision number
            mode (str): Spanning Tree mode.  Valid Values: RPVST, MSTP, RSTP
            extend_system_id (bool): Enables the extended system-id functionality
            forward_delay (int): Device waits between transitioning from listening to learning
                and from learning to forwarding states.
            hello_time (int): Time between messages transmission when the switch is root.
            ignore_pvid_inconsistency (bool): Ignore PVID (Port VLAN ID) inconsistencies and allow,
                RPVST to run on mismatched links.
            max_age (int): Maximum age of received STP information before it is discarded.
            max_hops (int): Max hops value for the Multiple spanning tree.
            pathcost_type (str): Path cost type.  Valid Values: COST_TYPE_LONG, COST_TYPE_SHORT
            mstp_pathcost (str): Standard to use when calculating the default pathcost for MSTP
                mode.  Valid Values: 8021D, 8021T, PROPRIETARY
            rpvst_pathcost (str): Standard to use when calculating the default pathcost for RPVST
                mode.  Valid Values: 8021D, 8021T, PROPRIETARY
            cst_log_state_transitions (bool): Enable log state-transitions for the instance (CST).
            priority (int): Device priority. For CX and PVOS this value will be multiplied by 4096.
            rpvst_mstp_interconnect_vlan (int): RPVST-MSTP interconnect VLAN.
            root (str): Root for the PVST instance.  Valid Values: PRIMARY, SECONDARY
            transmit_hold_count (int): Transmit hold count performance in pps.
            traps (List[str]): traps
            topology_change_trap (bool): Enable topology change notification for the MST instance 0
                (CST).
            mstp (list): STP parameters applicable per MSTP instance.
            rpvst_auto_enable (bool): Enable RPVST auto enable mode.
            rpvst_auto_priority (int): The priority value configured for the RPVST Auto VLANs.
            rpvst_disabled_vlans (List[int]): rpvst-disabled-vlans
            rpvst (list): STP parameters applicable per PVST instance.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/stp"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'bpdu_guard_enable_timer': bpdu_guard_enable_timer,
            'bpdu_throttle': bpdu_throttle,
            'force_version': force_version,
            'config_name': config_name,
            'config_revision': config_revision,
            'mode': mode,
            'extend_system_id': extend_system_id,
            'forward_delay': forward_delay,
            'hello_time': hello_time,
            'ignore_pvid_inconsistency': ignore_pvid_inconsistency,
            'max_age': max_age,
            'max_hops': max_hops,
            'pathcost_type': pathcost_type,
            'mstp_pathcost': mstp_pathcost,
            'rpvst_pathcost': rpvst_pathcost,
            'cst_log_state_transitions': cst_log_state_transitions,
            'priority': priority,
            'rpvst_mstp_interconnect_vlan': rpvst_mstp_interconnect_vlan,
            'root': root,
            'transmit_hold_count': transmit_hold_count,
            'traps': traps,
            'topology_change_trap': topology_change_trap,
            'mstp': mstp,
            'rpvst_auto_enable': rpvst_auto_enable,
            'rpvst_auto_priority': rpvst_auto_priority,
            'rpvst_disabled_vlans': rpvst_disabled_vlans,
            'rpvst': rpvst
        }

        return await self.post(url, json_data=json_data)

    async def stp_read_stp_v1(
        self,
    ) -> Response:
        """Get stp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/stp"

        return await self.get(url)

    async def stp_create_stp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}"

        return await self.post(url)

    async def stp_read_stp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}"

        return await self.get(url)

    async def stp_delete_stp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}"

        return await self.delete(url)

    async def stp_create_stp_profile_traps_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create traps by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/traps"

        return await self.post(url)

    async def stp_read_stp_profile_traps_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get traps by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/traps"

        return await self.get(url)

    async def stp_delete_stp_profile_traps_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete traps by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/traps"

        return await self.delete(url)

    async def stp_create_stp_profile_m_by_id_v1(
        self,
        name: str = None,
        instance_id: str = None,
    ) -> Response:
        """Create mstp by ID.

        Args:
            name (str, optional): name
            instance_id (str, optional): instanceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/mstp/{instance_id}"

        return await self.post(url)

    async def stp_read_stp_profile_m_by_id_v1(
        self,
        name: str = None,
        instance_id: str = None,
    ) -> Response:
        """Get mstp by ID.

        Args:
            name (str, optional): name
            instance_id (str, optional): instanceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/mstp/{instance_id}"

        return await self.get(url)

    async def stp_delete_stp_profile_m_by_id_v1(
        self,
        name: str = None,
        instance_id: str = None,
    ) -> Response:
        """Delete mstp by ID.

        Args:
            name (str, optional): name
            instance_id (str, optional): instanceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/mstp/{instance_id}"

        return await self.delete(url)

    async def stp_create_stp_profile_m_vlans_by_id_v1(
        self,
        name: str = None,
        instance_id: str = None,
    ) -> Response:
        """Create vlans by ID.

        Args:
            name (str, optional): name
            instance_id (str, optional): instanceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/mstp/{instance_id}/vlans"

        return await self.post(url)

    async def stp_read_stp_profile_m_vlans_by_id_v1(
        self,
        name: str = None,
        instance_id: str = None,
    ) -> Response:
        """Get vlans by ID.

        Args:
            name (str, optional): name
            instance_id (str, optional): instanceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/mstp/{instance_id}/vlans"

        return await self.get(url)

    async def stp_delete_stp_profile_m_vlans_by_id_v1(
        self,
        name: str = None,
        instance_id: str = None,
    ) -> Response:
        """Delete vlans by ID.

        Args:
            name (str, optional): name
            instance_id (str, optional): instanceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/mstp/{instance_id}/vlans"

        return await self.delete(url)

    async def stp_create_stp_profile_rpvst_disabled_vlans_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create rpvst-disabled-vlans by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/rpvst-disabled-vlans"

        return await self.post(url)

    async def stp_read_stp_profile_rpvst_disabled_vlans_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get rpvst-disabled-vlans by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/rpvst-disabled-vlans"

        return await self.get(url)

    async def stp_delete_stp_profile_rpvst_disabled_vlans_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete rpvst-disabled-vlans by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/rpvst-disabled-vlans"

        return await self.delete(url)

    async def stp_create_stp_profile_rpvst_by_id_v1(
        self,
        name: str = None,
        vlan: str = None,
    ) -> Response:
        """Create rpvst by ID.

        Args:
            name (str, optional): name
            vlan (str, optional): vlan

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/rpvst/{vlan}"

        return await self.post(url)

    async def stp_read_stp_profile_rpvst_by_id_v1(
        self,
        name: str = None,
        vlan: str = None,
    ) -> Response:
        """Get rpvst by ID.

        Args:
            name (str, optional): name
            vlan (str, optional): vlan

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/rpvst/{vlan}"

        return await self.get(url)

    async def stp_delete_stp_profile_rpvst_by_id_v1(
        self,
        name: str = None,
        vlan: str = None,
    ) -> Response:
        """Delete rpvst by ID.

        Args:
            name (str, optional): name
            vlan (str, optional): vlan

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/rpvst/{vlan}"

        return await self.delete(url)

    async def support_files_create_support_files_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        type: str = None,
        subsystem: str = None,
    ) -> Response:
        """Create support-files by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Support-file profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Support file profile name.
            description (str): Support file profile description.
            type (str): Request type.  Valid Values: ALL, BASIC
            subsystem (str): The subsystem type (e.g. management-card, line-card, stack-member)
                for which the support file has to be collected  Valid Values:
                SUBSYSTEM_TYPE_CHASSIS, SUBSYSTEM_TYPE_FABRIC_CARD, SUBSYSTEM_TYPE_FAN_TRAY,
                SUBSYSTEM_TYPE_LINE_CARD, SUBSYSTEM_TYPE_MANAGEMENT_MODULE,
                SUBSYSTEM_TYPE_MEZZ_CARD, SUBSYSTEM_TYPE_REAR_DISPLAY_CARD,
                SUBSYSTEM_TYPE_SERVICES_CARD, SUBSYSTEM_TYPE_SYSTEM

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/support-files"

        json_data = {
            'name': name,
            'description': description,
            'type': type,
            'subsystem': subsystem
        }

        return await self.post(url, json_data=json_data)

    async def support_files_read_support_files_v1(
        self,
    ) -> Response:
        """Get support-files.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/support-files"

        return await self.get(url)

    async def support_files_create_support_files_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/support-files/{name}"

        return await self.post(url)

    async def support_files_read_support_files_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/support-files/{name}"

        return await self.get(url)

    async def support_files_delete_support_files_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/support-files/{name}"

        return await self.delete(url)

    async def sustainability_create_sustainability_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        time_range: List[str] = None,
        client_aware_enable: bool = False,
    ) -> Response:
        """Create sustainability by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Sustainability profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            time_range (List[str], optional): time-range
            client_aware_enable (bool, optional): AP is client awareness enabled and will not goto
                sleep mode if there're clients connected.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/sustainability"

        json_data = {
            'time_range': time_range,
            'client_aware_enable': client_aware_enable
        }

        return await self.post(url, json_data=json_data)

    async def sustainability_read_sustainability_v1(
        self,
    ) -> Response:
        """Get sustainability.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/sustainability"

        return await self.get(url)

    async def sustainability_create_sustainability_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sustainability/{name}"

        return await self.post(url)

    async def sustainability_read_sustainability_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sustainability/{name}"

        return await self.get(url)

    async def sustainability_delete_sustainability_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sustainability/{name}"

        return await self.delete(url)

    async def sustainability_create_sustainability_profile_power_saving_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create power-saving by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sustainability/{name}/power-saving"

        return await self.post(url)

    async def sustainability_read_sustainability_profile_power_saving_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get power-saving by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sustainability/{name}/power-saving"

        return await self.get(url)

    async def sustainability_create_sustainability_profile_power_saving_time_range_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create time-range by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sustainability/{name}/power-saving/time-range"

        return await self.post(url)

    async def sustainability_read_sustainability_profile_power_saving_time_range_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get time-range by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sustainability/{name}/power-saving/time-range"

        return await self.get(url)

    async def sustainability_delete_sustainability_profile_power_saving_time_range_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete time-range by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sustainability/{name}/power-saving/time-range"

        return await self.delete(url)

    async def sw_port_profile_create_stp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        bpdu_guard_enable_timer: int = None,
        bpdu_throttle: int = None,
        force_version: str = None,
        config_name: str = None,
        config_revision: int = None,
        mode: str = None,
        extend_system_id: bool = None,
        forward_delay: int = None,
        hello_time: int = None,
        ignore_pvid_inconsistency: bool = None,
        max_age: int = None,
        max_hops: int = None,
        pathcost_type: str = None,
        mstp_pathcost: str = None,
        rpvst_pathcost: str = None,
        cst_log_state_transitions: bool = None,
        priority: int = None,
        rpvst_mstp_interconnect_vlan: int = None,
        root: str = None,
        transmit_hold_count: int = None,
        traps: List[str] = None,
        topology_change_trap: bool = None,
        mstp: list = None,
        rpvst_auto_enable: bool = None,
        rpvst_auto_priority: int = None,
        rpvst_disabled_vlans: List[int] = None,
        rpvst: list = None,
    ) -> Response:
        """Create stp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Profile for STP.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): STP profile name.
            description (str): STP profile description.
            enable (bool): Enable Spanning Tree.
            bpdu_guard_enable_timer (int): Re-enable timeout after receipt of an unauthorized BPDU
            bpdu_throttle (int): BPDU throttle value in packets per second.
            force_version (str): Spanning Tree protocol compatibility mode.  Valid Values:
                STP_COMPATIBLE, RSTP_OPERATION, MSTP_OPERATION
            config_name (str): Multiple Spanning Tree (MST) region configuration name
            config_revision (int): Multiple Spanning Tree (MST) region configuration revision number
            mode (str): Spanning Tree mode.  Valid Values: RPVST, MSTP, RSTP
            extend_system_id (bool): Enables the extended system-id functionality
            forward_delay (int): Device waits between transitioning from listening to learning
                and from learning to forwarding states.
            hello_time (int): Time between messages transmission when the switch is root.
            ignore_pvid_inconsistency (bool): Ignore PVID (Port VLAN ID) inconsistencies and allow,
                RPVST to run on mismatched links.
            max_age (int): Maximum age of received STP information before it is discarded.
            max_hops (int): Max hops value for the Multiple spanning tree.
            pathcost_type (str): Path cost type.  Valid Values: COST_TYPE_LONG, COST_TYPE_SHORT
            mstp_pathcost (str): Standard to use when calculating the default pathcost for MSTP
                mode.  Valid Values: 8021D, 8021T, PROPRIETARY
            rpvst_pathcost (str): Standard to use when calculating the default pathcost for RPVST
                mode.  Valid Values: 8021D, 8021T, PROPRIETARY
            cst_log_state_transitions (bool): Enable log state-transitions for the instance (CST).
            priority (int): Device priority. For CX and PVOS this value will be multiplied by 4096.
            rpvst_mstp_interconnect_vlan (int): RPVST-MSTP interconnect VLAN.
            root (str): Root for the PVST instance.  Valid Values: PRIMARY, SECONDARY
            transmit_hold_count (int): Transmit hold count performance in pps.
            traps (List[str]): traps
            topology_change_trap (bool): Enable topology change notification for the MST instance 0
                (CST).
            mstp (list): STP parameters applicable per MSTP instance.
            rpvst_auto_enable (bool): Enable RPVST auto enable mode.
            rpvst_auto_priority (int): The priority value configured for the RPVST Auto VLANs.
            rpvst_disabled_vlans (List[int]): rpvst-disabled-vlans
            rpvst (list): STP parameters applicable per PVST instance.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/stp"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'bpdu_guard_enable_timer': bpdu_guard_enable_timer,
            'bpdu_throttle': bpdu_throttle,
            'force_version': force_version,
            'config_name': config_name,
            'config_revision': config_revision,
            'mode': mode,
            'extend_system_id': extend_system_id,
            'forward_delay': forward_delay,
            'hello_time': hello_time,
            'ignore_pvid_inconsistency': ignore_pvid_inconsistency,
            'max_age': max_age,
            'max_hops': max_hops,
            'pathcost_type': pathcost_type,
            'mstp_pathcost': mstp_pathcost,
            'rpvst_pathcost': rpvst_pathcost,
            'cst_log_state_transitions': cst_log_state_transitions,
            'priority': priority,
            'rpvst_mstp_interconnect_vlan': rpvst_mstp_interconnect_vlan,
            'root': root,
            'transmit_hold_count': transmit_hold_count,
            'traps': traps,
            'topology_change_trap': topology_change_trap,
            'mstp': mstp,
            'rpvst_auto_enable': rpvst_auto_enable,
            'rpvst_auto_priority': rpvst_auto_priority,
            'rpvst_disabled_vlans': rpvst_disabled_vlans,
            'rpvst': rpvst
        }

        return await self.post(url, json_data=json_data)

    async def sw_port_profile_read_stp_v1(
        self,
    ) -> Response:
        """Get stp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/stp"

        return await self.get(url)

    async def sw_port_profile_create_stp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}"

        return await self.post(url)

    async def sw_port_profile_read_stp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}"

        return await self.get(url)

    async def sw_port_profile_delete_stp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}"

        return await self.delete(url)

    async def sw_port_profile_create_stp_profile_traps_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create traps by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/traps"

        return await self.post(url)

    async def sw_port_profile_read_stp_profile_traps_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get traps by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/traps"

        return await self.get(url)

    async def sw_port_profile_delete_stp_profile_traps_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete traps by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/traps"

        return await self.delete(url)

    async def sw_port_profile_create_stp_profile_mstp_by_id_v1(
        self,
        name: str = None,
        instance_id: str = None,
    ) -> Response:
        """Create mstp by ID.

        Args:
            name (str, optional): name
            instance_id (str, optional): instanceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/mstp/{instance_id}"

        return await self.post(url)

    async def sw_port_profile_read_stp_profile_mstp_by_id_v1(
        self,
        name: str = None,
        instance_id: str = None,
    ) -> Response:
        """Get mstp by ID.

        Args:
            name (str, optional): name
            instance_id (str, optional): instanceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/mstp/{instance_id}"

        return await self.get(url)

    async def sw_port_profile_delete_stp_profile_mstp_by_id_v1(
        self,
        name: str = None,
        instance_id: str = None,
    ) -> Response:
        """Delete mstp by ID.

        Args:
            name (str, optional): name
            instance_id (str, optional): instanceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/mstp/{instance_id}"

        return await self.delete(url)

    async def sw_port_profile_create_stp_profile_mstp_vlans_by_id_v1(
        self,
        name: str = None,
        instance_id: str = None,
    ) -> Response:
        """Create vlans by ID.

        Args:
            name (str, optional): name
            instance_id (str, optional): instanceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/mstp/{instance_id}/vlans"

        return await self.post(url)

    async def sw_port_profile_read_stp_profile_mstp_vlans_by_id_v1(
        self,
        name: str = None,
        instance_id: str = None,
    ) -> Response:
        """Get vlans by ID.

        Args:
            name (str, optional): name
            instance_id (str, optional): instanceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/mstp/{instance_id}/vlans"

        return await self.get(url)

    async def sw_port_profile_delete_stp_profile_mstp_vlans_by_id_v1(
        self,
        name: str = None,
        instance_id: str = None,
    ) -> Response:
        """Delete vlans by ID.

        Args:
            name (str, optional): name
            instance_id (str, optional): instanceId

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/mstp/{instance_id}/vlans"

        return await self.delete(url)

    async def sw_port_profile_create_stp_profile_rpvst_disabled_vlans_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create rpvst-disabled-vlans by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/rpvst-disabled-vlans"

        return await self.post(url)

    async def sw_port_profile_read_stp_profile_rpvst_disabled_vlans_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get rpvst-disabled-vlans by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/rpvst-disabled-vlans"

        return await self.get(url)

    async def sw_port_profile_delete_stp_profile_rpvst_disabled_vlans_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete rpvst-disabled-vlans by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/rpvst-disabled-vlans"

        return await self.delete(url)

    async def sw_port_profile_create_stp_profile_rpvst_by_id_v1(
        self,
        name: str = None,
        vlan: str = None,
    ) -> Response:
        """Create rpvst by ID.

        Args:
            name (str, optional): name
            vlan (str, optional): vlan

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/rpvst/{vlan}"

        return await self.post(url)

    async def sw_port_profile_read_stp_profile_rpvst_by_id_v1(
        self,
        name: str = None,
        vlan: str = None,
    ) -> Response:
        """Get rpvst by ID.

        Args:
            name (str, optional): name
            vlan (str, optional): vlan

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/rpvst/{vlan}"

        return await self.get(url)

    async def sw_port_profile_delete_stp_profile_rpvst_by_id_v1(
        self,
        name: str = None,
        vlan: str = None,
    ) -> Response:
        """Delete rpvst by ID.

        Args:
            name (str, optional): name
            vlan (str, optional): vlan

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stp/{name}/rpvst/{vlan}"

        return await self.delete(url)

    async def switch_chassis_create_switch_chassis_by_id_v1(
        self,
        chassis: list,
    ) -> Response:
        """Create switch-chassis by ID.

        Args:
            chassis (list): List of chassis.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/switch-chassis"

        json_data = {
            'chassis': chassis
        }

        return await self.post(url, json_data=json_data)

    async def switch_chassis_read_switch_chassis_v1(
        self,
    ) -> Response:
        """Get switch-chassis.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/switch-chassis"

        return await self.get(url)

    async def switch_chassis_create_switch_chassis_chassis_by_id_v1(
        self,
        chassis_name: str = None,
    ) -> Response:
        """Create chassis by ID.

        Args:
            chassis_name (str, optional): chassisName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-chassis/{chassis_name}"

        return await self.post(url)

    async def switch_chassis_read_switch_chassis_chassis_by_id_v1(
        self,
        chassis_name: str = None,
    ) -> Response:
        """Get chassis by ID.

        Args:
            chassis_name (str, optional): chassisName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-chassis/{chassis_name}"

        return await self.get(url)

    async def switch_chassis_delete_switch_chassis_chassis_by_id_v1(
        self,
        chassis_name: str = None,
    ) -> Response:
        """Delete chassis by ID.

        Args:
            chassis_name (str, optional): chassisName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-chassis/{chassis_name}"

        return await self.delete(url)

    async def switch_chassis_create_switch_chassis_chassis_line_modules_by_id_v1(
        self,
        chassis_name: str = None,
        line_modul_ename: str = None,
    ) -> Response:
        """Create line-modules by ID.

        Args:
            chassis_name (str, optional): chassisName
            line_modul_ename (str, optional): lineModuleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-chassis/{chassis_name}/line-modules/{line_modul_ename}"

        return await self.post(url)

    async def switch_chassis_read_switch_chassis_chassis_line_modules_by_id_v1(
        self,
        chassis_name: str = None,
        line_modul_ename: str = None,
    ) -> Response:
        """Get line-modules by ID.

        Args:
            chassis_name (str, optional): chassisName
            line_modul_ename (str, optional): lineModuleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-chassis/{chassis_name}/line-modules/{line_modul_ename}"

        return await self.get(url)

    async def switch_chassis_delete_switch_chassis_chassis_line_modules_by_id_v1(
        self,
        chassis_name: str = None,
        line_modul_ename: str = None,
    ) -> Response:
        """Delete line-modules by ID.

        Args:
            chassis_name (str, optional): chassisName
            line_modul_ename (str, optional): lineModuleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-chassis/{chassis_name}/line-modules/{line_modul_ename}"

        return await self.delete(url)

    async def switch_chassis_create_switch_chassis_chassis_fabric_modules_by_id_v1(
        self,
        chassis_name: str = None,
        fabric_modul_ename: str = None,
    ) -> Response:
        """Create fabric-modules by ID.

        Args:
            chassis_name (str, optional): chassisName
            fabric_modul_ename (str, optional): fabricModuleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-chassis/{chassis_name}/fabric-modules/{fabric_modul_ename}"

        return await self.post(url)

    async def switch_chassis_read_switch_chassis_chassis_fabric_modules_by_id_v1(
        self,
        chassis_name: str = None,
        fabric_modul_ename: str = None,
    ) -> Response:
        """Get fabric-modules by ID.

        Args:
            chassis_name (str, optional): chassisName
            fabric_modul_ename (str, optional): fabricModuleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-chassis/{chassis_name}/fabric-modules/{fabric_modul_ename}"

        return await self.get(url)

    async def switch_chassis_delete_switch_chassis_chassis_fabric_modules_by_id_v1(
        self,
        chassis_name: str = None,
        fabric_modul_ename: str = None,
    ) -> Response:
        """Delete fabric-modules by ID.

        Args:
            chassis_name (str, optional): chassisName
            fabric_modul_ename (str, optional): fabricModuleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-chassis/{chassis_name}/fabric-modules/{fabric_modul_ename}"

        return await self.delete(url)

    async def switch_chassis_create_switch_chassis_chassis_power_by_id_v1(
        self,
        chassis_name: str = None,
    ) -> Response:
        """Create power by ID.

        Args:
            chassis_name (str, optional): chassisName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-chassis/{chassis_name}/power"

        return await self.post(url)

    async def switch_chassis_read_switch_chassis_chassis_power_by_id_v1(
        self,
        chassis_name: str = None,
    ) -> Response:
        """Get power by ID.

        Args:
            chassis_name (str, optional): chassisName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-chassis/{chassis_name}/power"

        return await self.get(url)

    async def switch_chassis_create_switch_chassis_chassis_redundant_management_by_id_v1(
        self,
        chassis_name: str = None,
    ) -> Response:
        """Create redundant-management by ID.

        Args:
            chassis_name (str, optional): chassisName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-chassis/{chassis_name}/redundant-management"

        return await self.post(url)

    async def switch_chassis_read_switch_chassis_chassis_redundant_management_by_id_v1(
        self,
        chassis_name: str = None,
    ) -> Response:
        """Get redundant-management by ID.

        Args:
            chassis_name (str, optional): chassisName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-chassis/{chassis_name}/redundant-management"

        return await self.get(url)

    async def switch_profiles_create_switch_profiles_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        selected: str = None,
    ) -> Response:
        """Create switch-profiles by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of switch profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Switch profile name
            description (str): Switch profile description
            selected (str): Selected Profile  Valid Values: ALL, BASE, BASIC, ADVANCED, L3_CORE,
                L3_AGG, SPINE, LEAF, CORE_SPINE, AGGREGATION_LEAF, LEAF_EXTENDED, DEFAULT,
                V2_DEFAULT, V2_AGGREGATION_HIGH_BANDWIDTH, V2_CORE_HIGH_BANDWIDTH,
                V2_LEAF_EXTENDED_HIGH_BANDWIDTH

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/switch-profiles"

        json_data = {
            'name': name,
            'description': description,
            'selected': selected
        }

        return await self.post(url, json_data=json_data)

    async def switch_profiles_read_switch_profiles_v1(
        self,
    ) -> Response:
        """Get switch-profiles.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/switch-profiles"

        return await self.get(url)

    async def switch_profiles_create_switch_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-profiles/{name}"

        return await self.post(url)

    async def switch_profiles_read_switch_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-profiles/{name}"

        return await self.get(url)

    async def switch_profiles_delete_switch_profiles_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/switch-profiles/{name}"

        return await self.delete(url)

    async def switch_stack_create_stacks_by_id_v1(
        self,
        stack: list,
    ) -> Response:
        """Create stacks by ID.

        Args:
            stack (list): List of stacks.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/stacks"

        json_data = {
            'stack': stack
        }

        return await self.post(url, json_data=json_data)

    async def switch_stack_read_stacks_v1(
        self,
    ) -> Response:
        """Get stacks.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/stacks"

        return await self.get(url)

    async def switch_stack_create_stacks_stack_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create stack by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stacks/{name}"

        return await self.post(url)

    async def switch_stack_read_stacks_stack_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get stack by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stacks/{name}"

        return await self.get(url)

    async def switch_stack_delete_stacks_stack_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete stack by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stacks/{name}"

        return await self.delete(url)

    async def switch_stack_create_stacks_stack_lldp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create lldp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stacks/{name}/lldp"

        return await self.post(url)

    async def switch_stack_read_stacks_stack_lldp_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get lldp by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stacks/{name}/lldp"

        return await self.get(url)

    async def switch_stack_create_stacks_stack_members_by_id_v1(
        self,
        name: str = None,
        id: str = None,
        sku: str = None,
    ) -> Response:
        """Create members by ID.

        Args:
            name (str, optional): name
            id (str, optional): id
            sku (str, optional): sku

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stacks/{name}/members/{id}/{sku}"

        return await self.post(url)

    async def switch_stack_read_stacks_stack_members_by_id_v1(
        self,
        name: str = None,
        id: str = None,
        sku: str = None,
    ) -> Response:
        """Get members by ID.

        Args:
            name (str, optional): name
            id (str, optional): id
            sku (str, optional): sku

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stacks/{name}/members/{id}/{sku}"

        return await self.get(url)

    async def switch_stack_delete_stacks_stack_members_by_id_v1(
        self,
        name: str = None,
        id: str = None,
        sku: str = None,
    ) -> Response:
        """Delete members by ID.

        Args:
            name (str, optional): name
            id (str, optional): id
            sku (str, optional): sku

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stacks/{name}/members/{id}/{sku}"

        return await self.delete(url)

    async def switch_stack_create_stacks_stack_members_links_by_id_v1(
        self,
        name: str = None,
        id: str = None,
        sku: str = None,
    ) -> Response:
        """Create links by ID.

        Args:
            name (str, optional): name
            id (str, optional): id
            sku (str, optional): sku

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stacks/{name}/members/{id}/{sku}/links"

        return await self.post(url)

    async def switch_stack_read_stacks_stack_members_links_by_id_v1(
        self,
        name: str = None,
        id: str = None,
        sku: str = None,
    ) -> Response:
        """Get links by ID.

        Args:
            name (str, optional): name
            id (str, optional): id
            sku (str, optional): sku

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/stacks/{name}/members/{id}/{sku}/links"

        return await self.get(url)

    async def sysmon_create_sysmon_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        polling: bool = None,
        poll_interval: int = None,
    ) -> Response:
        """Create sysmon by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): System monitor configuration profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): System monitor profile name.
            description (str): System monitor profile description.
            polling (bool): Enable the system monitor data polling.
            poll_interval (int): System monitor  polling interval (sec).

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/sysmon"

        json_data = {
            'name': name,
            'description': description,
            'polling': polling,
            'poll_interval': poll_interval
        }

        return await self.post(url, json_data=json_data)

    async def sysmon_read_sysmon_v1(
        self,
    ) -> Response:
        """Get sysmon.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/sysmon"

        return await self.get(url)

    async def sysmon_create_sysmon_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sysmon/{name}"

        return await self.post(url)

    async def sysmon_read_sysmon_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sysmon/{name}"

        return await self.get(url)

    async def sysmon_delete_sysmon_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/sysmon/{name}"

        return await self.delete(url)

    async def system_hidden_create_system_hiddens_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enforce_vlan: str = None,
        customize_mgmt_vlan: bool = None,
    ) -> Response:
        """Create system-hiddens by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): System hidden profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): System hidden profile name.
            description (str): System hidden profile description.
            enforce_vlan (str): Uplink VLAN type name.  Valid Values: ALL, NATIVE_VLAN
            customize_mgmt_vlan (bool): Management vlan

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-hiddens"

        json_data = {
            'name': name,
            'description': description,
            'enforce_vlan': enforce_vlan,
            'customize_mgmt_vlan': customize_mgmt_vlan
        }

        return await self.post(url, json_data=json_data)

    async def system_hidden_read_system_hiddens_v1(
        self,
    ) -> Response:
        """Get system-hiddens.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-hiddens"

        return await self.get(url)

    async def system_hidden_create_system_hiddens_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/system-hiddens/{name}"

        return await self.post(url)

    async def system_hidden_read_system_hiddens_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/system-hiddens/{name}"

        return await self.get(url)

    async def system_hidden_delete_system_hiddens_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/system-hiddens/{name}"

        return await self.delete(url)

    async def system_info_create_system_info_by_id_v1(
        self,
        hostname: str,
        groupname: str,
        version: str,
        contact: str,
        location: str,
        sys_description: str,
        snmpv3_local_engine_id: str,
        snmpv3_user_engine_id: str,
        device_interface_type: str,
        device_vlan: int,
        device_interface_type_: str,
        device_vlan_: int,
        device_address: str,
    ) -> Response:
        """Create system-info by ID.

        Args:
            hostname (str): The hostname is used an default prompt.
            groupname (str): When AP is added to group, central pushes the groupname.
            version (str): AP version number.
            contact (str): System Contact Information.
            location (str): System Location Information.
            sys_description (str): System Description Information.
            snmpv3_local_engine_id (str): Engine id of the system.
            snmpv3_user_engine_id (str): User defined engine id of the system.
            device_interface_type (str): Device Interface Type  Valid Values: LOOPBACK, VLAN
            device_vlan (int): VLAN Identifier
            device_interface_type (str): Device Interface Type  Valid Values: LOOPBACK, VLAN
            device_vlan (int): VLAN Identifier
            device_address (str): IPv6 Address

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-info"

        json_data = {
            'hostname': hostname,
            'groupname': groupname,
            'version': version,
            'contact': contact,
            'location': location,
            'sys_description': sys_description,
            'snmpv3_local_engine_id': snmpv3_local_engine_id,
            'snmpv3_user_engine_id': snmpv3_user_engine_id,
            'device_interface_type': device_interface_type,
            'device_vlan': device_vlan,
            'device_interface_type_': device_interface_type,
            'device_vlan_': device_vlan,
            'device_address': device_address
        }

        return await self.post(url, json_data=json_data)

    async def system_info_read_system_info_v1(
        self,
    ) -> Response:
        """Get system-info.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-info"

        return await self.get(url)

    async def system_info_create_system_info_ipv4_configuration_by_id_v1(
        self,
        device_interface_type: str,
        device_vlan: int,
    ) -> Response:
        """Create ipv4-configuration by ID.

        Args:
            device_interface_type (str): Device Interface Type  Valid Values: LOOPBACK, VLAN
            device_vlan (int): VLAN Identifier

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-info/ipv4-configuration"

        json_data = {
            'device_interface_type': device_interface_type,
            'device_vlan': device_vlan
        }

        return await self.post(url, json_data=json_data)

    async def system_info_read_system_info_ipv4_configuration_v1(
        self,
    ) -> Response:
        """Get ipv4-configuration.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-info/ipv4-configuration"

        return await self.get(url)

    async def system_info_create_system_info_ipv6_configuration_by_id_v1(
        self,
        device_interface_type: str,
        device_vlan: int,
        device_address: str,
    ) -> Response:
        """Create ipv6-configuration by ID.

        Args:
            device_interface_type (str): Device Interface Type  Valid Values: LOOPBACK, VLAN
            device_vlan (int): VLAN Identifier
            device_address (str): IPv6 Address

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-info/ipv6-configuration"

        json_data = {
            'device_interface_type': device_interface_type,
            'device_vlan': device_vlan,
            'device_address': device_address
        }

        return await self.post(url, json_data=json_data)

    async def system_info_read_system_info_ipv6_configuration_v1(
        self,
    ) -> Response:
        """Get ipv6-configuration.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-info/ipv6-configuration"

        return await self.get(url)

    async def system_create_system_info_by_id_v1(
        self,
        hostname: str,
        groupname: str,
        version: str,
        contact: str,
        location: str,
        sys_description: str,
        snmpv3_local_engine_id: str,
        snmpv3_user_engine_id: str,
        device_interface_type: str,
        device_vlan: int,
        device_interface_type_: str,
        device_vlan_: int,
        device_address: str,
    ) -> Response:
        """Create system-info by ID.

        Args:
            hostname (str): The hostname is used an default prompt.
            groupname (str): When AP is added to group, central pushes the groupname.
            version (str): AP version number.
            contact (str): System Contact Information.
            location (str): System Location Information.
            sys_description (str): System Description Information.
            snmpv3_local_engine_id (str): Engine id of the system.
            snmpv3_user_engine_id (str): User defined engine id of the system.
            device_interface_type (str): Device Interface Type  Valid Values: LOOPBACK, VLAN
            device_vlan (int): VLAN Identifier
            device_interface_type (str): Device Interface Type  Valid Values: LOOPBACK, VLAN
            device_vlan (int): VLAN Identifier
            device_address (str): IPv6 Address

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-info"

        json_data = {
            'hostname': hostname,
            'groupname': groupname,
            'version': version,
            'contact': contact,
            'location': location,
            'sys_description': sys_description,
            'snmpv3_local_engine_id': snmpv3_local_engine_id,
            'snmpv3_user_engine_id': snmpv3_user_engine_id,
            'device_interface_type': device_interface_type,
            'device_vlan': device_vlan,
            'device_interface_type_': device_interface_type,
            'device_vlan_': device_vlan,
            'device_address': device_address
        }

        return await self.post(url, json_data=json_data)

    async def system_read_system_info_v1(
        self,
    ) -> Response:
        """Get system-info.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-info"

        return await self.get(url)

    async def system_create_system_info_ipv4_configuration_by_id_v1(
        self,
        device_interface_type: str,
        device_vlan: int,
    ) -> Response:
        """Create ipv4-configuration by ID.

        Args:
            device_interface_type (str): Device Interface Type  Valid Values: LOOPBACK, VLAN
            device_vlan (int): VLAN Identifier

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-info/ipv4-configuration"

        json_data = {
            'device_interface_type': device_interface_type,
            'device_vlan': device_vlan
        }

        return await self.post(url, json_data=json_data)

    async def system_read_system_info_ipv4_configuration_v1(
        self,
    ) -> Response:
        """Get ipv4-configuration.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-info/ipv4-configuration"

        return await self.get(url)

    async def system_create_system_info_ipv6_configuration_by_id_v1(
        self,
        device_interface_type: str,
        device_vlan: int,
        device_address: str,
    ) -> Response:
        """Create ipv6-configuration by ID.

        Args:
            device_interface_type (str): Device Interface Type  Valid Values: LOOPBACK, VLAN
            device_vlan (int): VLAN Identifier
            device_address (str): IPv6 Address

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-info/ipv6-configuration"

        json_data = {
            'device_interface_type': device_interface_type,
            'device_vlan': device_vlan,
            'device_address': device_address
        }

        return await self.post(url, json_data=json_data)

    async def system_read_system_info_ipv6_configuration_v1(
        self,
    ) -> Response:
        """Get ipv6-configuration.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/system-info/ipv6-configuration"

        return await self.get(url)

    async def telemetry_create_telemetry_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        auth_stats: bool = None,
        dns_stats: bool = None,
        dhcp_stats: bool = None,
        sta_stats: bool = None,
    ) -> Response:
        """Create telemetry by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Telemetry profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Telemetry profile name.
            description (str): Telemetry profile description.
            auth_stats (bool): Enables the client authentication statistics on the AP
            dns_stats (bool): Enables the DNS statistics on the AP
            dhcp_stats (bool): Enables the DHCP statistics on the AP
            sta_stats (bool): Enables the station passive monitor statistics on the AP

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/telemetry"

        json_data = {
            'name': name,
            'description': description,
            'auth_stats': auth_stats,
            'dns_stats': dns_stats,
            'dhcp_stats': dhcp_stats,
            'sta_stats': sta_stats
        }

        return await self.post(url, json_data=json_data)

    async def telemetry_read_telemetry_v1(
        self,
    ) -> Response:
        """Get telemetry.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/telemetry"

        return await self.get(url)

    async def telemetry_create_telemetry_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/telemetry/{name}"

        return await self.post(url)

    async def telemetry_read_telemetry_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/telemetry/{name}"

        return await self.get(url)

    async def telemetry_delete_telemetry_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/telemetry/{name}"

        return await self.delete(url)

    async def timerange_create_time_ranges_by_id_v1(
        self,
        name: str,
        description: str,
        range_type: str,
        start_date_time: str,
        end_date_time: str,
        rangelist: list,
    ) -> Response:
        """Create time-ranges by ID.

        Args:
            name (str): Time Range name.
            description (str): Time Range profile description.
            range_type (str): Time Range absolute or periodic.  Valid Values: ABSOLUTE, PERIODIC
            start_date_time (str): Start date and time.
            end_date_time (str): End date and time.
            rangelist (list): List of periodic time ranges.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/time-ranges"

        json_data = {
            'name': name,
            'description': description,
            'range_type': range_type,
            'start_date_time': start_date_time,
            'end_date_time': end_date_time,
            'rangelist': rangelist
        }

        return await self.post(url, json_data=json_data)

    async def timerange_read_time_ranges_v1(
        self,
    ) -> Response:
        """Get time-ranges.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/time-ranges"

        return await self.get(url)

    async def timerange_create_time_ranges_time_range_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create time-range by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/time-ranges/{name}"

        return await self.post(url)

    async def timerange_read_time_ranges_time_range_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get time-range by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/time-ranges/{name}"

        return await self.get(url)

    async def timerange_delete_time_ranges_time_range_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete time-range by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/time-ranges/{name}"

        return await self.delete(url)

    async def timerange_create_time_ranges_time_range_rangelist_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Create rangelist by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/time-ranges/{name}/rangelist/{index}"

        return await self.post(url)

    async def timerange_read_time_ranges_time_range_rangelist_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Get rangelist by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/time-ranges/{name}/rangelist/{index}"

        return await self.get(url)

    async def timerange_delete_time_ranges_time_range_rangelist_by_id_v1(
        self,
        name: str = None,
        index: str = None,
    ) -> Response:
        """Delete rangelist by ID.

        Args:
            name (str, optional): name
            index (str, optional): index

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/time-ranges/{name}/rangelist/{index}"

        return await self.delete(url)

    async def traffic_insight_create_traffic_insight_by_id_v1(
        self,
        instance: list,
    ) -> Response:
        """Create traffic-insight by ID.

        Args:
            instance (list): List of traffic insight instances.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/traffic-insight"

        json_data = {
            'instance': instance
        }

        return await self.post(url, json_data=json_data)

    async def traffic_insight_read_traffic_insight_v1(
        self,
    ) -> Response:
        """Get traffic-insight.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/traffic-insight"

        return await self.get(url)

    async def traffic_insight_create_traffic_insight_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/traffic-insight/{name}"

        return await self.post(url)

    async def traffic_insight_read_traffic_insight_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/traffic-insight/{name}"

        return await self.get(url)

    async def traffic_insight_delete_traffic_insight_instance_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete instance by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/traffic-insight/{name}"

        return await self.delete(url)

    async def traffic_insight_create_traffic_insight_instance_monitor_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
        type: str = None,
    ) -> Response:
        """Create monitor by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitorName
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/traffic-insight/{name}/monitor/{monitor_name}/{type}"

        return await self.post(url)

    async def traffic_insight_read_traffic_insight_instance_monitor_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
        type: str = None,
    ) -> Response:
        """Get monitor by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitorName
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/traffic-insight/{name}/monitor/{monitor_name}/{type}"

        return await self.get(url)

    async def traffic_insight_delete_traffic_insight_instance_monitor_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
        type: str = None,
    ) -> Response:
        """Delete monitor by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitorName
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/traffic-insight/{name}/monitor/{monitor_name}/{type}"

        return await self.delete(url)

    async def traffic_insight_create_traffic_insight_instance_monitor_single_value_filter_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
        type: str = None,
    ) -> Response:
        """Create single-value-filter by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitorName
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/traffic-insight/{name}/monitor/{monitor_name}/{type}/single-value-filter"

        return await self.post(url)

    async def traffic_insight_read_traffic_insight_instance_monitor_single_value_filter_by_id_v1(
        self,
        name: str = None,
        monitor_name: str = None,
        type: str = None,
    ) -> Response:
        """Get single-value-filter by ID.

        Args:
            name (str, optional): name
            monitor_name (str, optional): monitorName
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/traffic-insight/{name}/monitor/{monitor_name}/{type}/single-value-filter"

        return await self.get(url)

    async def ubt_create_ubt_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        zone: list = None,
        mode: str = None,
        client_vid: int = None,
    ) -> Response:
        """Create ubt by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): All UBT Profile configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): UBT profile name.
            description (str): UBT profile description.
            zone (list): UBT zone specific configuration list
            mode (str): UBT VLAN mode configuration  Valid Values: VLAN_EXTEND, LOCAL_VLAN
            client_vid (int): VLAN-ID assigned to clients whose traffic is being redirected
                to the UBT cluster.This is not set when the UBT mode
                is set to VLAN_EXTEND.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ubt"

        json_data = {
            'name': name,
            'description': description,
            'zone': zone,
            'mode': mode,
            'client_vid': client_vid
        }

        return await self.post(url, json_data=json_data)

    async def ubt_read_ubt_v1(
        self,
    ) -> Response:
        """Get ubt.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ubt"

        return await self.get(url)

    async def ubt_create_ubt_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ubt/{name}"

        return await self.post(url)

    async def ubt_read_ubt_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ubt/{name}"

        return await self.get(url)

    async def ubt_delete_ubt_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ubt/{name}"

        return await self.delete(url)

    async def ubt_create_ubt_profile_zone_by_id_v1(
        self,
        name: str = None,
        zone_name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create zone by ID.

        Args:
            name (str, optional): name
            zone_name (str, optional): zoneName
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ubt/{name}/zone/{zone_name}/{vrf}"

        return await self.post(url)

    async def ubt_read_ubt_profile_zone_by_id_v1(
        self,
        name: str = None,
        zone_name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get zone by ID.

        Args:
            name (str, optional): name
            zone_name (str, optional): zoneName
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ubt/{name}/zone/{zone_name}/{vrf}"

        return await self.get(url)

    async def ubt_delete_ubt_profile_zone_by_id_v1(
        self,
        name: str = None,
        zone_name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete zone by ID.

        Args:
            name (str, optional): name
            zone_name (str, optional): zoneName
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ubt/{name}/zone/{zone_name}/{vrf}"

        return await self.delete(url)

    async def ubt_create_ubt_profile_zone_p_security_key_by_id_v1(
        self,
        name: str = None,
        zone_name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create papi-security-key by ID.

        Args:
            name (str, optional): name
            zone_name (str, optional): zoneName
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ubt/{name}/zone/{zone_name}/{vrf}/papi-security-key"

        return await self.post(url)

    async def ubt_read_ubt_profile_zone_p_security_key_by_id_v1(
        self,
        name: str = None,
        zone_name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get papi-security-key by ID.

        Args:
            name (str, optional): name
            zone_name (str, optional): zoneName
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ubt/{name}/zone/{zone_name}/{vrf}/papi-security-key"

        return await self.get(url)

    async def ubt_create_ubt_profile_zone_wol_vlans_by_id_v1(
        self,
        name: str = None,
        zone_name: str = None,
        vrf: str = None,
    ) -> Response:
        """Create wol-vlans by ID.

        Args:
            name (str, optional): name
            zone_name (str, optional): zoneName
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ubt/{name}/zone/{zone_name}/{vrf}/wol-vlans"

        return await self.post(url)

    async def ubt_read_ubt_profile_zone_wol_vlans_by_id_v1(
        self,
        name: str = None,
        zone_name: str = None,
        vrf: str = None,
    ) -> Response:
        """Get wol-vlans by ID.

        Args:
            name (str, optional): name
            zone_name (str, optional): zoneName
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ubt/{name}/zone/{zone_name}/{vrf}/wol-vlans"

        return await self.get(url)

    async def ubt_delete_ubt_profile_zone_wol_vlans_by_id_v1(
        self,
        name: str = None,
        zone_name: str = None,
        vrf: str = None,
    ) -> Response:
        """Delete wol-vlans by ID.

        Args:
            name (str, optional): name
            zone_name (str, optional): zoneName
            vrf (str, optional): vrf

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ubt/{name}/zone/{zone_name}/{vrf}/wol-vlans"

        return await self.delete(url)

    async def ucc_create_ucc_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        central_visibility: bool = None,
        skype4b_priority_voice: int = None,
        skype4b_priority_video: int = None,
        teams_priority_voice: int = None,
        teams_priority_video: int = None,
        webrtc_priority_voice: int = None,
        webrtc_priority_video: int = None,
        sip_priority_voice: int = None,
        sip_priority_video: int = None,
        wificalling_priority_voice: int = None,
        zoom_priority_voice: int = None,
        zoom_priority_video: int = None,
        otherapps_priority_video: int = None,
        voice_tracking_snmptrap: bool = None,
        netsvc_sip: list = None,
        wificall_dns_pattern: List[str] = None,
    ) -> Response:
        """Create ucc by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for UCC parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): UCC profile name.
            description (str): UCC profile description.
            central_visibility (bool): Allow AP to send Voice Call Data Records to Aruba central.
            skype4b_priority_voice (int): Voice priority for Microsoft Skype for business App when
                detected in firewall
            skype4b_priority_video (int): Video priority for Microsoft skype for business App when
                detected in firewall
            teams_priority_voice (int): Voice priority for Microsoft Teams for business App when
                detected in firewall
            teams_priority_video (int): Video priority for Microsoft Teams for business App when
                detected in firewall
            webrtc_priority_voice (int): Voice priority for WebRTC protocol when detected in
                firewall
            webrtc_priority_video (int): Default video priority for WebRTC protocol when detected in
                firewall
            sip_priority_voice (int): SIP voice priority when detected in firewall
            sip_priority_video (int): SIP video priority when detected in firewall
            wificalling_priority_voice (int): WiFI calling voice priority when detected in firewall
            zoom_priority_voice (int): Zoom voice priority when detected in firewall
            zoom_priority_video (int): Zoom video priority when detected in firewall
            otherapps_priority_video (int): Default video priority for other VOIP applications when
                detected in firewall
            voice_tracking_snmptrap (bool): Enables sending SNMP Traps to SNMP server when voice
                calls are detected
            netsvc_sip (list): Netservice SIP configuration.
            wificall_dns_pattern (List[str]): wificall-dns-pattern

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ucc"

        json_data = {
            'name': name,
            'description': description,
            'central_visibility': central_visibility,
            'skype4b_priority_voice': skype4b_priority_voice,
            'skype4b_priority_video': skype4b_priority_video,
            'teams_priority_voice': teams_priority_voice,
            'teams_priority_video': teams_priority_video,
            'webrtc_priority_voice': webrtc_priority_voice,
            'webrtc_priority_video': webrtc_priority_video,
            'sip_priority_voice': sip_priority_voice,
            'sip_priority_video': sip_priority_video,
            'wificalling_priority_voice': wificalling_priority_voice,
            'zoom_priority_voice': zoom_priority_voice,
            'zoom_priority_video': zoom_priority_video,
            'otherapps_priority_video': otherapps_priority_video,
            'voice_tracking_snmptrap': voice_tracking_snmptrap,
            'netsvc_sip': netsvc_sip,
            'wificall_dns_pattern': wificall_dns_pattern
        }

        return await self.post(url, json_data=json_data)

    async def ucc_read_ucc_v1(
        self,
    ) -> Response:
        """Get ucc.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ucc"

        return await self.get(url)

    async def ucc_create_ucc_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}"

        return await self.post(url)

    async def ucc_read_ucc_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}"

        return await self.get(url)

    async def ucc_delete_ucc_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}"

        return await self.delete(url)

    async def ucc_create_ucc_profile_netsvc_sip_by_id_v1(
        self,
        name: str = None,
        port: str = None,
        protocol: str = None,
    ) -> Response:
        """Create netsvc-sip by ID.

        Args:
            name (str, optional): name
            port (str, optional): port
            protocol (str, optional): protocol

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}/netsvc-sip/{port}/{protocol}"

        return await self.post(url)

    async def ucc_read_ucc_profile_netsvc_sip_by_id_v1(
        self,
        name: str = None,
        port: str = None,
        protocol: str = None,
    ) -> Response:
        """Get netsvc-sip by ID.

        Args:
            name (str, optional): name
            port (str, optional): port
            protocol (str, optional): protocol

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}/netsvc-sip/{port}/{protocol}"

        return await self.get(url)

    async def ucc_delete_ucc_profile_netsvc_sip_by_id_v1(
        self,
        name: str = None,
        port: str = None,
        protocol: str = None,
    ) -> Response:
        """Delete netsvc-sip by ID.

        Args:
            name (str, optional): name
            port (str, optional): port
            protocol (str, optional): protocol

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}/netsvc-sip/{port}/{protocol}"

        return await self.delete(url)

    async def ucc_create_ucc_profile_wificall_dns_pattern_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create wificall-dns-pattern by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}/wificall-dns-pattern"

        return await self.post(url)

    async def ucc_read_ucc_profile_wificall_dns_pattern_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get wificall-dns-pattern by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}/wificall-dns-pattern"

        return await self.get(url)

    async def ucc_delete_ucc_profile_wificall_dns_pattern_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete wificall-dns-pattern by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}/wificall-dns-pattern"

        return await self.delete(url)

    async def udld_create_udld_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        mode: str = None,
        interval: int = None,
        retries: int = None,
    ) -> Response:
        """Create udld by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): UDLD profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): UDLD profile name.
            description (str): UDLD profile description.
            mode (str): Mode of operation for UDLD.  Valid Values: FORWARD_VERIFY, VERIFY_FORWARD
            interval (int): Packet interval.
            retries (int): number of retries.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/udld"

        json_data = {
            'name': name,
            'description': description,
            'mode': mode,
            'interval': interval,
            'retries': retries
        }

        return await self.post(url, json_data=json_data)

    async def udld_read_udld_v1(
        self,
    ) -> Response:
        """Get udld.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/udld"

        return await self.get(url)

    async def udld_create_udld_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/udld/{name}"

        return await self.post(url)

    async def udld_read_udld_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/udld/{name}"

        return await self.get(url)

    async def udld_delete_udld_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/udld/{name}"

        return await self.delete(url)

    async def udp_broadcast_forwarder_create_udp_broadcast_forwarders_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
    ) -> Response:
        """Create udp-broadcast-forwarders by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for UDP Broadcast Forwarder Configurations
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): UDP Broadcast Forwarder profile name.
            description (str): UDP Broadcast Forwarder profile description.
            enable (bool): Enables UDP Broadcast Forwarding.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/udp-broadcast-forwarders"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable
        }

        return await self.post(url, json_data=json_data)

    async def udp_broadcast_forwarder_read_udp_broadcast_forwarders_v1(
        self,
    ) -> Response:
        """Get udp-broadcast-forwarders.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/udp-broadcast-forwarders"

        return await self.get(url)

    async def udp_broadcast_forwarder_create_udp_broadcast_forwarders_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/udp-broadcast-forwarders/{name}"

        return await self.post(url)

    async def udp_broadcast_forwarder_read_udp_broadcast_forwarders_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/udp-broadcast-forwarders/{name}"

        return await self.get(url)

    async def udp_broadcast_forwarder_delete_udp_broadcast_forwarders_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/udp-broadcast-forwarders/{name}"

        return await self.delete(url)

    async def ufd_create_ufd_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        sessions: list = None,
    ) -> Response:
        """Create ufd by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Uplink Failure Detection Profile.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): Uplink Failure Detection profile name.
            description (str): Uplink Failure Detection profile description.
            enable (bool): Enable Uplink failure Detection.
            sessions (list): Uplink Failure Detection session.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ufd"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'sessions': sessions
        }

        return await self.post(url, json_data=json_data)

    async def ufd_read_ufd_v1(
        self,
    ) -> Response:
        """Get ufd.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ufd"

        return await self.get(url)

    async def ufd_create_ufd_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ufd/{name}"

        return await self.post(url)

    async def ufd_read_ufd_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ufd/{name}"

        return await self.get(url)

    async def ufd_delete_ufd_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ufd/{name}"

        return await self.delete(url)

    async def ufd_create_ufd_profile_sessions_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Create sessions by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ufd/{name}/sessions/{id}"

        return await self.post(url)

    async def ufd_read_ufd_profile_sessions_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Get sessions by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ufd/{name}/sessions/{id}"

        return await self.get(url)

    async def ufd_delete_ufd_profile_sessions_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Delete sessions by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ufd/{name}/sessions/{id}"

        return await self.delete(url)

    async def ufd_create_ufd_profile_sessions_links_to_monitor_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Create links-to-monitor by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ufd/{name}/sessions/{id}/links-to-monitor"

        return await self.post(url)

    async def ufd_read_ufd_profile_sessions_links_to_monitor_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Get links-to-monitor by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ufd/{name}/sessions/{id}/links-to-monitor"

        return await self.get(url)

    async def ufd_create_ufd_profile_sessions_links_to_disable_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Create links-to-disable by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ufd/{name}/sessions/{id}/links-to-disable"

        return await self.post(url)

    async def ufd_read_ufd_profile_sessions_links_to_disable_by_id_v1(
        self,
        name: str = None,
        id: str = None,
    ) -> Response:
        """Get links-to-disable by ID.

        Args:
            name (str, optional): name
            id (str, optional): id

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ufd/{name}/sessions/{id}/links-to-disable"

        return await self.get(url)

    async def uplink_create_ucc_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        central_visibility: bool = None,
        skype4b_priority_voice: int = None,
        skype4b_priority_video: int = None,
        teams_priority_voice: int = None,
        teams_priority_video: int = None,
        webrtc_priority_voice: int = None,
        webrtc_priority_video: int = None,
        sip_priority_voice: int = None,
        sip_priority_video: int = None,
        wificalling_priority_voice: int = None,
        zoom_priority_voice: int = None,
        zoom_priority_video: int = None,
        otherapps_priority_video: int = None,
        voice_tracking_snmptrap: bool = None,
        netsvc_sip: list = None,
        wificall_dns_pattern: List[str] = None,
    ) -> Response:
        """Create ucc by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for UCC parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): UCC profile name.
            description (str): UCC profile description.
            central_visibility (bool): Allow AP to send Voice Call Data Records to Aruba central.
            skype4b_priority_voice (int): Voice priority for Microsoft Skype for business App when
                detected in firewall
            skype4b_priority_video (int): Video priority for Microsoft skype for business App when
                detected in firewall
            teams_priority_voice (int): Voice priority for Microsoft Teams for business App when
                detected in firewall
            teams_priority_video (int): Video priority for Microsoft Teams for business App when
                detected in firewall
            webrtc_priority_voice (int): Voice priority for WebRTC protocol when detected in
                firewall
            webrtc_priority_video (int): Default video priority for WebRTC protocol when detected in
                firewall
            sip_priority_voice (int): SIP voice priority when detected in firewall
            sip_priority_video (int): SIP video priority when detected in firewall
            wificalling_priority_voice (int): WiFI calling voice priority when detected in firewall
            zoom_priority_voice (int): Zoom voice priority when detected in firewall
            zoom_priority_video (int): Zoom video priority when detected in firewall
            otherapps_priority_video (int): Default video priority for other VOIP applications when
                detected in firewall
            voice_tracking_snmptrap (bool): Enables sending SNMP Traps to SNMP server when voice
                calls are detected
            netsvc_sip (list): Netservice SIP configuration.
            wificall_dns_pattern (List[str]): wificall-dns-pattern

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ucc"

        json_data = {
            'name': name,
            'description': description,
            'central_visibility': central_visibility,
            'skype4b_priority_voice': skype4b_priority_voice,
            'skype4b_priority_video': skype4b_priority_video,
            'teams_priority_voice': teams_priority_voice,
            'teams_priority_video': teams_priority_video,
            'webrtc_priority_voice': webrtc_priority_voice,
            'webrtc_priority_video': webrtc_priority_video,
            'sip_priority_voice': sip_priority_voice,
            'sip_priority_video': sip_priority_video,
            'wificalling_priority_voice': wificalling_priority_voice,
            'zoom_priority_voice': zoom_priority_voice,
            'zoom_priority_video': zoom_priority_video,
            'otherapps_priority_video': otherapps_priority_video,
            'voice_tracking_snmptrap': voice_tracking_snmptrap,
            'netsvc_sip': netsvc_sip,
            'wificall_dns_pattern': wificall_dns_pattern
        }

        return await self.post(url, json_data=json_data)

    async def uplink_read_ucc_v1(
        self,
    ) -> Response:
        """Get ucc.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/ucc"

        return await self.get(url)

    async def uplink_create_ucc_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}"

        return await self.post(url)

    async def uplink_read_ucc_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}"

        return await self.get(url)

    async def uplink_delete_ucc_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}"

        return await self.delete(url)

    async def uplink_create_ucc_profile_netsvc_sip_by_id_v1(
        self,
        name: str = None,
        port: str = None,
        protocol: str = None,
    ) -> Response:
        """Create netsvc-sip by ID.

        Args:
            name (str, optional): name
            port (str, optional): port
            protocol (str, optional): protocol

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}/netsvc-sip/{port}/{protocol}"

        return await self.post(url)

    async def uplink_read_ucc_profile_netsvc_sip_by_id_v1(
        self,
        name: str = None,
        port: str = None,
        protocol: str = None,
    ) -> Response:
        """Get netsvc-sip by ID.

        Args:
            name (str, optional): name
            port (str, optional): port
            protocol (str, optional): protocol

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}/netsvc-sip/{port}/{protocol}"

        return await self.get(url)

    async def uplink_delete_ucc_profile_netsvc_sip_by_id_v1(
        self,
        name: str = None,
        port: str = None,
        protocol: str = None,
    ) -> Response:
        """Delete netsvc-sip by ID.

        Args:
            name (str, optional): name
            port (str, optional): port
            protocol (str, optional): protocol

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}/netsvc-sip/{port}/{protocol}"

        return await self.delete(url)

    async def uplink_create_ucc_profile_wificall_dns_pattern_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create wificall-dns-pattern by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}/wificall-dns-pattern"

        return await self.post(url)

    async def uplink_read_ucc_profile_wificall_dns_pattern_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get wificall-dns-pattern by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}/wificall-dns-pattern"

        return await self.get(url)

    async def uplink_delete_ucc_profile_wificall_dns_pattern_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete wificall-dns-pattern by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/ucc/{name}/wificall-dns-pattern"

        return await self.delete(url)

    async def usb_create_usb_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        usb_profile: list = None,
        usb_acl_profile: list = None,
        usb_profile_binding_name: str = None,
    ) -> Response:
        """Create usb by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for USB parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): USB profile name
            description (str): USB profile description.
            usb_profile (list): List of USB profile
            usb_acl_profile (list): USB Policy profiles
            usb_profile_binding_name (str): usb-profile for reference.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/usb"

        json_data = {
            'name': name,
            'description': description,
            'usb_profile': usb_profile,
            'usb_acl_profile': usb_acl_profile,
            'usb_profile_binding_name': usb_profile_binding_name
        }

        return await self.post(url, json_data=json_data)

    async def usb_read_usb_v1(
        self,
    ) -> Response:
        """Get usb.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/usb"

        return await self.get(url)

    async def usb_create_usb_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/usb/{name}"

        return await self.post(url)

    async def usb_read_usb_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/usb/{name}"

        return await self.get(url)

    async def usb_delete_usb_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/usb/{name}"

        return await self.delete(url)

    async def usb_create_usb_profile_usb_profile_by_id_v1(
        self,
        name: str = None,
        usb_pro_fname: str = None,
    ) -> Response:
        """Create usb-profile by ID.

        Args:
            name (str, optional): name
            usb_pro_fname (str, optional): usbProfName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/usb/{name}/usb-profile/{usb_pro_fname}"

        return await self.post(url)

    async def usb_read_usb_profile_usb_profile_by_id_v1(
        self,
        name: str = None,
        usb_pro_fname: str = None,
    ) -> Response:
        """Get usb-profile by ID.

        Args:
            name (str, optional): name
            usb_pro_fname (str, optional): usbProfName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/usb/{name}/usb-profile/{usb_pro_fname}"

        return await self.get(url)

    async def usb_delete_usb_profile_usb_profile_by_id_v1(
        self,
        name: str = None,
        usb_pro_fname: str = None,
    ) -> Response:
        """Delete usb-profile by ID.

        Args:
            name (str, optional): name
            usb_pro_fname (str, optional): usbProfName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/usb/{name}/usb-profile/{usb_pro_fname}"

        return await self.delete(url)

    async def usb_create_usb_profile_usb_acl_profile_by_id_v1(
        self,
        name: str = None,
        usb_ac_lname: str = None,
    ) -> Response:
        """Create usb-acl-profile by ID.

        Args:
            name (str, optional): name
            usb_ac_lname (str, optional): usbAclName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/usb/{name}/usb-acl-profile/{usb_ac_lname}"

        return await self.post(url)

    async def usb_read_usb_profile_usb_acl_profile_by_id_v1(
        self,
        name: str = None,
        usb_ac_lname: str = None,
    ) -> Response:
        """Get usb-acl-profile by ID.

        Args:
            name (str, optional): name
            usb_ac_lname (str, optional): usbAclName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/usb/{name}/usb-acl-profile/{usb_ac_lname}"

        return await self.get(url)

    async def usb_delete_usb_profile_usb_acl_profile_by_id_v1(
        self,
        name: str = None,
        usb_ac_lname: str = None,
    ) -> Response:
        """Delete usb-acl-profile by ID.

        Args:
            name (str, optional): name
            usb_ac_lname (str, optional): usbAclName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/usb/{name}/usb-acl-profile/{usb_ac_lname}"

        return await self.delete(url)

    async def usb_create_usb_profile_usb_acl_profile_rule_by_id_v1(
        self,
        name: str = None,
        usb_ac_lname: str = None,
        rule_name: str = None,
    ) -> Response:
        """Create rule by ID.

        Args:
            name (str, optional): name
            usb_ac_lname (str, optional): usbAclName
            rule_name (str, optional): ruleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/usb/{name}/usb-acl-profile/{usb_ac_lname}/rule/{rule_name}"

        return await self.post(url)

    async def usb_read_usb_profile_usb_acl_profile_rule_by_id_v1(
        self,
        name: str = None,
        usb_ac_lname: str = None,
        rule_name: str = None,
    ) -> Response:
        """Get rule by ID.

        Args:
            name (str, optional): name
            usb_ac_lname (str, optional): usbAclName
            rule_name (str, optional): ruleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/usb/{name}/usb-acl-profile/{usb_ac_lname}/rule/{rule_name}"

        return await self.get(url)

    async def usb_delete_usb_profile_usb_acl_profile_rule_by_id_v1(
        self,
        name: str = None,
        usb_ac_lname: str = None,
        rule_name: str = None,
    ) -> Response:
        """Delete rule by ID.

        Args:
            name (str, optional): name
            usb_ac_lname (str, optional): usbAclName
            rule_name (str, optional): ruleName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/usb/{name}/usb-acl-profile/{usb_ac_lname}/rule/{rule_name}"

        return await self.delete(url)

    async def virtual_mac_create_virtual_mac_by_id_v1(
        self,
        mac_address: str,
    ) -> Response:
        """Create virtual-mac by ID.

        Args:
            mac_address (str): Virtual MAC address

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/virtual-mac"

        json_data = {
            'mac_address': mac_address
        }

        return await self.post(url, json_data=json_data)

    async def virtual_mac_read_virtual_mac_v1(
        self,
    ) -> Response:
        """Get virtual-mac.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/virtual-mac"

        return await self.get(url)

    async def vlan_create_virtual_mac_by_id_v1(
        self,
        mac_address: str,
    ) -> Response:
        """Create virtual-mac by ID.

        Args:
            mac_address (str): Virtual MAC address

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/virtual-mac"

        json_data = {
            'mac_address': mac_address
        }

        return await self.post(url, json_data=json_data)

    async def vlan_read_virtual_mac_v1(
        self,
    ) -> Response:
        """Get virtual-mac.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/virtual-mac"

        return await self.get(url)

    async def vpnc_firmware_create_vpnc_firmware_by_id_v1(
        self,
        upgrade_mode: str,
        version: str,
        rollback: str,
        active_partition: str,
        auto_reboot: bool,
    ) -> Response:
        """Create vpnc-firmware by ID.

        Args:
            upgrade_mode (str): Live upgrade or regular upgrade  Valid Values: AOS_REGULAR, AOS_LIVE
            version (str): Desired firmware version
            rollback (str): INTERNAL - firmware version to rollback to
            active_partition (str): Partition to upgrade  Valid Values: PRIMARY, SECONDARY
            auto_reboot (bool): Automatically reboot after upgrade or not

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vpnc-firmware"

        json_data = {
            'upgrade_mode': upgrade_mode,
            'version': version,
            'rollback': rollback,
            'active_partition': active_partition,
            'auto_reboot': auto_reboot
        }

        return await self.post(url, json_data=json_data)

    async def vpnc_firmware_read_vpnc_firmware_v1(
        self,
    ) -> Response:
        """Get vpnc-firmware.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vpnc-firmware"

        return await self.get(url)

    async def vrf_create_vrfs_by_id_v1(
        self,
        vrf: list,
    ) -> Response:
        """Create vrfs by ID.

        Args:
            vrf (list): List of named VRFs.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vrfs"

        json_data = {
            'vrf': vrf
        }

        return await self.post(url, json_data=json_data)

    async def vrf_read_vrfs_v1(
        self,
    ) -> Response:
        """Get vrfs.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vrfs"

        return await self.get(url)

    async def vrf_create_vrfs_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}"

        return await self.post(url)

    async def vrf_read_vrfs_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}"

        return await self.get(url)

    async def vrf_delete_vrfs_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}"

        return await self.delete(url)

    async def vrf_create_vrfs_vrf_evpn_import_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create evpn-import-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-import-route-targets"

        return await self.post(url)

    async def vrf_read_vrfs_vrf_evpn_import_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get evpn-import-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-import-route-targets"

        return await self.get(url)

    async def vrf_delete_vrfs_vrf_evpn_import_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete evpn-import-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-import-route-targets"

        return await self.delete(url)

    async def vrf_create_vrfs_vrf_evpn_export_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create evpn-export-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-export-route-targets"

        return await self.post(url)

    async def vrf_read_vrfs_vrf_evpn_export_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get evpn-export-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-export-route-targets"

        return await self.get(url)

    async def vrf_delete_vrfs_vrf_evpn_export_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete evpn-export-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-export-route-targets"

        return await self.delete(url)

    async def vrf_create_vrfs_vrf_afi_safi_configs_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create afi-safi-configs by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}"

        return await self.post(url)

    async def vrf_read_vrfs_vrf_afi_safi_configs_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get afi-safi-configs by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}"

        return await self.get(url)

    async def vrf_delete_vrfs_vrf_afi_safi_configs_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete afi-safi-configs by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}"

        return await self.delete(url)

    async def vrf_create_vrfs_vrf_afi_safi_configs_import_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create import-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/import-route-targets"

        return await self.post(url)

    async def vrf_read_vrfs_vrf_afi_safi_configs_import_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get import-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/import-route-targets"

        return await self.get(url)

    async def vrf_delete_vrfs_vrf_afi_safi_configs_import_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete import-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/import-route-targets"

        return await self.delete(url)

    async def vrf_create_vrfs_vrf_afi_safi_configs_export_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create export-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/export-route-targets"

        return await self.post(url)

    async def vrf_read_vrfs_vrf_afi_safi_configs_export_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get export-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/export-route-targets"

        return await self.get(url)

    async def vrf_delete_vrfs_vrf_afi_safi_configs_export_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete export-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/export-route-targets"

        return await self.delete(url)

    async def vrf_create_vrfs_vrf_l3_route_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create l3-route-vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/l3-route-vrf"

        return await self.post(url)

    async def vrf_read_vrfs_vrf_l3_route_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get l3-route-vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/l3-route-vrf"

        return await self.get(url)

    async def vrrp_create_vrrp_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        profile: list = None,
    ) -> Response:
        """Create vrrp by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): VRRP Profile
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            profile (list): VRRP Profile

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vrrp"

        json_data = {
            'profile': profile
        }

        return await self.post(url, json_data=json_data)

    async def vrrp_read_vrrp_v1(
        self,
    ) -> Response:
        """Get vrrp.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vrrp"

        return await self.get(url)

    async def vrrp_create_vrrp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrrp/{name}"

        return await self.post(url)

    async def vrrp_read_vrrp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrrp/{name}"

        return await self.get(url)

    async def vrrp_delete_vrrp_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrrp/{name}"

        return await self.delete(url)

    async def vrrp_create_vrrp_profile_virtual_router_by_id_v1(
        self,
        name: str = None,
        router_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Create virtual-router by ID.

        Args:
            name (str, optional): name
            router_id (str, optional): routerId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrrp/{name}/virtual-router/{router_id}/{address_family}"

        return await self.post(url)

    async def vrrp_read_vrrp_profile_virtual_router_by_id_v1(
        self,
        name: str = None,
        router_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Get virtual-router by ID.

        Args:
            name (str, optional): name
            router_id (str, optional): routerId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrrp/{name}/virtual-router/{router_id}/{address_family}"

        return await self.get(url)

    async def vrrp_delete_vrrp_profile_virtual_router_by_id_v1(
        self,
        name: str = None,
        router_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete virtual-router by ID.

        Args:
            name (str, optional): name
            router_id (str, optional): routerId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrrp/{name}/virtual-router/{router_id}/{address_family}"

        return await self.delete(url)

    async def vrrp_create_vrrp_profile_virtual_router_sec_address_by_id_v1(
        self,
        name: str = None,
        router_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Create sec-address by ID.

        Args:
            name (str, optional): name
            router_id (str, optional): routerId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrrp/{name}/virtual-router/{router_id}/{address_family}/sec-address"

        return await self.post(url)

    async def vrrp_read_vrrp_profile_virtual_router_sec_address_by_id_v1(
        self,
        name: str = None,
        router_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Get sec-address by ID.

        Args:
            name (str, optional): name
            router_id (str, optional): routerId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrrp/{name}/virtual-router/{router_id}/{address_family}/sec-address"

        return await self.get(url)

    async def vrrp_delete_vrrp_profile_virtual_router_sec_address_by_id_v1(
        self,
        name: str = None,
        router_id: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete sec-address by ID.

        Args:
            name (str, optional): name
            router_id (str, optional): routerId
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrrp/{name}/virtual-router/{router_id}/{address_family}/sec-address"

        return await self.delete(url)

    async def vrrp_create_vrrp_profile_virtual_router_tracking_items_by_id_v1(
        self,
        name: str = None,
        router_id: str = None,
        address_family: str = None,
        mode: str = None,
    ) -> Response:
        """Create tracking-items by ID.

        Args:
            name (str, optional): name
            router_id (str, optional): routerId
            address_family (str, optional): addressFamily
            mode (str, optional): mode

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrrp/{name}/virtual-router/{router_id}/{address_family}/tracking-items/{mode}"

        return await self.post(url)

    async def vrrp_read_vrrp_profile_virtual_router_tracking_items_by_id_v1(
        self,
        name: str = None,
        router_id: str = None,
        address_family: str = None,
        mode: str = None,
    ) -> Response:
        """Get tracking-items by ID.

        Args:
            name (str, optional): name
            router_id (str, optional): routerId
            address_family (str, optional): addressFamily
            mode (str, optional): mode

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrrp/{name}/virtual-router/{router_id}/{address_family}/tracking-items/{mode}"

        return await self.get(url)

    async def vrrp_delete_vrrp_profile_virtual_router_tracking_items_by_id_v1(
        self,
        name: str = None,
        router_id: str = None,
        address_family: str = None,
        mode: str = None,
    ) -> Response:
        """Delete tracking-items by ID.

        Args:
            name (str, optional): name
            router_id (str, optional): routerId
            address_family (str, optional): addressFamily
            mode (str, optional): mode

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrrp/{name}/virtual-router/{router_id}/{address_family}/tracking-items/{mode}"

        return await self.delete(url)

    async def vsx_device_info_create_vsx_device_parameters_by_id_v1(
        self,
        device_serial: str,
        device_jnum: str,
        device_mac: str,
        device_platform: str,
    ) -> Response:
        """Create vsx-device-parameters by ID.

        Args:
            device_serial (str): serial of the VSX Capable device
            device_jnum (str): jnum of the VSX Capable device
            device_mac (str): mac of the VSX Capable device
            device_platform (str): platform of the VSX Capable device

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vsx-device-parameters"

        json_data = {
            'device_serial': device_serial,
            'device_jnum': device_jnum,
            'device_mac': device_mac,
            'device_platform': device_platform
        }

        return await self.post(url, json_data=json_data)

    async def vsx_device_info_read_vsx_device_parameters_v1(
        self,
    ) -> Response:
        """Get vsx-device-parameters.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vsx-device-parameters"

        return await self.get(url)

    async def vsx_device_info_create_vsx_device_parameters_vsx_devices_by_id_v1(
        self,
        device_serial: str = None,
    ) -> Response:
        """Create vsx-devices by ID.

        Args:
            device_serial (str, optional): deviceSerial

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vsx-device-parameters/{device_serial}"

        return await self.post(url)

    async def vsx_device_info_read_vsx_device_parameters_vsx_devices_by_id_v1(
        self,
        device_serial: str = None,
    ) -> Response:
        """Get vsx-devices by ID.

        Args:
            device_serial (str, optional): deviceSerial

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vsx-device-parameters/{device_serial}"

        return await self.get(url)

    async def vsx_device_info_delete_vsx_device_parameters_vsx_devices_by_id_v1(
        self,
        device_serial: str = None,
    ) -> Response:
        """Delete vsx-devices by ID.

        Args:
            device_serial (str, optional): deviceSerial

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vsx-device-parameters/{device_serial}"

        return await self.delete(url)

    async def vsx_pair_create_vrfs_by_id_v1(
        self,
        vrf: list,
    ) -> Response:
        """Create vrfs by ID.

        Args:
            vrf (list): List of named VRFs.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vrfs"

        json_data = {
            'vrf': vrf
        }

        return await self.post(url, json_data=json_data)

    async def vsx_pair_read_vrfs_v1(
        self,
    ) -> Response:
        """Get vrfs.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vrfs"

        return await self.get(url)

    async def vsx_pair_create_vrfs_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}"

        return await self.post(url)

    async def vsx_pair_read_vrfs_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}"

        return await self.get(url)

    async def vsx_pair_delete_vrfs_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}"

        return await self.delete(url)

    async def vsx_pair_create_vrfs_vrf_evpn_import_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create evpn-import-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-import-route-targets"

        return await self.post(url)

    async def vsx_pair_read_vrfs_vrf_evpn_import_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get evpn-import-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-import-route-targets"

        return await self.get(url)

    async def vsx_pair_delete_vrfs_vrf_evpn_import_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete evpn-import-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-import-route-targets"

        return await self.delete(url)

    async def vsx_pair_create_vrfs_vrf_evpn_export_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create evpn-export-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-export-route-targets"

        return await self.post(url)

    async def vsx_pair_read_vrfs_vrf_evpn_export_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get evpn-export-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-export-route-targets"

        return await self.get(url)

    async def vsx_pair_delete_vrfs_vrf_evpn_export_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete evpn-export-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-export-route-targets"

        return await self.delete(url)

    async def vsx_pair_create_vrfs_vrf_afi_safi_configs_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create afi-safi-configs by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}"

        return await self.post(url)

    async def vsx_pair_read_vrfs_vrf_afi_safi_configs_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get afi-safi-configs by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}"

        return await self.get(url)

    async def vsx_pair_delete_vrfs_vrf_afi_safi_configs_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete afi-safi-configs by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}"

        return await self.delete(url)

    async def vsx_pair_create_vrfs_vrf_afi_safi_configs_import_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create import-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/import-route-targets"

        return await self.post(url)

    async def vsx_pair_read_vrfs_vrf_afi_safi_configs_import_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get import-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/import-route-targets"

        return await self.get(url)

    async def vsx_pair_delete_vrfs_vrf_afi_safi_configs_import_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete import-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/import-route-targets"

        return await self.delete(url)

    async def vsx_pair_create_vrfs_vrf_afi_safi_configs_export_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create export-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/export-route-targets"

        return await self.post(url)

    async def vsx_pair_read_vrfs_vrf_afi_safi_configs_export_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get export-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/export-route-targets"

        return await self.get(url)

    async def vsx_pair_delete_vrfs_vrf_afi_safi_configs_export_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete export-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/export-route-targets"

        return await self.delete(url)

    async def vsx_pair_create_vrfs_vrf_l3_route_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create l3-route-vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/l3-route-vrf"

        return await self.post(url)

    async def vsx_pair_read_vrfs_vrf_l3_route_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get l3-route-vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/l3-route-vrf"

        return await self.get(url)

    async def vsx_create_vrfs_by_id_v1(
        self,
        vrf: list,
    ) -> Response:
        """Create vrfs by ID.

        Args:
            vrf (list): List of named VRFs.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vrfs"

        json_data = {
            'vrf': vrf
        }

        return await self.post(url, json_data=json_data)

    async def vsx_read_vrfs_v1(
        self,
    ) -> Response:
        """Get vrfs.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/vrfs"

        return await self.get(url)

    async def vsx_create_vrfs_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}"

        return await self.post(url)

    async def vsx_read_vrfs_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}"

        return await self.get(url)

    async def vsx_delete_vrfs_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}"

        return await self.delete(url)

    async def vsx_create_vrfs_vrf_evpn_import_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create evpn-import-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-import-route-targets"

        return await self.post(url)

    async def vsx_read_vrfs_vrf_evpn_import_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get evpn-import-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-import-route-targets"

        return await self.get(url)

    async def vsx_delete_vrfs_vrf_evpn_import_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete evpn-import-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-import-route-targets"

        return await self.delete(url)

    async def vsx_create_vrfs_vrf_evpn_export_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create evpn-export-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-export-route-targets"

        return await self.post(url)

    async def vsx_read_vrfs_vrf_evpn_export_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get evpn-export-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-export-route-targets"

        return await self.get(url)

    async def vsx_delete_vrfs_vrf_evpn_export_route_targets_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete evpn-export-route-targets by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/evpn-export-route-targets"

        return await self.delete(url)

    async def vsx_create_vrfs_vrf_afi_safi_configs_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create afi-safi-configs by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}"

        return await self.post(url)

    async def vsx_read_vrfs_vrf_afi_safi_configs_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get afi-safi-configs by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}"

        return await self.get(url)

    async def vsx_delete_vrfs_vrf_afi_safi_configs_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete afi-safi-configs by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}"

        return await self.delete(url)

    async def vsx_create_vrfs_vrf_afi_safi_configs_import_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create import-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/import-route-targets"

        return await self.post(url)

    async def vsx_read_vrfs_vrf_afi_safi_configs_import_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get import-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/import-route-targets"

        return await self.get(url)

    async def vsx_delete_vrfs_vrf_afi_safi_configs_import_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete import-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/import-route-targets"

        return await self.delete(url)

    async def vsx_create_vrfs_vrf_afi_safi_configs_export_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Create export-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/export-route-targets"

        return await self.post(url)

    async def vsx_read_vrfs_vrf_afi_safi_configs_export_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Get export-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/export-route-targets"

        return await self.get(url)

    async def vsx_delete_vrfs_vrf_afi_safi_configs_export_route_targets_by_id_v1(
        self,
        name: str = None,
        address_family: str = None,
    ) -> Response:
        """Delete export-route-targets by ID.

        Args:
            name (str, optional): name
            address_family (str, optional): addressFamily

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/afi-safi-configs/{address_family}/export-route-targets"

        return await self.delete(url)

    async def vsx_create_vrfs_vrf_l3_route_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create l3-route-vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/l3-route-vrf"

        return await self.post(url)

    async def vsx_read_vrfs_vrf_l3_route_vrf_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get l3-route-vrf by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/vrfs/{name}/l3-route-vrf"

        return await self.get(url)

    async def wan_dps_common_create_wan_dps_common_by_id_v1(
        self,
        name: str,
        description: str,
        uplink_groups: list,
        name_: str,
        description_: str,
        jitter: int,
        latency: int,
        packet_loss: int,
        bandwidth_utilization: int,
        mos: int,
    ) -> Response:
        """Create wan-dps-common by ID.

        Args:
            name (str): Pathsteer profile name
            description (str): Description of pathsteer-profile
            uplink_groups (list): List of Uplink groups
            name (str): WAN threshold profile name
            description (str): Description of threshold profile
            jitter (int): Average Jitter threshold in milliseconds
            latency (int): Average latency threshold in milliseconds
            packet_loss (int): Average packet-loss threshold in %
            bandwidth_utilization (int): Link bandwidth-utilization threshold in %
            mos (int): Mean opinion score (MOS) threshold between 1-5

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/wan-dps-common"

        json_data = {
            'name': name,
            'description': description,
            'uplink_groups': uplink_groups,
            'name_': name,
            'description_': description,
            'jitter': jitter,
            'latency': latency,
            'packet_loss': packet_loss,
            'bandwidth_utilization': bandwidth_utilization,
            'mos': mos
        }

        return await self.post(url, json_data=json_data)

    async def wan_dps_common_read_wan_dps_common_v1(
        self,
    ) -> Response:
        """Get wan-dps-common.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/wan-dps-common"

        return await self.get(url)

    async def wan_dps_common_create_wan_dps_common_pathsteer_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create pathsteer-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/pathsteer-profile/{name}"

        return await self.post(url)

    async def wan_dps_common_read_wan_dps_common_pathsteer_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get pathsteer-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/pathsteer-profile/{name}"

        return await self.get(url)

    async def wan_dps_common_delete_wan_dps_common_pathsteer_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete pathsteer-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/pathsteer-profile/{name}"

        return await self.delete(url)

    async def wan_dps_common_create_wan_dps_common_pathsteer_profile_uplink_groups_by_id_v1(
        self,
        name: str = None,
        type: str = None,
    ) -> Response:
        """Create uplink-groups by ID.

        Args:
            name (str, optional): name
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/pathsteer-profile/{name}/uplink-groups/{type}"

        return await self.post(url)

    async def wan_dps_common_read_wan_dps_common_pathsteer_profile_uplink_groups_by_id_v1(
        self,
        name: str = None,
        type: str = None,
    ) -> Response:
        """Get uplink-groups by ID.

        Args:
            name (str, optional): name
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/pathsteer-profile/{name}/uplink-groups/{type}"

        return await self.get(url)

    async def wan_dps_common_delete_wan_dps_common_pathsteer_profile_uplink_groups_by_id_v1(
        self,
        name: str = None,
        type: str = None,
    ) -> Response:
        """Delete uplink-groups by ID.

        Args:
            name (str, optional): name
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/pathsteer-profile/{name}/uplink-groups/{type}"

        return await self.delete(url)

    async def wan_dps_common_create_wan_dps_common_pathsteer_profile_uplink_groups_custom_by_id_v1(
        self,
        name: str = None,
        type: str = None,
    ) -> Response:
        """Create custom by ID.

        Args:
            name (str, optional): name
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/pathsteer-profile/{name}/uplink-groups/{type}/custom"

        return await self.post(url)

    async def wan_dps_common_read_wan_dps_common_pathsteer_profile_uplink_groups_custom_by_id_v1(
        self,
        name: str = None,
        type: str = None,
    ) -> Response:
        """Get custom by ID.

        Args:
            name (str, optional): name
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/pathsteer-profile/{name}/uplink-groups/{type}/custom"

        return await self.get(url)

    async def wan_dps_common_delete_wan_dps_common_pathsteer_profile_uplink_groups_custom_by_id_v1(
        self,
        name: str = None,
        type: str = None,
    ) -> Response:
        """Delete custom by ID.

        Args:
            name (str, optional): name
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/pathsteer-profile/{name}/uplink-groups/{type}/custom"

        return await self.delete(url)

    async def wan_dps_common_create_wan_dps_common_pathsteer_profile_uplink_groups_predefined_by_id_v1(
        self,
        name: str = None,
        type: str = None,
    ) -> Response:
        """Create predefined by ID.

        Args:
            name (str, optional): name
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/pathsteer-profile/{name}/uplink-groups/{type}/predefined"

        return await self.post(url)

    async def wan_dps_common_read_wan_dps_common_pathsteer_profile_uplink_groups_predefined_by_id_v1(
        self,
        name: str = None,
        type: str = None,
    ) -> Response:
        """Get predefined by ID.

        Args:
            name (str, optional): name
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/pathsteer-profile/{name}/uplink-groups/{type}/predefined"

        return await self.get(url)

    async def wan_dps_common_delete_wan_dps_common_pathsteer_profile_uplink_groups_predefined_by_id_v1(
        self,
        name: str = None,
        type: str = None,
    ) -> Response:
        """Delete predefined by ID.

        Args:
            name (str, optional): name
            type (str, optional): type

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/pathsteer-profile/{name}/uplink-groups/{type}/predefined"

        return await self.delete(url)

    async def wan_dps_common_create_wan_dps_common_threshold_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create threshold-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/threshold-profile/{name}"

        return await self.post(url)

    async def wan_dps_common_read_wan_dps_common_threshold_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get threshold-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/threshold-profile/{name}"

        return await self.get(url)

    async def wan_dps_common_delete_wan_dps_common_threshold_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete threshold-profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-common/threshold-profile/{name}"

        return await self.delete(url)

    async def wan_dps_policy_create_wan_dps_policies_by_id_v1(
        self,
        wan_dps_policy: list,
    ) -> Response:
        """Create wan-dps-policies by ID.

        Args:
            wan_dps_policy (list): List of WAN DPS policies

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/wan-dps-policies"

        json_data = {
            'wan_dps_policy': wan_dps_policy
        }

        return await self.post(url, json_data=json_data)

    async def wan_dps_policy_read_wan_dps_policies_v1(
        self,
    ) -> Response:
        """Get wan-dps-policies.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/wan-dps-policies"

        return await self.get(url)

    async def wan_dps_policy_create_wan_dps_policies_wan_dps_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create wan-dps-policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-policies/{name}"

        return await self.post(url)

    async def wan_dps_policy_read_wan_dps_policies_wan_dps_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get wan-dps-policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-policies/{name}"

        return await self.get(url)

    async def wan_dps_policy_delete_wan_dps_policies_wan_dps_policy_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete wan-dps-policy by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-policies/{name}"

        return await self.delete(url)

    async def wan_dps_policy_create_wan_dps_policies_wan_dps_policy_policy_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create policy-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-policies/{name}/policy-rule/{position}"

        return await self.post(url)

    async def wan_dps_policy_read_wan_dps_policies_wan_dps_policy_policy_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get policy-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-policies/{name}/policy-rule/{position}"

        return await self.get(url)

    async def wan_dps_policy_update_wan_dps_policies_wan_dps_policy_policy_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Update policy-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-policies/{name}/policy-rule/{position}"

        return await self.put(url)

    async def wan_dps_policy_delete_wan_dps_policies_wan_dps_policy_policy_rule_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Delete policy-rule by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-policies/{name}/policy-rule/{position}"

        return await self.delete(url)

    async def wan_dps_policy_create_wan_dps_policies_wan_dps_policy_policy_rule_condition_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Create condition by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-policies/{name}/policy-rule/{position}/condition"

        return await self.post(url)

    async def wan_dps_policy_read_wan_dps_policies_wan_dps_policy_policy_rule_condition_by_id_v1(
        self,
        name: str = None,
        position: str = None,
    ) -> Response:
        """Get condition by ID.

        Args:
            name (str, optional): name
            position (str, optional): position

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wan-dps-policies/{name}/policy-rule/{position}/condition"

        return await self.get(url)

    async def wan_redundancy_create_branch_gateway_peer_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        ip: str = None,
        vlan: int = None,
    ) -> Response:
        """Create branch-gateway-peer by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): List of WAN HA profiles.
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): WAN HA profile name.
            description (str): WAN HA profile description.
            ip (str): IP address of peer
            vlan (int): Branch gateway peer interface VLAN.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/branch-gateway-peer"

        json_data = {
            'name': name,
            'description': description,
            'ip': ip,
            'vlan': vlan
        }

        return await self.post(url, json_data=json_data)

    async def wan_redundancy_read_branch_gateway_peer_v1(
        self,
    ) -> Response:
        """Get branch-gateway-peer.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/branch-gateway-peer"

        return await self.get(url)

    async def wan_redundancy_create_branch_gateway_peer_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/branch-gateway-peer/{name}"

        return await self.post(url)

    async def wan_redundancy_read_branch_gateway_peer_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/branch-gateway-peer/{name}"

        return await self.get(url)

    async def wan_redundancy_delete_branch_gateway_peer_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/branch-gateway-peer/{name}"

        return await self.delete(url)

    async def webcc_create_webcc_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        name: str = None,
        description: str = None,
        enable: bool = None,
        cache_miss_drop: bool = None,
        redirect_url: str = None,
        category_bandwidth_contracts: list = None,
        reputation_bandwidth_contracts: list = None,
    ) -> Response:
        """Create webcc by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Global profile for WebCC parameters
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            name (str): WebCC profile name.
            description (str): WebCC profile description.
            enable (bool): Enable WebCC feature
            cache_miss_drop (bool): Drop packets that do not match any WebCC Category or Reputation
                levels in the internal WebCC cache
            redirect_url (str): URL to which the users should be redirected when they access a
                blocked session
            category_bandwidth_contracts (list): Global Bandwidth contract based on WebCC category
                type.
            reputation_bandwidth_contracts (list): Global Bandwidth contract based on WebCC
                reputation type.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/webcc"

        json_data = {
            'name': name,
            'description': description,
            'enable': enable,
            'cache_miss_drop': cache_miss_drop,
            'redirect_url': redirect_url,
            'category_bandwidth_contracts': category_bandwidth_contracts,
            'reputation_bandwidth_contracts': reputation_bandwidth_contracts
        }

        return await self.post(url, json_data=json_data)

    async def webcc_read_webcc_v1(
        self,
    ) -> Response:
        """Get webcc.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/webcc"

        return await self.get(url)

    async def webcc_create_webcc_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/webcc/{name}"

        return await self.post(url)

    async def webcc_read_webcc_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/webcc/{name}"

        return await self.get(url)

    async def webcc_delete_webcc_profile_by_id_v1(
        self,
        name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            name (str, optional): name

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/webcc/{name}"

        return await self.delete(url)

    async def webcc_create_webcc_profile_category_bandwidth_contracts_by_id_v1(
        self,
        name: str = None,
        category: str = None,
    ) -> Response:
        """Create category-bandwidth-contracts by ID.

        Args:
            name (str, optional): name
            category (str, optional): category

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/webcc/{name}/category-bandwidth-contracts/{category}"

        return await self.post(url)

    async def webcc_read_webcc_profile_category_bandwidth_contracts_by_id_v1(
        self,
        name: str = None,
        category: str = None,
    ) -> Response:
        """Get category-bandwidth-contracts by ID.

        Args:
            name (str, optional): name
            category (str, optional): category

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/webcc/{name}/category-bandwidth-contracts/{category}"

        return await self.get(url)

    async def webcc_delete_webcc_profile_category_bandwidth_contracts_by_id_v1(
        self,
        name: str = None,
        category: str = None,
    ) -> Response:
        """Delete category-bandwidth-contracts by ID.

        Args:
            name (str, optional): name
            category (str, optional): category

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/webcc/{name}/category-bandwidth-contracts/{category}"

        return await self.delete(url)

    async def webcc_create_webcc_profile_reputation_bandwidth_contracts_by_id_v1(
        self,
        name: str = None,
        reputation: str = None,
    ) -> Response:
        """Create reputation-bandwidth-contracts by ID.

        Args:
            name (str, optional): name
            reputation (str, optional): reputation

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/webcc/{name}/reputation-bandwidth-contracts/{reputation}"

        return await self.post(url)

    async def webcc_read_webcc_profile_reputation_bandwidth_contracts_by_id_v1(
        self,
        name: str = None,
        reputation: str = None,
    ) -> Response:
        """Get reputation-bandwidth-contracts by ID.

        Args:
            name (str, optional): name
            reputation (str, optional): reputation

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/webcc/{name}/reputation-bandwidth-contracts/{reputation}"

        return await self.get(url)

    async def webcc_delete_webcc_profile_reputation_bandwidth_contracts_by_id_v1(
        self,
        name: str = None,
        reputation: str = None,
    ) -> Response:
        """Delete reputation-bandwidth-contracts by ID.

        Args:
            name (str, optional): name
            reputation (str, optional): reputation

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/webcc/{name}/reputation-bandwidth-contracts/{reputation}"

        return await self.delete(url)

    async def wifiuplink_create_wifi_uplink_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        method: str = None,
        username: str = None,
        password: str = None,
        tls_method: str = None,
        tls_method_user: str = 'IAP',
        eap_server: str = None,
    ) -> Response:
        """Create wifi-uplink by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Station (STA) profile List[Dict[str, Any]] | Dict[str, Any]
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            method (str, optional): 802.1X authentication method.  Valid Values: PEAP, TLS
            username (str, optional): Username when using 802.1X PEAP.
            password (str, optional): Password when using 802.1X PEAP.
            tls_method (str, optional): SUB options(tpm/user) when use 802.1X TLS .  Valid Values:
                TPM, USER
            tls_method_user (str, optional): SUB options(user) when use 802.1X TLS .
            eap_server (str, optional): Validates the server certificate when TLS method is used for
                802.1X authentication.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/wifi-uplink"

        json_data = {
            'method': method,
            'username': username,
            'password': password,
            'tls_method': tls_method,
            'tls_method_user': tls_method_user,
            'eap_server': eap_server
        }

        return await self.post(url, json_data=json_data)

    async def wifiuplink_read_wifi_uplink_v1(
        self,
    ) -> Response:
        """Get wifi-uplink.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/wifi-uplink"

        return await self.get(url)

    async def wifiuplink_create_wifi_uplink_profile_by_id_v1(
        self,
        ssid_name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            ssid_name (str, optional): ssidName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wifi-uplink/{ssid_name}"

        return await self.post(url)

    async def wifiuplink_read_wifi_uplink_profile_by_id_v1(
        self,
        ssid_name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            ssid_name (str, optional): ssidName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wifi-uplink/{ssid_name}"

        return await self.get(url)

    async def wifiuplink_delete_wifi_uplink_profile_by_id_v1(
        self,
        ssid_name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            ssid_name (str, optional): ssidName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wifi-uplink/{ssid_name}"

        return await self.delete(url)

    async def wifiuplink_create_wifi_uplink_profile_wifi1x_auth_by_id_v1(
        self,
        ssid_name: str = None,
    ) -> Response:
        """Create wifi1x-auth by ID.

        Args:
            ssid_name (str, optional): ssidName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wifi-uplink/{ssid_name}/wifi1x-auth"

        return await self.post(url)

    async def wifiuplink_read_wifi_uplink_profile_wifi1x_auth_by_id_v1(
        self,
        ssid_name: str = None,
    ) -> Response:
        """Get wifi1x-auth by ID.

        Args:
            ssid_name (str, optional): ssidName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wifi-uplink/{ssid_name}/wifi1x-auth"

        return await self.get(url)

    async def wlan_create_wifi_uplink_by_id_v1(
        self,
        NoName: List[Dict[str, Any]] | Dict[str, Any] = None,
        method: str = None,
        username: str = None,
        password: str = None,
        tls_method: str = None,
        tls_method_user: str = 'IAP',
        eap_server: str = None,
    ) -> Response:
        """Create wifi-uplink by ID.

        Args:
            NoName (List[Dict[str, Any]] | Dict[str, Any]): Station (STA) profile List[Dict[str, Any]] | Dict[str, Any]
                Provide a list with the items below or provide the items below.
        NoName items, to be provided in list (or provide them individually for a single item):
            method (str, optional): 802.1X authentication method.  Valid Values: PEAP, TLS
            username (str, optional): Username when using 802.1X PEAP.
            password (str, optional): Password when using 802.1X PEAP.
            tls_method (str, optional): SUB options(tpm/user) when use 802.1X TLS .  Valid Values:
                TPM, USER
            tls_method_user (str, optional): SUB options(user) when use 802.1X TLS .
            eap_server (str, optional): Validates the server certificate when TLS method is used for
                802.1X authentication.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/wifi-uplink"

        json_data = {
            'method': method,
            'username': username,
            'password': password,
            'tls_method': tls_method,
            'tls_method_user': tls_method_user,
            'eap_server': eap_server
        }

        return await self.post(url, json_data=json_data)

    async def wlan_read_wifi_uplink_v1(
        self,
    ) -> Response:
        """Get wifi-uplink.

        Returns:
            Response: CentralAPI Response object
        """
        url = "/networking/v1/wifi-uplink"

        return await self.get(url)

    async def wlan_create_wifi_uplink_profile_by_id_v1(
        self,
        ssid_name: str = None,
    ) -> Response:
        """Create profile by ID.

        Args:
            ssid_name (str, optional): ssidName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wifi-uplink/{ssid_name}"

        return await self.post(url)

    async def wlan_read_wifi_uplink_profile_by_id_v1(
        self,
        ssid_name: str = None,
    ) -> Response:
        """Get profile by ID.

        Args:
            ssid_name (str, optional): ssidName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wifi-uplink/{ssid_name}"

        return await self.get(url)

    async def wlan_delete_wifi_uplink_profile_by_id_v1(
        self,
        ssid_name: str = None,
    ) -> Response:
        """Delete profile by ID.

        Args:
            ssid_name (str, optional): ssidName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wifi-uplink/{ssid_name}"

        return await self.delete(url)

    async def wlan_create_wifi_uplink_profile_wifi1x_auth_by_id_v1(
        self,
        ssid_name: str = None,
    ) -> Response:
        """Create wifi1x-auth by ID.

        Args:
            ssid_name (str, optional): ssidName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wifi-uplink/{ssid_name}/wifi1x-auth"

        return await self.post(url)

    async def wlan_read_wifi_uplink_profile_wifi1x_auth_by_id_v1(
        self,
        ssid_name: str = None,
    ) -> Response:
        """Get wifi1x-auth by ID.

        Args:
            ssid_name (str, optional): ssidName

        Returns:
            Response: CentralAPI Response object
        """
        url = f"/networking/v1/wifi-uplink/{ssid_name}/wifi1x-auth"

        return await self.get(url)
